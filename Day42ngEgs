Exercise:

Design an Input form to enter Employee details such as:
Name: 								        Name: Monica
EmpID : 								EmpID: 1010
Sal : 									Earnings: $10.00
When we enter the salary, it should be displayed as a currency in the side of the textbox.
Use Interpolation + two-way binding of Angular technology




app.component.ts:

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public value1: number = 10;  
  public array1: Array<number> = [10, 22, 14];  
  public dt1: Date = new Date();  
  public status: boolean = true;  
  public returnString(): string {  
      return "String return from function";  
  }  
} 



app.component.html:

<div>   
  <span>Current Number is {{value1}}</span>      
  <br /><br />    
  <span>Current Number as currency is {{value1 }} Rs.</span>  
  <br /><br />  
  <span>Current Date is {{dt1}}</span>  
  <br /><br />  
  <span>Current Date as date is {{dt1 | date}}</span>  
  <br /><br />  
  <span>Status is {{status}}</span>  
  <br /><br />  
  <span>Array is {{array1}}</span>  
  <br /><br /> 
  <span>Using Ternary Operator: <br/>
  {{status ? "This is correct status" :"This is false status"}}</span>  
  <br /><br />  
  <span>{{returnString()}}</span>  
</div>




<div>  
  <br /><br />
  Display Value in Input Controls : <input [value]="value1" />  
  <br /><br />    
  <span>Current Number is {{value1}}</span>      
  <br /><br />    
  <span>Current Number as currency is {{value1 }} Rs.</span>  
  <br /><br />  
  <span>Current Date is {{dt1}}</span>  
  <br /><br />  
  <span>Current Date as date is {{dt1 | date}}</span>  
  <br /><br />  
  <span>Status is {{status}}</span>  
  <br /><br />  
  <span>Array is {{array1}}</span>  
  <br /><br /> 
  <span>Using Ternary Operator: <br/>
  {{status ? "This is correct status" :"This is false status"}}</span>  
  <br /><br />  
  <span>{{returnString()}}</span>  
</div>


Events:

app.component.ts:

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public showAlert() : void {  
    console.log('You clicked on the button...');  
    alert("Click Event Fired..."); 
  } 
  public showAlert2() : void {  
    console.log('You moved to the button...');  
    alert("MouseEnter Event Fired...");  
  }  
}



app.component.html:

<div>  
  <h2>Demo of Event Binding in Angular 8+</h2>  
  <input type="button" value="Click" (click)="showAlert()" />  
  <br /><br />  
  <input type="button" value="Mouse Enter" (mouseenter)="showAlert2()" />  
</div>




Two way binding:

app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ChildComponent } from './child/child.component';
import { LoginComponent } from './login/login.component';
import { InstructionsComponent } from './instructions/instructions.component';
import { AdvertisementsComponent } from './advertisements/advertisements.component';

import {FormsModule} from '@angular/forms';    




@NgModule({
  declarations: [
    AppComponent,
    ChildComponent,
    LoginComponent,
    InstructionsComponent,
    AdvertisementsComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }






app.component.ts:

import { Component } from "@angular/core";    
@Component({    
  selector: "app-root",    
  templateUrl: "./app.component.html",    
  styleUrls: ["./app.component.css"]    
})    
export class AppComponent {    
  fullName: string = "Programmers";    
} 





app.component.html:

<h2>Two-way Binding Example</h2>    
   Enter your Name: 
   <input [(ngModel)]="fullName" /> <br/><br/>    
<p> Hello {{fullName}} ! </p> 




All bindings together:

app.component.ts:

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public value1: number = 10;  
  public curlBrac: string = "{{var from ts file}}";
  public array1: Array<number> = [10, 22, 14];  
  public dt1: Date = new Date();  
  public status: boolean = true;  
  public returnString(): string {  
      return "String return from function";  
  }  
  public showAlert() : void {  
    console.log('You clicked on the button...');  
    alert("Click Event Fired..."); 
  } 
  public showAlert2() : void {  
    console.log('You moved to the button...');  
    alert("MouseEnter Event Fired...");  
  } 
  fullName: string = "Hello Programmers";   

} 




app.component.html:

<div>  
	<h1>Interpolation Binding by {{curlBrac}} </h1>
    <span>Current Number is {{value1}}</span>      
    <br /><br />    
    <span>Current Number as currency is {{value1 | currency}}</span>  
    <br /><br />  
    <span>Current Date is {{dt1}}</span>  
    <br /><br />  
    <span>Current Date as date is {{dt1 | date}}</span>  
    <br /><br />  
    <span>Status is {{status}}</span>  
    <br /><br />  
    <span>Using Ternary Operator: <br/>
    {{status ? "This is correct status" :"This is false status"}}</span>  
    <br /><br />  
    <span>{{returnString()}}</span> 
    <br /><br />  
    Array now is: 
    <span>{{array1}}</span>  
</div>
<hr>
<div> 
	<h1>Property Binding: attribute of any tag is put inside [] and bound to the variable in the ts file.</h1>      
    <input type="text" [value]="value1" />

    <br /><br />  
</div> 

<div>  
    <h1>Demo of Event Binding in Angular 8+</h1>  
    <input type="button" value="Click" (click)="showAlert()" />  
    <br /><br />  
    <input type="button" value="Mouse Enter" (mouseenter)="showAlert2()" />  
</div>
<div>
    <h1>Two-way Binding Example</h1>    
   <input [(ngModel)]="fullName" /> <br/><br/>    
    <p> {{fullName}} </p> 
</div>


















***************************************************************************************************



Exercise:
Create a login form as a child login component: Login 
Place the component on the left side of the page.
On the right side give Instructions (another child component) + Advertisement space (Add them as another child component)
Create 3 child components:
Login
Instructions
Advertisement
Added to app.component2.html such that they are displayed side by side. Do not disturb the original files.
Link the new app.component2.html to the app.component.ts file as the templateURL


Step1:
generate child components: Login, Instructions, Advertisements
code the HTML files of the components:
Login Component should have a login form submitting to nowhere
Instructions component should have OL with the Instructions for the site
Advertisements component should have some good ads for H1-> Cricket tickets or H1->HTML tutorials

Step2:
Code the app.component2.html file with the selectors of child components at proper placements.
Put the app.component2.html as a templateUrl of app.component.ts
run the app.

