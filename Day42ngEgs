ng generate component outmsg














**********************************************************************************************************


@Input: data transfer from parent to child:

1. Parent Component: Define a var in the class:
Name: string = “Abc”
2. Design the child Component (selector: “app-child”): Define an @Input() var in the class file:
@Input() public ParentName: string
3. In the Parent Template : HTML: link the attribute ParentName of the child Component to the Name variable of the Parent Component.
<app-child [ParentName]=“Name” ></app-child>
OR 2. Design the child Component (selector: “app-child”): Define an @Input() var in the class file:
@Input(“PName”) public ParentName: string
OR 3. In the Parent Template : HTML: link the attribute ParentName of the child Component to the Name variable of the Parent Component.
<app-child [PName]=“Name” ></app-child>









@input : input from parent to child and @output from child to parent

ng generate component message

message.component.ts:

import { Component, Input } from '@angular/core'; 
 
 @Component({  
  selector: 'message-info',  
  templateUrl: './message.component.html',  
  styleUrls : ['./message.component.css']  
})  
export class MessageComponent {  
    @Input() public message :string = '';  
    @Input('alert-pop') public message1 :string= ''  
     public showAlert():void{  
        alert(this.message1);  
    }  
}  


message.component.html:

<div>  
    Message : <h2>{{message}}</h2>  
    <input type="button" value="Show Alert" (click)="showAlert()"/>  
</div> 




app.component.ts:

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
    public val: string = "This is alert popup message from app.component to @input metadata of message component";   
}  



app.component.html:

<h1>
  Hello
</h1>
<message-info 
[message]='"This is passed from app.component to message component"'
[alert-pop]="val"></message-info>







**********************************************************************************************************************


Exercise:

Design an Input form to enter Employee details such as:
Name: 								        Name: Monica
EmpID : 								EmpID: 1010
Sal : 									Earnings: $10.00
When we enter the salary, it should be displayed as a currency in the side of the textbox.
Use Interpolation + two-way binding of Angular technology




app.component.ts:

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public value1: number = 10;  
  public array1: Array<number> = [10, 22, 14];  
  public dt1: Date = new Date();  
  public status: boolean = true;  
  public returnString(): string {  
      return "String return from function";  
  }  
} 



app.component.html:

<div>   
  <span>Current Number is {{value1}}</span>      
  <br /><br />    
  <span>Current Number as currency is {{value1 }} Rs.</span>  
  <br /><br />  
  <span>Current Date is {{dt1}}</span>  
  <br /><br />  
  <span>Current Date as date is {{dt1 | date}}</span>  
  <br /><br />  
  <span>Status is {{status}}</span>  
  <br /><br />  
  <span>Array is {{array1}}</span>  
  <br /><br /> 
  <span>Using Ternary Operator: <br/>
  {{status ? "This is correct status" :"This is false status"}}</span>  
  <br /><br />  
  <span>{{returnString()}}</span>  
</div>




<div>  
  <br /><br />
  Display Value in Input Controls : <input [value]="value1" />  
  <br /><br />    
  <span>Current Number is {{value1}}</span>      
  <br /><br />    
  <span>Current Number as currency is {{value1 }} Rs.</span>  
  <br /><br />  
  <span>Current Date is {{dt1}}</span>  
  <br /><br />  
  <span>Current Date as date is {{dt1 | date}}</span>  
  <br /><br />  
  <span>Status is {{status}}</span>  
  <br /><br />  
  <span>Array is {{array1}}</span>  
  <br /><br /> 
  <span>Using Ternary Operator: <br/>
  {{status ? "This is correct status" :"This is false status"}}</span>  
  <br /><br />  
  <span>{{returnString()}}</span>  
</div>


Events:

app.component.ts:

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public showAlert() : void {  
    console.log('You clicked on the button...');  
    alert("Click Event Fired..."); 
  } 
  public showAlert2() : void {  
    console.log('You moved to the button...');  
    alert("MouseEnter Event Fired...");  
  }  
}



app.component.html:

<div>  
  <h2>Demo of Event Binding in Angular 8+</h2>  
  <input type="button" value="Click" (click)="showAlert()" />  
  <br /><br />  
  <input type="button" value="Mouse Enter" (mouseenter)="showAlert2()" />  
</div>




Two way binding:

app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ChildComponent } from './child/child.component';
import { LoginComponent } from './login/login.component';
import { InstructionsComponent } from './instructions/instructions.component';
import { AdvertisementsComponent } from './advertisements/advertisements.component';

import {FormsModule} from '@angular/forms';    




@NgModule({
  declarations: [
    AppComponent,
    ChildComponent,
    LoginComponent,
    InstructionsComponent,
    AdvertisementsComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }






app.component.ts:

import { Component } from "@angular/core";    
@Component({    
  selector: "app-root",    
  templateUrl: "./app.component.html",    
  styleUrls: ["./app.component.css"]    
})    
export class AppComponent {    
  fullName: string = "Programmers";    
} 





app.component.html:

<h2>Two-way Binding Example</h2>    
   Enter your Name: 
   <input [(ngModel)]="fullName" /> <br/><br/>    
<p> Hello {{fullName}} ! </p> 




All bindings together:

app.component.ts:

import { Component } from '@angular/core';  
@Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent {  
  public value1: number = 10;  
  public curlBrac: string = "{{var from ts file}}";
  public array1: Array<number> = [10, 22, 14];  
  public dt1: Date = new Date();  
  public status: boolean = true;  
  public returnString(): string {  
      return "String return from function";  
  }  
  public showAlert() : void {  
    console.log('You clicked on the button...');  
    alert("Click Event Fired..."); 
  } 
  public showAlert2() : void {  
    console.log('You moved to the button...');  
    alert("MouseEnter Event Fired...");  
  } 
  fullName: string = "Hello Programmers";   

} 




app.component.html:

<div>  
	<h1>Interpolation Binding by {{curlBrac}} </h1>
    <span>Current Number is {{value1}}</span>      
    <br /><br />    
    <span>Current Number as currency is {{value1 | currency}}</span>  
    <br /><br />  
    <span>Current Date is {{dt1}}</span>  
    <br /><br />  
    <span>Current Date as date is {{dt1 | date}}</span>  
    <br /><br />  
    <span>Status is {{status}}</span>  
    <br /><br />  
    <span>Using Ternary Operator: <br/>
    {{status ? "This is correct status" :"This is false status"}}</span>  
    <br /><br />  
    <span>{{returnString()}}</span> 
    <br /><br />  
    Array now is: 
    <span>{{array1}}</span>  
</div>
<hr>
<div> 
	<h1>Property Binding: attribute of any tag is put inside [] and bound to the variable in the ts file.</h1>      
    <input type="text" [value]="value1" />

    <br /><br />  
</div> 

<div>  
    <h1>Demo of Event Binding in Angular 8+</h1>  
    <input type="button" value="Click" (click)="showAlert()" />  
    <br /><br />  
    <input type="button" value="Mouse Enter" (mouseenter)="showAlert2()" />  
</div>
<div>
    <h1>Two-way Binding Example</h1>    
   <input [(ngModel)]="fullName" /> <br/><br/>    
    <p> {{fullName}} </p> 
</div>


















***************************************************************************************************



Exercise:
Create a login form as a child login component: Login 
Place the component on the left side of the page.
On the right side give Instructions (another child component) + Advertisement space (Add them as another child component)
Create 3 child components:
Login
Instructions
Advertisement
Added to app.component2.html such that they are displayed side by side. Do not disturb the original files.
Link the new app.component2.html to the app.component.ts file as the templateURL


Step1:
generate child components: Login, Instructions, Advertisements
code the HTML files of the components:
Login Component should have a login form submitting to nowhere
Instructions component should have OL with the Instructions for the site
Advertisements component should have some good ads for H1-> Cricket tickets or H1->HTML tutorials

Step2:
Code the app.component2.html file with the selectors of child components at proper placements.
Put the app.component2.html as a templateUrl of app.component.ts
run the app.






***************************************************************************************************
Recap of Data Binding:

Data Bindings:
1: Interpolation 
	Write var in app.component.ts : 
	Name:string=“abc”;
	Use in {{}} in the HTML template
	{{Name}}
2. Property
	Write var in app.component.ts
	Use [] for property/attribute of the tag with the var name in “” as a value of the property in HTML template
	<input [value]=“Name”>
3. Event Binding 
	Write function in app.component.ts : 
	msgOp():void{alert(“Hi”);
	Use in () for DOM events of the tag with the function name in “” to run the event accordingly in in the HTML template
	<button (click)=“msgOp()”>
4. Two Way Binding
	App.module.ts: add FormsModule as an import
	Write var in app.component.ts
	Use [(ngModel)] for default property/attribute and default event of the tag with the var name in “” as a value of the property in HTML template
	<input [(ngModel)]=“Name”>


Example:

app.component.ts:

import { Component } from '@angular/core';  
 @Component({  
  selector: 'app-root',  
  templateUrl: './app.component.html',  
  styleUrls : ['./custom.css']  
})  
export class AppComponent { 
  cur:string="{{}}"
  name : string = "Risita and Nisha" ;   
  msgOp():void {
    alert("hi "+this.name);
  }
}  




app.component.html:

<h1>
  Interpolation binding with {{cur}} written twice
  {{name}}
</h1>
<hr>
<h1>
   Property binding with [] having the prop binding
  <input [value]="name">
</h1>
<hr>
<h1>
  Event binding with () having the DOM Event binding 
  <input type="button" value="sayHi" (click)="msgOp()"></h1>
<hr>
<h1>
  Two way binding with [()] having ngModel with default prop and evnt binding
  <input [(ngModel)]="name">
</h1>


