//DIP
using System;

namespace Prj1Day17
{
    interface IHotDrink
    {
        void prepare();
    }
    class Tea : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Tea is prepared");
        }
    }
    class Coffee : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Coffee is prepared");
        }
    }
    class Soup : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Soup is prepared");
        }
    }
    class Restaurant
    {
        IHotDrink hotDrink;
        public Restaurant(IHotDrink hotDrink)
        {
            this.hotDrink = hotDrink;
        }
        public Restaurant()
        {
            hotDrink = new Tea();
        }
        public void serve()
        {
            hotDrink.prepare();
            Console.WriteLine("Serving the preparations!!");
        }
    }
    internal class Program
    {
        
        static void Main(string[] args)
        {
            Restaurant r1 = new Restaurant(new Tea());
            r1.serve();
            Restaurant r2 = new Restaurant(new Coffee());
            r2.serve();
            Restaurant r3 = new Restaurant(new Soup());
            r3.serve();
        }
    }
}






using System;

namespace Prj1Day17
{
    //Not in ISP
    interface Convertor
    {
        int foot2metre();
        int Km2metre();
        int kelvin2Celcius();
        int Celcius2Kelvin();
    }
    //In ISP
    interface TempConvertor
    {
        int kelvin2Celcius();
        int Celcius2Kelvin();
    }
    interface DistanceConvertor
    {
        int foot2metre();
        int Km2metre();
    }
    class tempCalculator : TempConvertor
    {
        public int Celcius2Kelvin()
        {
            return 100;
        }

        //public int foot2metre()
        //{
        //    throw new NotImplementedException();
        //}

        public int kelvin2Celcius()
        {
            return 102;
        }

        //public int Km2metre()
        //{
        //    throw new NotImplementedException();
        //}
    }
    class CivilEngg : DistanceConvertor
    {
        //public int Celcius2Kelvin()
        //{
        //    throw new NotImplementedException();
        //}

        public int foot2metre()
        {
            return 300;
        }

        //public int kelvin2Celcius()
        //{
        //    throw new NotImplementedException();
        //}

        public int Km2metre()
        {
            return 1000;
        }
    }
    internal class Program
    {
        
        static void Main(string[] args)
        {
            CivilEngg c = new CivilEngg();
            Console.WriteLine("CivilEngg: Foot2Metre" + c.foot2metre());
            Console.WriteLine("CivilEngg: Km2Metre" + c.Km2metre());
            tempCalculator t = new tempCalculator();
            Console.WriteLine("tempCalculator: kelvin2Celcius" + t.kelvin2Celcius());
            Console.WriteLine("tempCalculator: Celcius2Kelvin" + t.Celcius2Kelvin());

        }
    }
}











using System;
//LSP
namespace Prj1Day17
{
    class Bird //cannot have fly() as Ostrich cannot substitute the flying functionality 
    {
        public virtual void eat()
        {
            Console.WriteLine("All birds Eat");
        }
    }
    class FlightBird : Bird
    { 
        public virtual void fly()
        {
            Console.WriteLine("All birds Fly");
        }
    }
    class FlightLessBird : Bird
    {
       
    }
    class Parrot : FlightBird
    {
        public override void fly()
        {
            Console.WriteLine("Parrots Fly Low");
        }
        public override void eat()
        {
            Console.WriteLine("Parrots eat green chillies");
        }
    }
    class Eagle : FlightBird
    {
        public override void fly()
        {
            Console.WriteLine("Eagles Fly High");
        }
        public override void eat()
        {
            Console.WriteLine("Eagles eat other Birds");
        }
    }
    class Ostrich : FlightLessBird
    {
        //public override void fly()
        //{
        //    throw new Exception("Ostrich cannot fly!");
        //}
        public override void eat()
        {
            Console.WriteLine("Ostrich eat land food");
        }
    }
    internal class Program
    {
        public static void fnBird(Bird b)
        {
            if (b is FlightBird)
            {
                FlightBird b2 = (FlightBird)b;
                b2.fly();
            }
            b.eat();
        }
        static void Main(string[] args)
        {
            Bird[] birds = new Bird[5];
            birds[0] = new Parrot();
            birds[1] = new Eagle();
            birds[2] = new Parrot();
            birds[3] = new Ostrich();
            birds[4] = new Eagle();
            foreach(Bird b in birds){
                fnBird(b);
            }

        }
    }
}












using System;

namespace Prj1Day17
{
    class MobileApp1 //OCP
    {
        private const string author = "Abc";
        public virtual void theme() //Open for Updation/Extension
        {
            Console.WriteLine("Theme in Mobile App Ver 1");
        }
        public void printAuthor() //closed for modification
        {
            Console.WriteLine("Author: " + author);
        }
        
    }
    class MobileApp2: MobileApp1
    {
        public override void theme()
        {
            Console.WriteLine("Theme in Mobile App Ver 2");
        }
        public void printAuthor()
        {
            Console.WriteLine("Author: " + "Monica");
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            MobileApp1 app = new MobileApp2();
            app.printAuthor();
            app.theme();

        }
    }
}











using System;

namespace Prj1Day17
{
    class DeveloperNOtInSRP
    {
        public void codeWriting()
        {
            Console.WriteLine("Code..code..code..");
        }
        public void unitTesting()
        {
            Console.WriteLine("Unit test the codes..");
        }
        public void Designing()
        {
            Console.WriteLine("UML Designing..");
        }
        public void teamManagement()
        {
            Console.WriteLine("Manage a big team of 20 members..");
        }
        public void sales()
        {
            Console.WriteLine("PreSales talk with the client..");
        }
        public void training()
        {
            Console.WriteLine("Train the team..");
        }
    }
    class DeveloperInSRP
    {
        public void codeWriting()
        {
            Console.WriteLine("Code..code..code..");
        }
        public void unitTesting()
        {
            Console.WriteLine("Unit test the codes..");
        }
        public void Designing()
        {
            Console.WriteLine("UML Designing..");
        }
    }
    class TeamManagerInSRP { 
        public void teamManagement()
        {
            Console.WriteLine("Manage a big team of 20 members..");
        }
        public void sales()
        {
            Console.WriteLine("PreSales talk with the client..");
        }
        public void training()
        {
            Console.WriteLine("Train the team..");
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            DeveloperNOtInSRP dev1 = new DeveloperNOtInSRP();
            dev1.codeWriting();
            dev1.unitTesting();
            dev1.Designing();
            dev1.sales();
            dev1.teamManagement();
            dev1.training();
            DeveloperInSRP dev2 = new DeveloperInSRP();
            dev2.codeWriting();
            dev2.unitTesting();
            dev2.Designing();

        }
    }
}


