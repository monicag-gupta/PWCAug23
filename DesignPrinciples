SOLID:
Principle Name : What it says?
SRP: Single Responsibility Principle
One class should have one and only one reasonability
OCP: Open Closed Principle
Software components should be open for extension, but closed for modification
LSP: Liskov Substitution Principle
Derived types must be completely substitutable for their base types
ISP: Interface Segregation Principle
Clients should not be forced to implement unnecessary methods which they will not use
DIP: Dependency Inversion Principle
Depend on abstractions, not on concretions


Advantages of SOLID principles:
It reduces the dependencies so that a block of code can be changed without affecting the other code blocks.
The principles intended to make design easier, understandable.
By using the principles, the system is maintainable, scalable, and reusable.
It avoids the bad design of the software.
By applying these principles, the code will be much more clear, testable, and expendable.



Single Responsibility Principle (SRP)
The single responsibility principle states that every Java class must perform a single functionality. 
Implementation of multiple functionalities in a single class mashup the code and if any modification is required may affect the whole class. 
It precise the code and the code can be easily maintained.
The Single Responsibility Principle states that   every object should have a single responsibility,   and that responsibility should be entirely  encapsulated by the class. 
There should never be more than one reason for a class to change. (Robert C. “Uncle Bob” Martin )




Open-Closed Principle
The application or module entities the methods, functions, variables, etc. 
The open-closed principle states that according to new requirements the module should be open for extension but closed for modification. 
The extension allows us to implement new functionality to the module.
Open to Extension 
New behavior can be added in the future 
Closed to Modification 
Changes to source or binary code are not required 
The Open / Closed Principle states that software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification 



Liskov Substitution Principle
The Liskov Substitution Principle (LSP) was introduced by Barbara Liskov. 
It applies to inheritance in such a way that the derived classes must be completely substitutable for their base classes. 
In other words, if class A is a subtype of class B, then we should be able to replace B with A without interrupting the behavior of the program.
It extends the open-close principle and also focuses on the behavior of a superclass and its subtypes. 
We should design the classes to preserve the property unless we have a strong reason to do otherwise. 
The Liskov Substitution Principle states that Subtypes must be substitutable for their base types.

Child classes must not:
Remove base class behavior 
Violate base class invariants 
And in general must not require calling code to know they are different from their base type.
Naïve OOP teaches use of IS-A to describe child classes’ relationship to base classes
LSP suggests that IS-A should be replaced with IS-SUBSTITUTABLE-FOR




Interface Segregation Principle
The Interface Segregation Principle (ISP) principle states that the larger interfaces split into smaller ones. 
Because the implementation classes use only the methods that are required. 
We should not force the client to use the methods that they do not want to use.
The goal of the interface segregation principle is similar to the single responsibility principle.
The Interface Segregation Principle states that Clients should not be forced to depend on methods they do not use.

Prefer small, cohesive interfaces to “fat” interfaces 
Keep interfaces small, cohesive, and focused 
Whenever possible, let the client define the interface 
Whenever possible, package the interface with the client 
Alternately, package in a third assembly client and implementation both depend upon 
Last resort: Package interfaces with their implementation 




Dependency Inversion Principle
The Dependency Inversion Principle (DIP) principle states that we must use abstraction (abstract classes and interfaces) instead of concrete implementations. 
High-level modules should not depend on the low-level module but both should depend on the abstraction. 
Because the abstraction does not depend on detail but the detail depends on abstraction. 
It decouples the software.
High-level modules should not depend on low-level modules. Both should depend on abstractions. 
Abstractions should not depend on details. Details should depend on abstractions. 











//DIP
using System;

namespace Prj1Day17
{
    interface IHotDrink
    {
        void prepare();
    }
    class Tea : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Tea is prepared");
        }
    }
    class Coffee : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Coffee is prepared");
        }
    }
    class Soup : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Soup is prepared");
        }
    }
    class Restaurant
    {
        IHotDrink hotDrink;
        public Restaurant(IHotDrink hotDrink)
        {
            this.hotDrink = hotDrink;
        }
        public Restaurant()
        {
            hotDrink = new Tea();
        }
        public void serve()
        {
            hotDrink.prepare();
            Console.WriteLine("Serving the preparations!!");
        }
    }
    internal class Program
    {
        
        static void Main(string[] args)
        {
            Restaurant r1 = new Restaurant(new Tea());
            r1.serve();
            Restaurant r2 = new Restaurant(new Coffee());
            r2.serve();
            Restaurant r3 = new Restaurant(new Soup());
            r3.serve();
        }
    }
}






using System;

namespace Prj1Day17
{
    //Not in ISP
    interface Convertor
    {
        int foot2metre();
        int Km2metre();
        int kelvin2Celcius();
        int Celcius2Kelvin();
    }
    //In ISP
    interface TempConvertor
    {
        int kelvin2Celcius();
        int Celcius2Kelvin();
    }
    interface DistanceConvertor
    {
        int foot2metre();
        int Km2metre();
    }
    class tempCalculator : TempConvertor
    {
        public int Celcius2Kelvin()
        {
            return 100;
        }

        //public int foot2metre()
        //{
        //    throw new NotImplementedException();
        //}

        public int kelvin2Celcius()
        {
            return 102;
        }

        //public int Km2metre()
        //{
        //    throw new NotImplementedException();
        //}
    }
    class CivilEngg : DistanceConvertor
    {
        //public int Celcius2Kelvin()
        //{
        //    throw new NotImplementedException();
        //}

        public int foot2metre()
        {
            return 300;
        }

        //public int kelvin2Celcius()
        //{
        //    throw new NotImplementedException();
        //}

        public int Km2metre()
        {
            return 1000;
        }
    }
    internal class Program
    {
        
        static void Main(string[] args)
        {
            CivilEngg c = new CivilEngg();
            Console.WriteLine("CivilEngg: Foot2Metre" + c.foot2metre());
            Console.WriteLine("CivilEngg: Km2Metre" + c.Km2metre());
            tempCalculator t = new tempCalculator();
            Console.WriteLine("tempCalculator: kelvin2Celcius" + t.kelvin2Celcius());
            Console.WriteLine("tempCalculator: Celcius2Kelvin" + t.Celcius2Kelvin());

        }
    }
}











using System;
//LSP
namespace Prj1Day17
{
    class Bird //cannot have fly() as Ostrich cannot substitute the flying functionality 
    {
        public virtual void eat()
        {
            Console.WriteLine("All birds Eat");
        }
    }
    class FlightBird : Bird
    { 
        public virtual void fly()
        {
            Console.WriteLine("All birds Fly");
        }
    }
    class FlightLessBird : Bird
    {
       
    }
    class Parrot : FlightBird
    {
        public override void fly()
        {
            Console.WriteLine("Parrots Fly Low");
        }
        public override void eat()
        {
            Console.WriteLine("Parrots eat green chillies");
        }
    }
    class Eagle : FlightBird
    {
        public override void fly()
        {
            Console.WriteLine("Eagles Fly High");
        }
        public override void eat()
        {
            Console.WriteLine("Eagles eat other Birds");
        }
    }
    class Ostrich : FlightLessBird
    {
        //public override void fly()
        //{
        //    throw new Exception("Ostrich cannot fly!");
        //}
        public override void eat()
        {
            Console.WriteLine("Ostrich eat land food");
        }
    }
    internal class Program
    {
        public static void fnBird(Bird b)
        {
            if (b is FlightBird)
            {
                FlightBird b2 = (FlightBird)b;
                b2.fly();
            }
            b.eat();
        }
        static void Main(string[] args)
        {
            Bird[] birds = new Bird[5];
            birds[0] = new Parrot();
            birds[1] = new Eagle();
            birds[2] = new Parrot();
            birds[3] = new Ostrich();
            birds[4] = new Eagle();
            foreach(Bird b in birds){
                fnBird(b);
            }

        }
    }
}












using System;

namespace Prj1Day17
{
    class MobileApp1 //OCP
    {
        private const string author = "Abc";
        public virtual void theme() //Open for Updation/Extension
        {
            Console.WriteLine("Theme in Mobile App Ver 1");
        }
        public void printAuthor() //closed for modification
        {
            Console.WriteLine("Author: " + author);
        }
        
    }
    class MobileApp2: MobileApp1
    {
        public override void theme()
        {
            Console.WriteLine("Theme in Mobile App Ver 2");
        }
        public void printAuthor()
        {
            Console.WriteLine("Author: " + "Monica");
        }
    }

    internal class Program
    {
        static void Main(string[] args)
        {
            MobileApp1 app = new MobileApp2();
            app.printAuthor();
            app.theme();

        }
    }
}











using System;

namespace Prj1Day17
{
    class DeveloperNOtInSRP
    {
        public void codeWriting()
        {
            Console.WriteLine("Code..code..code..");
        }
        public void unitTesting()
        {
            Console.WriteLine("Unit test the codes..");
        }
        public void Designing()
        {
            Console.WriteLine("UML Designing..");
        }
        public void teamManagement()
        {
            Console.WriteLine("Manage a big team of 20 members..");
        }
        public void sales()
        {
            Console.WriteLine("PreSales talk with the client..");
        }
        public void training()
        {
            Console.WriteLine("Train the team..");
        }
    }
    class DeveloperInSRP
    {
        public void codeWriting()
        {
            Console.WriteLine("Code..code..code..");
        }
        public void unitTesting()
        {
            Console.WriteLine("Unit test the codes..");
        }
        public void Designing()
        {
            Console.WriteLine("UML Designing..");
        }
    }
    class TeamManagerInSRP { 
        public void teamManagement()
        {
            Console.WriteLine("Manage a big team of 20 members..");
        }
        public void sales()
        {
            Console.WriteLine("PreSales talk with the client..");
        }
        public void training()
        {
            Console.WriteLine("Train the team..");
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            DeveloperNOtInSRP dev1 = new DeveloperNOtInSRP();
            dev1.codeWriting();
            dev1.unitTesting();
            dev1.Designing();
            dev1.sales();
            dev1.teamManagement();
            dev1.training();
            DeveloperInSRP dev2 = new DeveloperInSRP();
            dev2.codeWriting();
            dev2.unitTesting();
            dev2.Designing();

        }
    }
}


