namespace Day30MVC.Models
{
    public class Employee
    {
        public string name { get; set; }
        public int id { get; set; }

        public Employee(string name, int id)
        {
            this.name = name;
            this.id = id;
        }

        public Employee() { }

        public override string ToString()
        {
            return "\nEmp: " + name + " with id: " + id;
        }
    }
}






using System.Collections.Generic;
using System;

namespace Day30MVC.Models
{
    public class EmployeeList
    {
        public List<Employee> emps = new List<Employee>();
        public EmployeeList(List<Employee> emps) { this.emps = emps; }
        public EmployeeList(Employee emp) { this.emps.Add(emp); }
        public EmployeeList()
        {
            this.AddEmp(new Employee("abc", 101));
            this.AddEmp(new Employee("xyz", 102));
            this.AddEmp(new Employee("abcxyz", 103));
        }
        public void AddEmp(Employee emp) { this.emps.Add(emp); }
        public void DispEmp()
        {
            foreach (Employee e in emps)
            {
                Console.WriteLine(e);
            }
        }
        public Employee getEmp(string name)
        {
            Employee e = new Employee("default", 100);
            foreach (Employee ee in emps)
            {
                if (ee.name.Equals(name))
                {
                    e = ee;
                }
            }
            
            Employee e2 = emps.Find(ee => ee.name.Equals(name));
            return e;
        }
    }
}






using Day30MVC.Models;
using Microsoft.AspNetCore.Mvc;

namespace Day30MVC.Controllers
{
    public class EmployeeController : Controller
    {
        EmployeeList emps = new EmployeeList();
        public IActionResult Index()
        {
            return View();
        }
        public IActionResult WelcomeEmp(string name)
        {
            TempData["Emp"] = emps.getEmp(name);
            return View();
        }
        public IActionResult WelcomeEmp2(string name)
        {
            TempData["EmpName"] = name;
            return View();
        }
        public IActionResult ListEmp()
        {
            return View(emps.emps);
        }

        public JsonResult ListEmp2()
        {
            return Json(emps.emps);
        }

    }
}



Index.cshtml:
<h1>
	<a href="/Employee/ListEmp">Welcome to list of Emp Page</a>
	<br />
	<a href="/Employee/ListEmp2">List of Emp as JSON</a>
	<Br /><hr />

	<form action="/Employee/WelcomeEmp2">
		Name: <input type="text" name="name" />
		<input type="submit" value="WelcomeEmp2" />
	</form>
	<br />
	<hr />

	<form action="/Employee/WelcomeEmp">
		<!-- Name: Monica is a hidden field here.
		<input type="hidden" name="name1" value="Monica"/> -->
		Name: <input type="text" name="name" />
		<input type="submit" value="WelcomeEmp" />
	</form>
</h1>




WelcomeEmp.cshtml:
<h1>
	Welcome @TempData["Emp"] !!
</h1>


WelcomeEmp2.cshtml:
<h1>
	Welcome @TempData["EmpName"] !!
</h1>



ListEmp.cshtml:

@model IEnumerable<Day30MVC.Models.Employee>

@foreach (var emp in Model)
{
    <div>
        @emp
        <hr />
    </div>
}



Exercise:
I.
Update the project for adding Employee to the list and displaying the list with updated Employee, 
and do the other operations with added employee

Update the project for updating any existing Employee (search by ID, update the name). 

The project should have proper links and form for adding and updating.




II.
Provide a Menu with buttons for : Add a new Student, Update an existing student, delete an existing Student, display the list of students, search a student according to Id, Search the group of students according to criteria as mentioned below.

Prepare an MVC project for Student class and StdList class
Add Views which submits a new Student data to the controller of Student which adds student data to the list of stds and returns the fresh list in JSON format.
Provide link to each page in each view
Student{id, name, course, duration in years, year of enrollment, fees}
Provide search according to ID, course, name, duration, year, fees range.



