namespace Day30MVC.Models
{
    public class Employee
    {
        public string name { get; set; }
        public int id { get; set; }

        public Employee(string name, int id)
        {
            this.name = name;
            this.id = id;
        }

        public Employee() { }

        public override string ToString()
        {
            return "\nEmp: " + name + " with id: " + id;
        }
    }
}






using System.Collections.Generic;
using System;

namespace Day30MVC.Models
{
    public class EmployeeList
    {
        public List<Employee> emps = new List<Employee>();
        public EmployeeList(List<Employee> emps) { this.emps = emps; }
        public EmployeeList(Employee emp) { this.emps.Add(emp); }
        public EmployeeList()
        {
            this.AddEmp(new Employee("abc", 101));
            this.AddEmp(new Employee("xyz", 102));
            this.AddEmp(new Employee("abcxyz", 103));
        }
        public void AddEmp(Employee emp) { this.emps.Add(emp); }
        public void DispEmp()
        {
            foreach (Employee e in emps)
            {
                Console.WriteLine(e);
            }
        }
        public Employee getEmp(string name)
        {
            Employee e = new Employee("default", 100);
            foreach (Employee ee in emps)
            {
                if (ee.name.Equals(name))
                {
                    e = ee;
                }
            }
            
            Employee e2 = emps.Find(ee => ee.name.Equals(name));
            return e;
        }
    }
}






using Day30MVC.Models;
using Microsoft.AspNetCore.Mvc;

namespace Day30MVC.Controllers
{
    public class EmployeeController : Controller
    {
        EmployeeList emps = new EmployeeList();
        public IActionResult Index()
        {
            return View();
        }
        public IActionResult WelcomeEmp(string name)
        {
            TempData["Emp"] = emps.getEmp(name);
            return View();
        }
        public IActionResult WelcomeEmp2(string name)
        {
            TempData["EmpName"] = name;
            return View();
        }
        public IActionResult ListEmp()
        {
            return View(emps.emps);
        }

        public JsonResult ListEmp2()
        {
            return Json(emps.emps);
        }

    }
}



Index.cshtml:
<h1>
	<a href="/Employee/ListEmp">Welcome to list of Emp Page</a>
	<br />
	<a href="/Employee/ListEmp2">List of Emp as JSON</a>
	<Br /><hr />

	<form action="/Employee/WelcomeEmp2">
		Name: <input type="text" name="name" />
		<input type="submit" value="WelcomeEmp2" />
	</form>
	<br />
	<hr />

	<form action="/Employee/WelcomeEmp">
		<!-- Name: Monica is a hidden field here.
		<input type="hidden" name="name1" value="Monica"/> -->
		Name: <input type="text" name="name" />
		<input type="submit" value="WelcomeEmp" />
	</form>
</h1>




WelcomeEmp.cshtml:
<h1>
	Welcome @TempData["Emp"] !!
</h1>


WelcomeEmp2.cshtml:
<h1>
	Welcome @TempData["EmpName"] !!
</h1>



ListEmp.cshtml:

@model IEnumerable<Day30MVC.Models.Employee>

@foreach (var emp in Model)
{
    <div>
        @emp
        <hr />
    </div>
}



