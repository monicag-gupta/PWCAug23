Exercise:
Model:
Employee (id, name) : POCO :Default Constructor, Field Constructor, id, name as Properties (get;set;) , ToString()
Employees : POCO 
List<Employee> empList  
default Constructor, add 3 Employee to the empList
returnList() -> return empList
AddEmp(id, name) -> empList.add(new Employee(id, name)




Controller
EmpController
static Employees emps=new Employees();
IActionResult Index()
Return View()
JsonResult Show()
Return Json(emps.returnList());
IActionResult AddEmp(int id, string name)
emps.AddEmp(id,name);
Return View();



Views -> Emp -> Index.cshtml
H1- > Hello to the Employees!

Add Employee Form:
ID : 
Name : 
Add button -> action = “/Emp/AddEmp”
<hr>
Link to See the List of Employees in JSON format: href= “/Emp/Show”





Views -> Emp -> AddEmp.cshtml
H1- > Added to the list of Employees!
<hr>
Link to See the List of Employees in JSON format: href= “/Emp/Show”





























Employee Form:
Enter Name :

Enter Age : 




The  Page submits to hr() action: Hr() calls this model and gets a string value and prints it in the view.
From Model, HelloWorld.validate(int age)
If age is negative or more than 150, returns “Ghost Employee”
If age is more than 60, returns “Senior Citizen Employees”
If age is less than 20, returns “Child Employee”
Else returns “Good Working Employees




Index() 
View() -> have the form : Employee Form

The Employee Form submits to Hr()
Hr(string name, int age)
HelloWorld obj=..
String msg = obj.validate(age);
ViewData[“ageMsg”]=msg;
Return View();


In the View of Hr, print the ViewData[“ageMsg”]







using Microsoft.AspNetCore.Mvc;
using MVCBasics.Models;

namespace MVCBasics.Controllers
{
    public class HelloController : Controller
    {
        public IActionResult Welcome()
        {
            HelloWorld hw = new HelloWorld();
            ViewData["msg"] = hw.hello();
            return View();
        }
        public IActionResult SayHi(string myName)
        {
            ViewBag.Name = myName;

            return View();
        }
    }
}



Welcome.cshtml:
<h1>Hello World! from View</h1>
<h1>@ViewData["msg"]</h1>
<hr />
<form action="/Hello/SayHi">
Name : <input type="text" name="myName" /> 
<input type="Submit" />
</form>



SayHi.csHTML:
<h1>Hi @ViewBag.Name !!</h1>



Model: HelloWorld.cs

namespace MVCBasics.Models
{
    public class HelloWorld
    {
        public string hello()
        {
            return "Hello World!";
        }
    }
}



















using Day31MVC.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Day31MVC.Controllers
{
	public class HomeController : Controller
	{
		private readonly ILogger<HomeController> _logger;

		public HomeController(ILogger<HomeController> logger)
		{
			_logger = logger;
		}

		public IActionResult Index()
		{
			return View();
		}
		public IActionResult Index1()
		{
			return View();
		}
		public IActionResult Index2()
		{
			return View();
		}
		public IActionResult Privacy()
		{
			return View();
		}

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
			return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}
	}
}






public IActionResult Index()
		{
			return View();
		}
		public IActionResult Index1()
		{
			return View();
		}
		public IActionResult Index2()
		{
			return View();
		}





Index.cshtml

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>


<form action="/Home/Index1">
    Enter the Correct Answer:
    <br/>
    Is Asp.Net library supported by MVC 5?
    <br/>
    <input type="radio" name="ans"/>Yes
    <br />
    <input type="radio" name="ans" />No
    <br/>
    <input type="submit" value="Next" />    
</form>





Index1.cshtml

<h1>This is my Index1 Page</h1>
<form>
    Enter the Correct Answer:
    <br />
    MVC is Modern Views for Components?
    <br />
    <input type="radio" name="ans" />Yes
    <br />
    <input type="radio" name="ans" />No
    <br />
    <input type="submit" value="Next" formaction="/Home/Index2" />
    <input type="submit" value="Previous" formaction="/Home/Index" />
</form>




Index2.cshtml:

<h1>This is my Index2 Page</h1>
<form>
    Enter the Correct Answer:
    <br />
    ASp.Net is planned on the IIS server?
    <br />
    <input type="radio" name="ans" />Yes
    <br />
    <input type="radio" name="ans" />No
    <br />
    <input type="submit" value="Next" formaction="/Home/Index" />
    <input type="submit" value="Previous" formaction="/Home/Index1" />
</form>









STATE MANAGEMENT:
COOKIES:

using Day31MVC.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Day31MVC.Controllers
{
	public class HomeController : Controller
	{
		private readonly ILogger<HomeController> _logger;

		public HomeController(ILogger<HomeController> logger)
		{
			_logger = logger;
		}

		//public IActionResult Index()
		//{
  //          if (HttpContext.Request.Cookies.ContainsKey("Q1"))
  //          {
  //              var ans1 = HttpContext.Request.Cookies["Q1"];
  //              TempData["Q1"] = ans1;
  //          }
  //          else
  //              TempData["Q1"] = "";

  //          return View();
		//}
        public IActionResult Index(string ans)
        {
            if(ans!=null)
                 HttpContext.Response.Cookies.Append("Q2", ans);
            if (HttpContext.Request.Cookies.ContainsKey("Q1"))
            {
                var ans1 = HttpContext.Request.Cookies["Q1"];
                TempData["Q1"] = ans1;
            }
            else
                TempData["Q1"] = "";

            return View();
        }

        public IActionResult Index1(string ans)
		{
            if (ans != null)
            {
                HttpContext.Response.Cookies.Append("Q1", ans);
                HttpContext.Response.Cookies.Append("Q3", ans);
            }
            if (HttpContext.Request.Cookies.ContainsKey("Q2"))
            {
                var ans2 = HttpContext.Request.Cookies["Q2"];
                TempData["Q2"] = ans2;
            }
            else
                TempData["Q2"] = "";
            return View();
		}
		public IActionResult Index2(string ans)
		{
            if (ans != null) 
                HttpContext.Response.Cookies.Append("Q2", ans);
          
            if (HttpContext.Request.Cookies.ContainsKey("Q3"))
            {
                var ans3 = HttpContext.Request.Cookies["Q3"];
                TempData["Q3"] = ans3;
            }
            else
                TempData["Q3"] = "";
            return View();
        }
		public IActionResult Privacy()
		{
			return View();
		}

		[ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
		public IActionResult Error()
		{
			return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
		}
	}
}






Index Page:
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>


<form action="/Home/Index1">
    Enter the Correct Answer:
    <br/>
    Is Asp.Net library supported by MVC 5?
    <br/>
    Ans: <input type="text" name="ans" value=@TempData["Q1"] >
    <br/>
    <input type="submit" value="Next" />    
</form>





Index1 page:
<h1>This is my Index1 Page</h1>
<form>
    Enter the Correct Answer:
    <br />
    MVC is Modern Views for Components?
    <br />
    Ans: <input type="text" name="ans" value=@TempData["Q2"] >
    <br />
    <input type="submit" value="Next" formaction="/Home/Index2" />
    <input type="submit" value="Previous" formaction="/Home/Index" />
</form>






Index2 Page:

<h1>This is my Index2 Page</h1>
<form>
    Enter the Correct Answer:
    <br />
    ASp.Net is planned on the IIS server?
    <br />
    Ans: <input type="text" name="ans" value=@TempData["Q3"] >
    <br />
    <input type="submit" value="Next" formaction="/Home/Index" />
    <input type="submit" value="Previous" formaction="/Home/Index1" />
</form>









Exercise:

Login Id and password : pair of data (login form)
Being maintained for all the logged in pages.
Page 1: Login Page  : Next button take us to Inbox
Hidden step/action: Saves the cookies: either the data given by client or empty string(none of the cookies are null), redirects to Inbox page
Page 2: Inbox Page: 
If the cookies are present :
Just a table full of scratch messages
A link to Inbox page, Draft page, Sent page, Compose page
A link to logout
Else Inbox page should be empty with link to login page
Page 3-5: Compose Page / Draft page / Sent page:
If the cookies are present :
Just a table full of scratch data
A link to Inbox page, Draft page, Sent page, Compose page
A link to logout 
Else the pages should be empty with link to login page
Page 6 : Logout page:
Refresh the cookie for login credentials and delete the username and password
Provide a link to login page









