We can implement JSON Serialization/Deserialization in the following three ways:

Using JavaScriptSerializer class
Using DataContractJsonSerializer class
Using JSON.NET library 




Emp.cs under Models folder:


using System.Runtime.Serialization;

namespace Day36WebAPI.Models
{
    [DataContract]
    public class Emp
    {
        [DataMember]
        public string Name { get; set; }

        [DataMember]
        public string Description { get; set; }
    }

}






using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using Day36WebAPI.Models;
using System.Runtime.Serialization.Json;
using System.Text;
using System;

namespace Day36WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmpController : ControllerBase
    {

        [HttpGet]
        public ActionResult<string> Get()
        {
            Emp empObj = new Emp()
            {
                Name = "Jay",
                Description = "IT"
            };

            DataContractJsonSerializer js = new DataContractJsonSerializer(typeof(Emp));
            MemoryStream msObj = new MemoryStream();
            js.WriteObject(msObj, empObj);
            msObj.Position = 0;
            StreamReader sr = new StreamReader(msObj);

            // "{\"Description\":\"IT\",\"Name\":\"Jay\"}"
            string json = sr.ReadToEnd();

            sr.Close();
            msObj.Close();
            return json;
        }
        [HttpGet("id")]
        public ActionResult<Emp> Geting(int id)
        {
            string json = "{\"Description\":\"IT\",\"Name\":\"Jay\"}";

            using (var ms = new MemoryStream(Encoding.Unicode.GetBytes(json)))
            {
                // Deserialization from JSON
                DataContractJsonSerializer deserializer = new DataContractJsonSerializer(typeof(Emp));
                Emp emp = (Emp)deserializer.ReadObject(ms);
                //Console.Write("Name: " + emp.Name); // Name: Jay
                //Console.Write("Description: " + emp.Description); // Description: IT
                return emp;
            }
            //return null;

        }
    }
}








*******************************************************************************



Start an ASP .Net Core (MVC) project
Add models:
Student
StudentContext
Add APIController
StudentsController
Code


Add the consumer Controller:
ConsumerStdAPIController.cs
(later)Add it’s view as Razor view with Template: List, Model: Student:
(later)Index.cshtml
Add NuGet Package :
Newtonsoft.Json from Microsoft

Run the application.





Student:
namespace Day37MVCAPI.Models
{
    public class Student
    {
        public int StudentId { get; set; }
        public string Name { get; set; }
        public string SurName { get; set; }

    }
}



StudentContext:


using System.Collections.Generic;
using System.Linq;

namespace Day37MVCAPI.Models
{
    public class StudentContext
    {
        public List<Student> student = new List<Student>        {
            new Student { StudentId=101,Name="Abc",SurName="xyz"},
            new Student { StudentId = 102, Name = "Abc2", SurName = "xyz2" },
            new Student { StudentId = 103, Name = "Abc3", SurName = "xyz3" },
            new Student { StudentId = 104, Name = "Abc4", SurName = "xyz4" }
        };
        public List<Student> GetAllStudent()
        {
            return student;
        }
        public Student GetStudent(int id)
        {
            //Student s = new Student();
            //foreach (Student ss in student)
            //    if (id == ss.StudentId)
            //    {
            //        s = ss;
            //        break;
            //    }
            //return s;
            return student.FirstOrDefault(x => x.StudentId == id);
        }
        public StudentContext()
        {
            student.Add(new Student { StudentId = 105, Name = "Abc5", SurName = "xyz5" });
            student.Add(new Student { StudentId = 106, Name = "Abc6", SurName = "xyz6" });
            student.Add(new Student { StudentId = 107, Name = "Abc7", SurName = "xyz7" });
            student.Add(new Student { StudentId = 108, Name = "Abc8", SurName = "xyz8" });
        }
    }
}



using Day37MVCAPI.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Day37MVCAPI.Controllers
{
   
    [ApiController]
    [Produces("application/json")]
    [Route("api/Students")]
    public class StudentsController : ControllerBase
    {
        private StudentContext students = new StudentContext();
        [Microsoft.AspNetCore.Mvc.HttpGet]
        public ActionResult<IEnumerable<Student>> GetAllStudents()
        {
            return students.GetAllStudent();
        }
        [HttpGet("{id:int}")]
        //[Route("api/Students/{id}")]
        public ActionResult<Student> GetStudentById(int id)
        {
            return students.GetStudent(id);
        }
    }

}






using Day37MVCAPI.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net.Http;
using System;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace Day37MVCAPI.Controllers
{
    public class ConsumerStdAPIController : Controller
    {
        //string Baseurl = $"{Request.Scheme}://{Request.Host.Value}/";

        string Baseurl = "https://localhost:44303/";
        public async Task<IActionResult> Index()
        {
            List<Student> StdInfo = new List<Student>();
            using (var client = new System.Net.Http.HttpClient())
            {
                //Passing service base url
                client.BaseAddress = new Uri(Baseurl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllStudents using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Students");
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    //Deserializing the response recieved from web api and storing into the Student list
                    StdInfo = JsonConvert.DeserializeObject<List<Student>>(StdResponse);
                }
                return View(StdInfo);
            }
        }
    }
}
(later)Add it’s view as Razor view with Template: List, Model: Student:
(later)Index.cshtml




using Day37MVCAPI.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net.Http;
using System;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace Day37MVCAPI.Controllers
{
    public class ConsumerStdAPIController : Controller
    {

        string Baseurl = "https://localhost:44303/";
        public async Task<IActionResult> Index()
        {
            List<Student> StdInfo = new List<Student>();
            using (var client = new System.Net.Http.HttpClient())
            {
                //Passing service base url
                client.BaseAddress = new Uri(Baseurl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllStudents using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Students");
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    //Deserializing the response recieved from web api and storing into the Student list
                    StdInfo = JsonConvert.DeserializeObject<List<Student>>(StdResponse);
                }
                return View(StdInfo);
            }
        }
    }
}



startup.cs:

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day37MVCAPI
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=ConsumerStdAPI}/{action=Index}/{id?}");
            });
        }
    }
}





Add the HttpGet API
Add the Consumer
Add the Details Razor View
Run



change:
ConsumerStdAPIController.cs:

using Day37MVCAPI.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Net.Http;
using System;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace Day37MVCAPI.Controllers
{
    public class ConsumerStdAPIController : Controller
    {
        //string Baseurl = $"{Request.Scheme}://{Request.Host.Value}/";

        string Baseurl = "https://localhost:44329/";
        public async Task<IActionResult> Index()
        {
            List<Student> StdInfo = new List<Student>();
            using (var client = new System.Net.Http.HttpClient())
            {
                //Passing service base url
                client.BaseAddress = new Uri(Baseurl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllStudents using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Students");
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    //Deserializing the response recieved from web api and storing into the Student list
                    StdInfo = JsonConvert.DeserializeObject<List<Student>>(StdResponse);
                }
                return View(StdInfo);
            }
        }

        public async Task<IActionResult> GetStd(int id)
        {
            Student StdInfo = new Student();
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(Baseurl); //Passing service base url
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetStudentById using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Students/" + id);
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    StdInfo = JsonConvert.DeserializeObject<Student>(StdResponse);
                }
                return View(StdInfo);
            }
        }
    }
}



change: 
Index.cshtml

@model IEnumerable<Day37MVCAPI.Models.Student>

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.StudentId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SurName)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StudentId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SurName)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
            </td>
        </tr>
}
    </tbody>
</table>



<hr/>
<hr />
<form action="/ConsumerStdAPI/GetStd">
    <br />
    Enter Id of Student to see details: 
    <input type="text" name="id" />
    <br />
    <input type="submit" value="View Details" />
</form>





Add the Razor view : Details called GetStd with Model: Student

Run the application.








Exercise:
Complete the above API (StudentsController) for having 
AddaStudent(…), UpdateStudent(..), deleteStudent(..) 
functionality.
Also update the MVC Controller to work with the CRUD functionality 
(create razor view for the controller).





Separation Of WebAPI and MVC:
Project: ASP.Net Web API:
Day37WebAPI:

Add a Models Folder
In the Folder Add:
Std.cs:
namespace Day37WebAPI.Models
{
    public class Std
    {
        public int id { get; set; }
        public string name { get; set; }
    }
}


and add 
StdList.cs:
using System.Collections.Generic;
using System.Linq;

namespace Day37WebAPI.Models
{
    public class StdList
    {
        List<Std> stds = new List<Std>()
        {
            new Std{id=101,name="aaa"},
            new Std{id=102,name="bbb"},
            new Std{id=103,name="ccc"}
        };
        public List<Std> getAllStds()
        {
            return stds;
        }
        public Std getStd(int id)
        {
            return stds.FirstOrDefault(st => st.id == id);
        }
    }
}




Now Add an API Controller in the Controller folder:
StdController.cs:

using Day37WebAPI.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Day37WebAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StdController : ControllerBase
    {
        static StdList stds = new StdList();
        [HttpGet]
        public ActionResult<IEnumerable<Std>> getAll()
        {
            return stds.getAllStds();
        }

        [HttpGet("{id}")]
        public ActionResult<Std> getStd(int id)
        {
            return stds.getStd(id);
        }

    }
}





Run the Project and see the URL in Swagger.
KEEP THE PROJECT UP and RUNNING..


Now Create a new Asp.Net MVC Project:
Day37MVC:

In the Models Folder create 
Std.cs (It should match the Std.cs of WEB API)

namespace Day37MVC.Models
{
    public class Std
    {
        public int id { get; set; }
        public string name { get; set; }
    }
}




Now Add the Controller:
StdClientController.cs:


using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.Net.Http.Headers;
using System.Runtime.Serialization.Json;
using Day37MVC.Models;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Net.Http;
using System;

namespace Day37MVC.Controllers
{
    public class StdClientController : Controller
    {
        string Baseurl = "https://localhost:44338/"; //this is the URL from Swagger for running the APIs
        public async Task<IActionResult> Index()
        {
            List<Std> stds = new List<Std>();
            using (var client = new HttpClient())
            {
                //Passing service base url
                client.BaseAddress = new Uri(Baseurl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllStudents using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Std"); //this is the URI of the API itself
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    //Deserializing the response recieved from web api and storing into the Student list
                    stds = JsonConvert.DeserializeObject<List<Std>>(StdResponse);
                }
                return View(stds);
            }
        }

        public async Task<IActionResult> GetStd(int id)
        {
            Std std = new Std();
            using (var client = new HttpClient())
            {
                //Passing service base url
                client.BaseAddress = new Uri(Baseurl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllStudents using HttpClient
                HttpResponseMessage Res = await client.GetAsync("api/Std/" + id);// this is the URI of API itself
                //Checking the response is successful or not which is sent using HttpClient
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api
                    var StdResponse = Res.Content.ReadAsStringAsync().Result;
                    //Deserializing the response recieved from web api and storing into the Student list
                    std = JsonConvert.DeserializeObject<Std>(StdResponse);
                }
                return View(std);
            }


        }
    }
}




Now create the Views for 
Index:
Index Razor View for LIST with Model : Std
GetStd:
GetStd Razor View for DETAILS with Model : Std


Run the MVC Project to see the results.





