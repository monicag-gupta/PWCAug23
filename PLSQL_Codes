@@CONNECTIONS 
This variable returns the number of login attempts since SQL Server was last started. It returns an integer value.
@@ERROR 
The error number for the last T-SQL statement executed. If this value is zero than there were no errors otherwise it returns the error.  
@@IDENTITY
@@IDENTITY will return the last identity value entered into a table. 
@@IDLE
This variable returns the number of milliseconds SQL Server has been idle since it was last started.
@@CPU_BUSY
This system function returns the number of milliseconds the CPU has spent working since SQL Server was last started. It returns an integer value.
@@LANGUAGE
This system function returns the name of the language that is currently used by the SQL Server.
@@ROWCOUNT
This variable returns the number of rows affected by the last Transact-SQL statement.  
@@SERVERNAME 
This variable returns the name of the service under which SQL Server is running.
@@TOTAL_ERRORS
The @@TOTAL_ERRORS function returns the number of disk read/write errors encountered by SQL Server since it was last started. It returns an integer value.
@@VERSION  
This variable returns the current version of the SQL Server Software.
@@SERVERNAME
This function retrieves the name of the database server the application is linked to.








In testdb database, customers table: print what will be the salary of Kaushik if he gets a 15% hike in his current salary.
Use batch programming and a numerical variable for calculations:
Output:
With salary hike, Kaushik now gets : (new salary)

Declare a var. 
Set it to current salary of kaushik
Set it to 15 % hike
Print it with proper message








Begin
DECLARE 
    @product_name VARCHAR(MAX),
    @list_price DECIMAL(10,2);

SELECT 
    @product_name = product_name,
    @list_price = list_price
FROM
    bikestores.production.products
WHERE
    product_id = 1;

SELECT 
    @product_name AS product_name, 
    @list_price AS list_price;
End









Begin
 	SET NOCOUNT ON; 
	DECLARE @product_count INT;
	SET @product_count = (
           SELECT COUNT(*) FROM productsNew);
	--Print @product_count;
 	--PRINT 'The number of products is ' + CAST(@product_count AS VARCHAR(MAX));
 	SELECT @product_count;
End








Begin
	DECLARE @model_year SMALLINT;
	SET @model_year = 2018;
	SELECT
		product_name, model_year, list_price 
	FROM productsNew
	WHERE 
		model_year = @model_year
	ORDER BY product_name;
End





CREATE TABLE productsNew (
	product_id INT IDENTITY (1, 1) PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	brand_id INT NOT NULL,
	category_id INT NOT NULL,
	model_year SMALLINT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL);



INSERT INTO productsNew
VALUES 
 	('Test product1', 1, 1, 2018, 599),
 	('Test product2', 2, 2, 2016, 699),
 	('Test product3', 3, 3, 2018, 799),
 	('Test product4', 4, 4, 2015, 899);
