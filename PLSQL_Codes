























CREATE TABLE products_duplicate (
product_name VARCHAR (255) NOT NULL,
pstatus varchar(255)
);




CREATE or Alter TRIGGER trg_products_dup 
ON products
INSTEAD OF INSERT
AS
BEGIN
	SET NOCOUNT ON;
	if exists (select inserted.product_name from inserted 
		where inserted.product_name in(SELECT product_name
		FROM  products))
	Begin
		INSERT INTO products_duplicate ( 
			product_name, pstatus
		)
		SELECT
			i.product_name, 'Duplicate Entry'
		FROM
			inserted i
	End
	else
	Begin
		Insert into products(product_name, brand_id, category_id,
			model_year, list_price)
		select product_name, brand_id, category_id,
			model_year, list_price from Inserted;
	End
END


Select * from products
insert into products values('Test product6', 5, 5, 2019, 799)
Select * from products
--Duplicate Entry:
insert into products values('Test product6', 5, 5, 2019, 799)
Select * from products
Select * from products_duplicate
















select * into myCustTbl from customers;
select * from myCustTbl;


CREATE or alter TRIGGER trg_myCustTbl_Ins
ON myCustTbl
AFTER INSERT
AS
BEGIN
print 'Insert Operation happened successfully';
select * from inserted;
End





Insert into myCustTbl values(9,'abcd',22,'Delhi',6800);

CREATE or alter TRIGGER trg_myCustTbl_del
ON myCustTbl
AFTER DELETE
AS
BEGIN
print 'Deletion Operation happened successfully';
select * from deleted;
End

delete from myCustTbl where id=9;


CREATE or alter TRIGGER trg_myCustTbl_upd
ON myCustTbl
AFTER UPDATE
AS
BEGIN
print 'update Operation happened successfully';
select * from inserted;
select * from deleted;
End

update myCustTbl set name='abcdef' where id=8;



















drop table if exists products;
select * into products from bikestores.production.products;

select * from products;


CREATE TABLE product_audits(
    change_id INT IDENTITY PRIMARY KEY,
    product_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    brand_id INT NOT NULL,
    category_id INT NOT NULL,
    model_year SMALLINT NOT NULL,
    list_price DEC(10,2) NOT NULL,
    updated_at DATETIME NOT NULL,
    operation CHAR(3) NOT NULL,
    CHECK(operation = 'INS' or operation='DEL')
);




CREATE TRIGGER trg_product_audit
ON products
AFTER INSERT, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO product_audits(
        product_id,  product_name, brand_id,  category_id,  model_year, list_price, updated_at,  operation
    )
    SELECT
        i.product_id, product_name, brand_id, category_id, model_year,  i.list_price,  GETDATE(),  'INS'
    FROM  inserted i
    UNION ALL
    SELECT
        d.product_id,  product_name, brand_id, category_id, model_year,  d.list_price, GETDATE(),  'DEL'
    FROM  deleted d;
END



INSERT INTO products(
    product_name, brand_id, category_id, model_year,  list_price
)
VALUES (
    'Test product', 1, 1, 2018, 599
);

SELECT      *  FROM   product_audits;


DELETE FROM 
     products
WHERE 
    product_id = 5;


SELECT      *  FROM   product_audits;


Drop trigger trg_product_audit;













drop table if exists products;

CREATE TABLE products (
	product_id INT IDENTITY (1, 1) PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	brand_id INT NOT NULL,
	category_id INT NOT NULL,
	model_year SMALLINT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL);

INSERT INTO products
VALUES 
 	('Test product1', 1, 1, 2018, 599),
 	('Test product2', 2, 2, 2016, 699),
 	('Test product3', 3, 3, 2018, 799),
 	('Test product4', 4, 4, 2015, 899);


select * from products;





Begin
DECLARE 
    @product_name VARCHAR(MAX), 
    @list_price   DECIMAL;

DECLARE cursor_product CURSOR
FOR SELECT 
        product_name,   list_price
    FROM   products;

OPEN cursor_product;

FETCH NEXT FROM cursor_product INTO 
    @product_name,   @list_price;

WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT @product_name + ' has price ' +  CAST(@list_price AS varchar);
        FETCH NEXT FROM cursor_product INTO 
            @product_name,  @list_price;
    END;

CLOSE cursor_product;

DEALLOCATE cursor_product;
End










Cursors:
We use the SQL Server cursor to process a result set, one row at a time.
SQL works based on set e.g., SELECT statement returns a set of rows which is called a result set. However, sometimes, you may want to process a data set on a row by row basis. This is where cursors come into play.
What is a database cursor
A database cursor is an object that enables traversal over the rows of a result set. 
It allows you to process individual row returned by a query.




SQL Server cursor life cycle:
First, declare a cursor.
DECLARE cursor_name CURSOR
    FOR select_statement;
To declare a cursor, you specify its name after the DECLARE keyword with the CURSOR data type and provide a SELECT statement that defines the result set for the cursor.
Next, open and populate the cursor by executing the SELECT statement:
OPEN cursor_name;
Then, fetch a row from the cursor into one or more variables:
FETCH NEXT FROM cursor_name INTO variable_list;
SQL Server provides the @@FETCHSTATUS function that returns the status of the last cursor FETCH statement executed against the cursor; If @@FETCHSTATUS returns 0, meaning the FETCH statement was successful. You can use the WHILE statement to fetch all rows from the cursor as shown in the following code:
WHILE @@FETCH_STATUS = 0  
    BEGIN
        FETCH NEXT FROM cursor_name;  
    END;
After that, close the cursor:
CLOSE cursor_name;
Finally, deallocate the cursor:
DEALLOCATE cursor_name;





























CREATE or alter PROCEDURE SelectCustomerstabledata 
(@agemin Int, @agemax Int, @rownum int output)
AS 
Begin
    SELECT * FROM Customers where age between @agemin and @agemax;
     select @rownum= @@ROWCOUNT;
End

--Executing the procedure
Begin
DECLARE @count INT;

EXECUTE SelectCustomerstabledata 
    @agemax = 25, @agemin = 22,
    @rownum = @count OUTPUT;
--EXECUTE SelectCustomerstabledata 
--    22, 25, @count OUTPUT;

--SELECT @count AS 'Number of Customers found';
print 'Number of Customers found : ' + cast(@count as varchar);
End








CREATE or alter PROCEDURE SelectCustomerstabledata 
(@agemin AS Int = 18, @agemax AS Int)
AS 
Begin
SELECT * FROM Customers where age between @agemin and @agemax
End


EXECUTE SelectCustomerstabledata 
    @agemax = 25;

Exec SelectCustomerstabledata 25, 27 

Exec SelectCustomerstabledata default, 27 


EXECUTE SelectCustomerstabledata 
    @agemax = 27, 
    @agemin = 25;











CREATE or alter PROCEDURE SelectCustomerstabledata 
(@agemin AS Int, @agemax AS Int)
AS 
Begin
SELECT * FROM Customers where age between @agemin and @agemax
End
--Executing the procedure
Exec SelectCustomerstabledata 25, 27 

EXECUTE SelectCustomerstabledata 
    @agemax = 27, 
    @agemin = 25;








--Example to pass the table name as procedure parameter: 
CREATE or alter PROCEDURE SelectCustomerstabledata 
(@tblName as varchar(26))
AS 
Begin
    declare @sqlStmt nvarchar(MAX) --varchar(MAX)
    set @sqlStmt = 'SELECT * FROM ' + @tblName 
    exec sp_executesql @sqlStmt
    --exec @sqlStmt
End
--Executing:
Exec SelectCustomerstabledata 'Customers'


Begin
declare @var nvarchar(max);
set @var = 'select * from customers';
exec sp_executesql @var;
end;












--Example: 
CREATE or alter PROCEDURE SelectCustomerstabledata 
(@age AS Int)
AS 
Begin
SELECT * FROM Customers where age>@age
End
--Executing:
Exec SelectCustomerstabledata 25







drop table orders;
drop table customers;

CREATE TABLE CUSTOMERS(
   ID   INT              NOT NULL,
   NAME VARCHAR (20)     NOT NULL,
   AGE  INT              NOT NULL,
   ADDRESS  CHAR (25) ,
   SALARY   DECIMAL (18, 2),       
   PRIMARY KEY (ID)
);
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'MP', 4500.00 );

INSERT INTO CUSTOMERS VALUES (7, 'Muffy', 24, 'Indore', 10000.00 );


select * from customers;


CREATE or ALTER PROCEDURE SelectCustomerstabledata 
AS 
SELECT * FROM Customers


Exec SelectCustomerstabledata;

DROP PROC SelectCustomerstabledata;









Stored Procedures:
SQL Server stored procedures are used to group one or more Transact-SQL statements into logical units. 
The stored procedure are stored as named objects in the SQL Server Database Server.
When you call a stored procedure for the first time, SQL Server creates an execution plan and stores it in the cache. 
In the subsequent executions of the stored procedure, SQL Server reuses the plan so that the stored procedure can execute very fast with reliable performance.
The MS SQL Server Stored procedure is used to save time to write code again and again by storing the same in database and also get the required output by passing parameters.


























drop function dbo.fn2;
drop function if exists dbo.fn2;








CREATE FUNCTION udfProductInYear (
    @model_year INT
)
RETURNS TABLE
AS
RETURN
    SELECT 
        product_name,
        model_year,
        list_price
    FROM
         BikeStores.production.products
    WHERE
        model_year = @model_year;


select * from dbo.udfProductInYear(2016);














CREATE OR ALTER FUNCTION udfSplit(
    @string VARCHAR(MAX), 
    @delimiter VARCHAR(50) = ' ')
RETURNS @parts TABLE
(    
idx INT IDENTITY PRIMARY KEY,
val VARCHAR(MAX)   
)	AS
BEGIN
DECLARE @index INT = -1;
WHILE (LEN(@string) > 0) 
BEGIN 
    SET @index = CHARINDEX(@delimiter , @string)  ;
    IF (@index = 0) AND (LEN(@string) > 0)  
    BEGIN  
        INSERT INTO @parts  VALUES (@string);
        BREAK  
    END 
    IF (@index > 1)  
    BEGIN  
        INSERT INTO @parts VALUES (LEFT(@string, @index - 1));
		SET @string = RIGHT(@string, (LEN(@string) - @index));  
    END 
    ELSE
		SET @string = RIGHT(@string, (LEN(@string) - @index)); 
    END
RETURN
END




select * from dbo.udfSplit('The function ufnSplit() returns a table variable', ' ');

select * from dbo.udfSplit('The function ufnSplit() returns a table variable', default);

select * from dbo.udfSplit('The,function,ufnSplit(),returns,a,table,variable', ',');






















CREATE OR ALTER FUNCTION udfSplit(
    @string VARCHAR(MAX))
RETURNS @parts TABLE (    
idx INT IDENTITY PRIMARY KEY,
val VARCHAR(MAX)   
)  AS
BEGIN
   INSERT INTO @parts  VALUES (@string);
   RETURN
END


select * from dbo.udfSplit('str1');




Performance of table variables:
Using table variables in a stored procedure results in fewer recompilations than using a temporary table.
In addition, a table variable use fewer resources than a temporary table with less locking and logging overhead.
Similar to the temporary table, the table variables do live in the tempdb database, not in the memory.








BEGIN
DECLARE @product_table TABLE (
    product_name VARCHAR(MAX) NOT NULL,
    brand_id INT NOT NULL,
    list_price DEC(11,2) NOT NULL
);
INSERT INTO @product_table
     SELECT product_name, brand_id, list_price
         FROM BikeStores.production.products WHERE category_id = 1;

SELECT  p.product_name, p.brand_id, p.list_price FROM @product_table p join BikeStores.production.products
on p.list_price=BikeStores.production.products.list_price;
END




Restrictions on table variables:
First, you have to define the structure of the table variable during the declaration. Unlike a regular or temporary table, you cannot alter the structure of the table variables after they are declared.
Second, statistics help the query optimizer to come up with a good query’s execution plan. Unfortunately, table variables do not contain statistics. Therefore, you should use table variables to hold a small number of rows.
Third, you cannot use the table variable as an input or output parameter like other data types. However, you can return a table variable from a user-defined function
Fourth, you cannot create non-clustered indexes for table variables. However, starting with SQL Server 2014, memory-optimized table variables are available with the introduction of the new In-Memory OLTP that allows you to add non-clustered indexes as part of table variable’s declaration.
Fifth, if you are using a table variable with a join, you need to alias the table in order to execute the query.











BEGIN
DECLARE @product_table TABLE (
    product_name VARCHAR(MAX) NOT NULL,
    brand_id INT NOT NULL,
    list_price DEC(11,2) NOT NULL
);
INSERT INTO @product_table
     SELECT product_name, brand_id, list_price
         FROM BikeStores.production.products WHERE category_id = 1;

SELECT  * FROM @product_table;
END










The following are some key takeaway of the scalar functions:
	Scalar functions can be used almost anywhere in T-SQL statements.
	Scalar functions accept one or more parameters but return only one value, therefore, they must include a RETURN statement.
	Scalar functions can use logic such as IF blocks or WHILE loops.
	Scalar functions cannot update data. They can access data but this is not a good practice.
	Scalar functions can call other functions.








DROP FUNCTION dbo.fn2;






create or Alter FUNCTION fn2(
    @number INT
)
RETURNS INT
AS 
BEGIN
	DECLARE @x INT = @number;
	DECLARE @sm INT = 1;
	WHILE @x > 0
	BEGIN
	       set @sm = @x * @sm;
	       set @x = @x - 1;
	END
    RETURN @sm;
END;

Select dbo.fn2(5);











Alter FUNCTION fn(
    @number INT
)
RETURNS INT
AS 
BEGIN
	DECLARE @x INT = @number;
	DECLARE @sm INT = 1;
	WHILE @x > 0
	BEGIN
	       set @sm = @x * @sm;
	       set @x = @x - 1;
	END
    RETURN @sm;
END;

Select dbo.fn(5);










CREATE FUNCTION fn(
    @number INT
)
RETURNS INT
AS 
BEGIN
	DECLARE @x INT = @number;
	DECLARE @sm INT = 0;
	WHILE @x > 0
	BEGIN
	       set @sm = @x + @sm;
	       set @x = @x - 1;
	END
    RETURN @sm;
END;

Select dbo.fn(5);







CREATE FUNCTION udfNetSale(
    @quantity INT,
    @list_price DEC(10,2),
    @discount DEC(4,2)
)
RETURNS DEC(10,2)
AS 
BEGIN
    RETURN @quantity * @list_price * (1 - @discount);
END;



SELECT dbo.udfNetSale(10,100,0.1) as net_sale;  --900

SELECT testdb.dbo.udfNetSale(10,list_price,0.1) as net_sale from bikestores.production.products;








Check if the products table have total even number of records or odd number of records.
Print wise messages accordingly.







BEGIN
    DECLARE @name VARCHAR(MAX);

    SELECT TOP 1  @name = product_name
    FROM   bikeStores.production.products
    ORDER BY list_price DESC;
	
    IF @@ROWCOUNT <> 0
    BEGIN
        PRINT 'The most expensive product is ' + @name
    END
    ELSE
    BEGIN
        PRINT 'No product found';
    END;
END
--The most expensive product is Trek Domane SLR 9 Disc - 2018





BEGIN
    SELECT product_id, product_name
    FROM bikestores.production.products  WHERE list_price > 1000000;

    IF @@ROWCOUNT = 0
            PRINT 'No product with price greater than 100000 found';
    Else
	  Print 'Product with the given price range found';
END

--Output : No product..










Begin
	DECLARE @counter INT = 0;
	WHILE @counter <= 5
	BEGIN
		SET @counter = @counter + 1;
		IF @counter = 4
			BREAK;
		PRINT @counter;
	END
End
--1 2 3 

Begin
	DECLARE @counter INT = 0;

	WHILE @counter < 5
	BEGIN
		SET @counter = @counter + 1;
		IF @counter = 3
			CONTINUE;
		PRINT @counter;
	END
End

--1 2 4 5 





Begin
	DECLARE @counter INT = 1;
	WHILE @counter <= 5
	BEGIN
		PRINT @counter;
		SET @counter = @counter + 1;
	END
End
--1 2 3 4 5 





if (5>6)
	Begin
		print '5 is greater'
		print 'End of if'
	end
Else
	Begin
		print '5 is smaller'
		print 'End of else'
	end









if (5>3)
  print '5 is greater'

if (5>3)
Begin
   print '5 is greater'
   print 'End of if'
end






SELECT COUNT(*) FROM customers;
SELECT MIN(Salary) FROM customers;
SELECT MAX(Salary) FROM customers;
SELECT AVG(Salary) FROM customers;
SELECT SUM(Salary) FROM customers;
Select SQRT(16);  
SELECT RAND()*(10-5)+5;  --Random between 5 and 10; includes decimal
SELECT CAST(RAND()*(10-5)+5 as int); --only int output
Select Rand(1); --will generate the same number as it will be generated only once for the seed value given. 
SELECT CONCAT('FIRST ', 'SECOND');
SELECT FLOOR(7.55);  --7.0
select ceiling(5.3); --6
--SELECT FORMAT(423423234.65434453,2);  -- 423,423,234.65
SELECT 29 % 3;  --2
SELECT POWER(2,3);  --8
SELECT PI(); -- 3.141593
--SELECT TRUNCATE(7.536432,2);  --  7.53
SELECT CURRENT_USER;  --Monica
SELECT ISNUMERIC('4567');  --1
SELECT CONVERT(int, 25.65); --25
select soundex('bat'),soundex('What'); --4 char set telling the sound 
--bat : B300, What : w300
select difference('Bat','Ball'); 
--the more similar to sound, the better numerical value between (0-4): 
--The number of char same in soundex
select difference('Wall','Ball');
select difference('Bat','what');
SELECT ASCII('A');  -- 65
SELECT CHAR(65); -- A
SELECT LOWER('STR'); --str
SELECT UPPER('Str');  --STR
SELECT LEN('text');  -- 4
SELECT LEFT('SQL Session', 3); --SQL  
SELECT RIGHT('SQL Session', 3); --ion
SELECT REVERSE('SQL Tutorial');  --lairotuT LQS
SELECT TRIM('     SQL Tutorial!     ')  --SQL Tutorial!
SELECT RTRIM('     SQL Tutorial!     ')  -- '     SQL Tutorial!'
SELECT LTRIM('     SQL Tutorial!     ')  -- 'SQL Tutorial!     '
SELECT STR(185);  --’185’
SELECT STUFF('SQL Tutorial', 1, 3, 'C#');  --C# Tutorial
SELECT SUBSTRING('SQL Tutorial', 1, 3) --SQL
SELECT TRANSLATE('3*[2+1]/{8-4}', '[]{}', '()()');  -- 3*(2+1)/(8-4)
SELECT TRANSLATE('Hello World', 'ol', 'ab');  -- Hebba Warbd
SELECT CURRENT_TIMESTAMP; --2023-09-01 10:40:50.923
SELECT GETDATE(); --2020-11-01 10:41:40.830
SELECT Concat(DAY(GETDATE()), '-', MONTH(GETDATE()), '-', YEAR(GETDATE())); --1-11-2020
SELECT IIF(500<1000, 'YES', 'NO'); --YES
SELECT NULLIF(25, 25);  --Returns NULL since equal
SELECT NULLIF(25, 66);  --Returns 25  since not equal
select COALESCE((null),(null),(2),(6),(null),(100)); --2
select isnull(null,'Null value'); -- Null value
select isnull(6,'Null value'); --6




















SELECT * FROM CUSTOMERS WHERE SALARY > 5000;
SELECT * FROM CUSTOMERS WHERE SALARY = 2000;
SELECT * FROM CUSTOMERS WHERE SALARY != 2000;
SELECT * FROM CUSTOMERS WHERE SALARY <> 2000;
SELECT * FROM CUSTOMERS WHERE SALARY >= 6500;
SELECT * FROM CUSTOMERS WHERE AGE >= 25 AND SALARY >= 6500;
SELECT * FROM CUSTOMERS WHERE AGE >= 25 OR SALARY >= 6500;
SELECT * FROM CUSTOMERS WHERE AGE IS NOT NULL;
SELECT * FROM CUSTOMERS WHERE NAME LIKE 'Ko%';
SELECT * FROM CUSTOMERS WHERE AGE IN ( 25, 27 );
SELECT * FROM CUSTOMERS WHERE AGE BETWEEN 25 AND 27;
SELECT AGE FROM CUSTOMERS WHERE EXISTS (SELECT AGE FROM CUSTOMERS WHERE SALARY > 6500);
SELECT * FROM CUSTOMERS WHERE AGE > ALL (SELECT AGE FROM CUSTOMERS WHERE SALARY > 6500);
SELECT * FROM CUSTOMERS WHERE AGE > ANY (SELECT AGE FROM CUSTOMERS WHERE SALARY > 6500);


select name, age from customers where age > any(select age from CUSTOMERS_Bkp2);
select name, age from customers where age > all(select age from CUSTOMERS_Bkp2);
select name, age from customers where exists (select age from CUSTOMERS_Bkp2 where age > 2);
select name, age from customers where exists (select age from CUSTOMERS_Bkp2 where age > 27);
select name, age from customers where not exists (select age from CUSTOMERS_Bkp2 where age > 27);














select @@CONNECTIONS as 'Number of Login Attempts';
SELECT * From  Employee_Details
if(@@ERROR <> 0)
   print 'Error Found'
else
   print 'Error not Found'
Select @@IDENTITY as identityvalue;
select @@IDLE as 'idle milliseconds Time'
select @@CPU_BUSY  as 'Busy milliseconds Time'
SELECT @@LANGUAGE as 'Language'
SELECT * FROM Employee_Details
SELECT @@rowcount as 'Count Number of Rows affected'
Select @@SERVICENAME as 'ServiceName'
SELECT  @@Total_ERRORS  as 'number of disk read-write errors'
SELECT  @@VERSION  as 'SQL Server Version'
SELECT  @@SERVERNAME  as 'Server Name'













@@CONNECTIONS 
This variable returns the number of login attempts since SQL Server was last started. It returns an integer value.
@@IDLE
This variable returns the number of milliseconds SQL Server has been idle since it was last started.
@@CPU_BUSY
This system function returns the number of milliseconds the CPU has spent working since SQL Server was last started. It returns an integer value.
@@LANGUAGE
This system function returns the name of the language that is currently used by the SQL Server.
@@SERVERNAME 
This variable returns the name of the service under which SQL Server is running.
@@VERSION  
This variable returns the current version of the SQL Server Software.
@@SERVERNAME
This function retrieves the name of the database server the application is linked to.






@@CONNECTIONS 
This variable returns the number of login attempts since SQL Server was last started. It returns an integer value.
@@ERROR 
The error number for the last T-SQL statement executed. If this value is zero than there were no errors otherwise it returns the error.  
@@IDENTITY
@@IDENTITY will return the last identity value entered into a table. 
@@IDLE
This variable returns the number of milliseconds SQL Server has been idle since it was last started.
@@CPU_BUSY
This system function returns the number of milliseconds the CPU has spent working since SQL Server was last started. It returns an integer value.
@@LANGUAGE
This system function returns the name of the language that is currently used by the SQL Server.
@@ROWCOUNT
This variable returns the number of rows affected by the last Transact-SQL statement.  
@@SERVERNAME 
This variable returns the name of the service under which SQL Server is running.
@@TOTAL_ERRORS
The @@TOTAL_ERRORS function returns the number of disk read/write errors encountered by SQL Server since it was last started. It returns an integer value.
@@VERSION  
This variable returns the current version of the SQL Server Software.
@@SERVERNAME
This function retrieves the name of the database server the application is linked to.








In testdb database, customers table: print what will be the salary of Kaushik if he gets a 15% hike in his current salary.
Use batch programming and a numerical variable for calculations:
Output:
With salary hike, Kaushik now gets : (new salary)

Declare a var. 
Set it to current salary of kaushik
Set it to 15 % hike
Print it with proper message








Begin
DECLARE 
    @product_name VARCHAR(MAX),
    @list_price DECIMAL(10,2);

SELECT 
    @product_name = product_name,
    @list_price = list_price
FROM
    bikestores.production.products
WHERE
    product_id = 1;

SELECT 
    @product_name AS product_name, 
    @list_price AS list_price;
End









Begin
 	SET NOCOUNT ON; 
	DECLARE @product_count INT;
	SET @product_count = (
           SELECT COUNT(*) FROM productsNew);
	--Print @product_count;
 	--PRINT 'The number of products is ' + CAST(@product_count AS VARCHAR(MAX));
 	SELECT @product_count;
End








Begin
	DECLARE @model_year SMALLINT;
	SET @model_year = 2018;
	SELECT
		product_name, model_year, list_price 
	FROM productsNew
	WHERE 
		model_year = @model_year
	ORDER BY product_name;
End





CREATE TABLE productsNew (
	product_id INT IDENTITY (1, 1) PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	brand_id INT NOT NULL,
	category_id INT NOT NULL,
	model_year SMALLINT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL);



INSERT INTO productsNew
VALUES 
 	('Test product1', 1, 1, 2018, 599),
 	('Test product2', 2, 2, 2016, 699),
 	('Test product3', 3, 3, 2018, 799),
 	('Test product4', 4, 4, 2015, 899);
