using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Name
    {
        public string name;
        public Name(string nm) { this.name = nm; }
        public override int GetHashCode()
        {
            return (name.ToCharArray())[0];
        }
        public override bool Equals(object obj)
        {
            Name s = (Name)obj;
            return name.Equals(s.name);
        }
        public override string ToString()
        {
            return name;
        }
    }

    
    class Program
    {
        static void Main(string[] args)
        {

            LinkedList<string> strs = new LinkedList<string>();
            strs.AddFirst("A");
            strs.AddFirst("C");
            strs.AddLast("D");
            foreach (string s in strs)
            {
                Console.WriteLine(s);//C A D
            }
           

        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine("\n"+s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}













Create a dictionary that can hold words and multiple meanings. Provide search facility and 
display the words and their meanings (in sorted order, as in dictionary).

Dictionary<string,List<string>>

Input a word, get all the list elements as value for the word.


Eg: bat -> (a toy), (A cricket bat isÂ a specialised piece of equipment used by 
batters in the sport of cricket to hit the ball), (An animal - A flying mammal)

Eg book -> 
Eg Software ->
Eg Git -> 
Eg watch ->








using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Name
    {
        public string name;
        public Name(string nm) { this.name = nm; }
        public override int GetHashCode()
        {
            return (name.ToCharArray())[0];
        }
        public override bool Equals(object obj)
        {
            Name s = (Name)obj;
            return name.Equals(s.name);
        }
        public override string ToString()
        {
            return name;
        }
    }

    
    class Program
    {
        static void Main(string[] args)
        {
            SortedList<int,string> My_dict1 = new SortedList<int, string>();
            My_dict1.Add(1223, "Welcome");
            My_dict1.Add(1124, "to");
            My_dict1.Add(1123, "C# programming");
            foreach (KeyValuePair<int, string> ele1 in My_dict1)
            {
                Console.WriteLine("{0} and {1}", ele1.Key, ele1.Value);
            }
            Console.WriteLine();
            Dictionary<string, string> My_dict2 = new Dictionary<string, string>(){
                                {"a.1", "Dog"}, {"a.2", "Cat"}, {"a.3", "Rat"} };
            foreach (KeyValuePair<string, string> ele2 in My_dict2)
            {
                Console.WriteLine("{0} and {1}", ele2.Key, ele2.Value);
            }

        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine("\n"+s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}













using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Name
    {
        public string name;
        public Name(string nm) { this.name = nm; }
        public override int GetHashCode()
        {
            return (name.ToCharArray())[0];
        }
        public override bool Equals(object obj)
        {
            Name s = (Name)obj;
            return name.Equals(s.name);
        }
        public override string ToString()
        {
            return name;
        }
    }

    
    class Program
    {
        static void Main(string[] args)
        {
            Dictionary<int, string> My_dict1 = new Dictionary<int, string>();
            My_dict1.Add(1123, "Welcome");
            My_dict1.Add(1124, "to");
            My_dict1.Add(1125, "C# programming");
            foreach (KeyValuePair<int, string> ele1 in My_dict1)
            {
                Console.WriteLine("{0} and {1}", ele1.Key, ele1.Value);
            }
            Console.WriteLine();
            Dictionary<string, string> My_dict2 = new Dictionary<string, string>(){
                                {"a.1", "Dog"}, {"a.2", "Cat"}, {"a.3", "Rat"} };
            foreach (KeyValuePair<string, string> ele2 in My_dict2)
            {
                Console.WriteLine("{0} and {1}", ele2.Key, ele2.Value);
            }

        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine("\n"+s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}











Prepare a hashtable with the Emp class, making the id (int) 
of the emp as the key and the emp object its value.

At least 5 records should be entered.

Enter a key (user input) and search for the emp object according to the key in the hashtable.
Emp(id, name, sal)











using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Name
    {
        public string name;
        public Name(string nm) { this.name = nm; }
        public override int GetHashCode()
        {
            return (name.ToCharArray())[0];
        }
        public override bool Equals(object obj)
        {
            Name s = (Name)obj;
            return name.Equals(s.name);
        }
        public override string ToString()
        {
            return name;
        }
    }

    
    class Program
    {
        static void Main(string[] args)
        {
            Hashtable nlist = new Hashtable();
            nlist.Add(new Name("Trisha"), "V");
            nlist.Add(new Name("Nisha"), "VI");
            nlist.Add(new Name("Nimisha"), "X");
            nlist.Add(new Name("Varsha"), "IV");
            nlist.Add(new Name("Treena"), "II");
            //nlist.Add(new Name("Nimisha"), "XI");
            Console.WriteLine(nlist[new Name("Nimisha")]);
            Console.WriteLine("\nforeach via DictionaryEntry(Key,Value):");
            foreach(DictionaryEntry d in nlist)
            {
                Console.WriteLine(d.Key + " has the value as : " + d.Value);
            }
            Console.WriteLine("\nforeach via Set of Keys:");

            foreach (Name l in nlist.Keys)
            {
                Console.WriteLine(l + " has the value as : " + nlist[l]);
            }
            Console.WriteLine("\nforeach via Collection of Values:");
            foreach (string l in nlist.Values)
            {
                Console.WriteLine(l + " is the value");
            }


        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine("\n"+s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}





















using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp : IComparable<Emp>
    {
        public int id { get; set; }
        public string name { get; set; }
        public int sal { get; set; }

        public Emp() { }
        public Emp(int id, string name, int sal)
        {
            this.id = id;
            this.name = name;
            this.sal = sal;
        }

        public int CompareTo(Emp other)
        {
            return this.sal == other.sal? this.id - other.id : this.sal - other.sal;
        }

        public override string ToString()
        {
            return "Emp: Id: " +id + " Name : " + name + " Salary : " + sal;
        }

    }

    class NameComparer : IComparer<Emp>
    {
        public int Compare(Emp x, Emp y)
        {
            return x.name.CompareTo(y.name);
        }
    }
    class IdComparer : IComparer<Emp>
    {
        public int Compare(Emp x, Emp y)
        {
            return x.id - y.id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Emp> emps = new List<Emp>() { 
                new Emp(101,"A1",100000),
                new Emp(105,"C1",100000),
                new Emp(103,"E1",200000),
                new Emp(104,"B1",10000),
                new Emp(102,"D1",177000),
            };
            print("The Original List: ", emps);
            emps.Sort();
            print("The Default Sorted List (Salary) : ", emps);
            emps.Sort(new NameComparer());
            print("The Sorted List (Name) : ", emps);
            emps.Sort(new IdComparer());
            print("The Sorted List (Id) : ", emps);
        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine("\n"+s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}



/*
 
The Original List:
Emp: Id: 101 Name : A1 Salary : 100000
Emp: Id: 105 Name : C1 Salary : 100000
Emp: Id: 103 Name : E1 Salary : 200000
Emp: Id: 104 Name : B1 Salary : 10000
Emp: Id: 102 Name : D1 Salary : 177000

The Default Sorted List (Salary) :
Emp: Id: 104 Name : B1 Salary : 10000
Emp: Id: 101 Name : A1 Salary : 100000
Emp: Id: 105 Name : C1 Salary : 100000
Emp: Id: 102 Name : D1 Salary : 177000
Emp: Id: 103 Name : E1 Salary : 200000

The Sorted List (Name) :
Emp: Id: 101 Name : A1 Salary : 100000
Emp: Id: 104 Name : B1 Salary : 10000
Emp: Id: 105 Name : C1 Salary : 100000
Emp: Id: 102 Name : D1 Salary : 177000
Emp: Id: 103 Name : E1 Salary : 200000

The Sorted List (Id) :
Emp: Id: 101 Name : A1 Salary : 100000
Emp: Id: 102 Name : D1 Salary : 177000
Emp: Id: 103 Name : E1 Salary : 200000
Emp: Id: 104 Name : B1 Salary : 10000
Emp: Id: 105 Name : C1 Salary : 100000
*/









Given two lists of employees. Merge the two lists into one without duplicates.
Hint: Use Set







Employee details name and designation is entered by the user in random order. 
It is desired to maintain a list  such that all the employees with the same designation 
must be kept together. Also, the list must have Program Managers first, then 
Project Manager, Team  Lead, Senior Programmer and Junior Programmer in that order. 
Display the list after all entry is done.


Employee{ }, 
DesignationLists{ List<Employee>: PM, PrjM, TL, ..}
Input(DesignationLists d)
Input Emp value -> if designation is PM, put the Employee in the PM list
Main()
DesignationLists d, Employee e. 
Menu : 1. Add Emp: e.Input(d)
Display(d)









using System;
using System.Collections.Generic;
public class StackExample {
    public static void Main(string[] args)    {
        Queue<string> names = new Queue<string>();  //push and pop 
        names.Enqueue("Eric");  //push adds elements
        names.Enqueue("Boo");
        names.Enqueue("Alain");
        names.Enqueue("Jeff");
        foreach (string name in names)        
            Console.WriteLine(name);         
        //Peek returns the First element entered without deleting it
        //Dequeue returns the First element entered after deleting it
        Console.WriteLine("Peek First element: " + names.Peek());  //Eric
        Console.WriteLine("Dequeing First Element: " + names.Dequeue());     //Eric
        Console.WriteLine("After Dequeing, Peek First element: " + names.Peek());   //Boo
        foreach (string name in names)         
            Console.WriteLine(name);        
        Console.ReadLine();
    }
}








using System;
using System.Collections.Generic;
public class StackExample {
    public static void Main(string[] args)
    {
        Stack<string> names = new Stack<string>();  //push and pop 
        names.Push("Eric");  //push adds elements
        names.Push("Boo");
        names.Push("Alain");
        names.Push("Jeff");
        foreach (string name in names)    {
            Console.WriteLine(name);
        }
        //Peek returns the last element entered without deleting it
        //Pop returns the last element entered after deleting it
        Console.WriteLine("Peek Last element: " + names.Peek());  //Jeff
        Console.WriteLine("Pop Last Element: " + names.Pop());     //Jeff
        Console.WriteLine("After Pop, Peek Last element: " + names.Peek());   //Alain
        Console.ReadLine();
    }	}











using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Abc
    {
        public override int GetHashCode()
        {
            return 10;
        }
        public override bool Equals(object obj)
        {
            return true;
        }

    }
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
        public override bool Equals(object obj)
        {
            Emp e = (Emp)obj;
            return this.name == e.name && this.id == e.id;
        }
        public override int GetHashCode()
        {
            return this.id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            SortedSet<string> l1 = new SortedSet<string>() { "AX", "P", "AXMA", "C", "AXMA", "AXMB" ,"B", "a"};
            print("HashSet of string values: ", l1);
            //HashSet<Emp> l2 = new HashSet<Emp>() {
            //    new Emp("A",101),
            //    new Emp("B",102),
            //    new Emp("A",101),
            //    new Emp("C",103)
            //};
            //print("HashSet of Emp values: ", l2);
            Console.WriteLine();

            //Abc abc= new Abc();
            //Abc abc2 = new Abc();
            //Console.WriteLine(abc); // abc.ToString() return the Object class name: Prj1Day19Col.Emp
            //Console.WriteLine(abc2);
            //Console.WriteLine(abc.GetHashCode());
            //Console.WriteLine(abc2.GetHashCode());
            //Console.WriteLine(abc.Equals(abc2));

        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine(s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}




















Natural Ordering : 
Numerical : Int16, Int32, Double, Float, Byte, â¦ : Ascending Order
string : lexicographical ordering: dictionary type
File paths: lexicographical ordering : according to path variation from the current location
Location : lexicographical ordering of latitude and longitude
Date and time: Chronological ordering : past comes before the future







using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Abc
    {
        public override int GetHashCode()
        {
            return 10;
        }
        public override bool Equals(object obj)
        {
            return true;
        }

    }
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
        public override bool Equals(object obj)
        {
            Emp e = (Emp)obj;
            return this.name == e.name && this.id == e.id;
        }
        public override int GetHashCode()
        {
            return this.id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            HashSet<string> l1 = new HashSet<string>() { "A", "B", "A", "C" };
            print("HashSet of string values: ", l1);
            HashSet<Emp> l2 = new HashSet<Emp>() {
                new Emp("A",101),
                new Emp("B",102),
                new Emp("A",101),
                new Emp("C",103)
            };
            print("HashSet of Emp values: ", l2);
            Console.WriteLine();

            //Abc abc= new Abc();
            //Abc abc2 = new Abc();
            //Console.WriteLine(abc); // abc.ToString() return the Object class name: Prj1Day19Col.Emp
            //Console.WriteLine(abc2);
            //Console.WriteLine(abc.GetHashCode());
            //Console.WriteLine(abc2.GetHashCode());
            //Console.WriteLine(abc.Equals(abc2));

        }

        public static void print(string s,IEnumerable e)
        {
            Console.WriteLine(s);
            foreach(object o in e)
            {
                Console.WriteLine(o);
            }
        }

    }
}









using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
        public override bool Equals(object obj)
        {
            Emp e = (Emp)obj;
            return this.name == e.name && this.id==e.id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Emp> l2 = new List<Emp>(){
                new Emp("John",101),
                new Emp("Doe", 102) 
            };
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            l2.Add(new Emp("Abc", 103));
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }
            l2.Remove(new Emp("Abc", 103));
            Console.WriteLine("\n\nPost removal: ");
            foreach (Emp s in l2)
            {
                Console.WriteLine(s);
            }
            Console.WriteLine();
        }

    }
}











using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Emp> l2 = new List<Emp>(){
                new Emp("John",101),
                new Emp("Doe", 102) 
            };
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            l2.Add(new Emp("Abc", 103));
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}










using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            //ArrayList l1=new ArrayList();
            //l1.Add("John");
            //l1.Add("Doe");
            //l1.Add(45);
            //foreach(string  o in l1)
            //{
            //    Console.WriteLine(o);
            //}
             
            List<Emp> l2 = new List<Emp>();
            l2.Add(new Emp("John",101));
            l2.Add(new Emp("Doe", 102));
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}












using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {
            //ArrayList l1=new ArrayList();
            //l1.Add("John");
            //l1.Add("Doe");
            //l1.Add(45);
            //foreach(string  o in l1)
            //{
            //    Console.WriteLine(o);
            //}

            List<string> l2 = new List<string>();
            l2.Add("John");
            l2.Add("Doe");
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            foreach(string s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}











using System;
using System.Collections;

namespace Prj1Day19Col
{
    class Message<T>
    {
        //int x;
        public T usrMsg { get; set;}

        public Message() { }
        public Message(T msg) { usrMsg = msg; }
        public override string ToString()
        {
            return usrMsg.ToString();
        }
    }
    class Images
    {
        public int Size;
        public Images() { }
        public Images(int si) { Size = si; }
        public override string ToString()
        {
            return "This is an Image of size : " + Size;
        }
    }
    class Vdo
    {
        public Vdo() { }
        public Vdo(string q) { quality = q; }
        public string quality { get; set; }
        public override string ToString()
        {
            return "This is a Video file sent with quality : "+ quality;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Message<Images> slidesnapshot = new Message<Images>();
            slidesnapshot.usrMsg = new Images(1000);
            Console.WriteLine(slidesnapshot);
            Message<Vdo> CSharpTutorial = new Message<Vdo>();
            CSharpTutorial.usrMsg = new Vdo("HDD");
            Console.WriteLine(CSharpTutorial);
            Message<string> msg = new Message<string>();
            msg.usrMsg = "This is a msg in group";
            Console.WriteLine(msg);


        }
   
    }
}









using System;
using System.Collections;

namespace Prj1Day19Col
{
    class emp
    {
        string name;
        int id;

        public emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return name;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            ArrayList list = new ArrayList();
            emp e = new emp("Nisha", 101);
            list.Add("Shriya"); list.Add("Soham"); list.Add("Sujan"); 
            list.Add("Sagar"); list.Add("Shirisha"); list.Add("Arkabrata"); 
            list.Add("Jitendra"); list.Add("Tejas"); list.Add("Trapti");
            list.Add(e); list.Add("Rishita"); list.Add("Krishna");
            list.Add("Abir"); list.Add("Debanjan"); list.Add("Debjani");
            list.Add("Divyani"); list.Add("Amisha");
            Console.WriteLine("Count:{0}", list.Count);
            Console.WriteLine("Capacity:{0}", list.Capacity);
            PrintValues("\nArray list Values:", list);
            Console.WriteLine("\nGetting element's index position:" + list.IndexOf(new emp("Nisha", 101)));
            Console.WriteLine("\nGetting element's last index position:" + list.LastIndexOf("Arkabrata"));
            //list.Sort();
            //PrintValues("\n\nSorted Values:", list);
            
            Console.WriteLine();
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                //string str = (string)obj;
                Console.Write(obj + "\t");
            }
        }
    }
}










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            ArrayList list = new ArrayList();
            list.Add("Shriya"); list.Add("Soham"); list.Add("Sujan"); 
            list.Add("Sagar"); list.Add("Shirisha"); list.Add("Arkabrata"); 
            list.Add("Jitendra"); list.Add("Tejas"); list.Add("Trapti");
            list.Add("Arkabrata"); list.Add("Rishita"); list.Add("Krishna");
            list.Add("Abir"); list.Add("Debanjan"); list.Add("Debjani");
            list.Add("Divyani"); list.Add("Amisha");
            Console.WriteLine("Count:{0}", list.Count);
            Console.WriteLine("Capacity:{0}", list.Capacity);
            PrintValues("\nArray list Values:", list);
            Console.WriteLine("Getting element's index position:" + list.IndexOf("Arkabrata"));
            Console.WriteLine("Getting element's last index position:" + list.LastIndexOf("Arkabrata"));
            list.Sort();
            PrintValues("\n\nSorted Values:", list);
            
            Console.WriteLine();
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}











Implement a railway ticket counter scenario where there are two queues- one general and one for senior citizen.
Tickets are issued such that for every one person in senior citizen queue, two persons in general queue are processed.
Write a program that takes input for 10 people who come at various points and print the list of people in the order of their processing sequence.
Person : Name, age : Input
Eg: Person1, Person4, Person5, Person6 -> SQ ; Remaining Person ->GQ
Start Processing
Process both queues completely
Take care of all the elements in both the queues being dequed.
If any queue is bigger, first take the approach, once one queue is emptied, dequeue the second queue without wait.











using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Queue myQueue = new Queue();
            myQueue.Enqueue("one");
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            myQueue.Enqueue("two");
            myQueue.Enqueue("three");
            myQueue.Enqueue("four");
            myQueue.Enqueue("five");
            myQueue.Enqueue("six");
            PrintValues("The Queue now is: ", myQueue);
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            Console.WriteLine("Element at first is : " + myQueue.Peek());
            Console.WriteLine("Element entered first that is removed from the Queue is : " + myQueue.Dequeue());
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            PrintValues("The Queue after dequeue is: ", myQueue);
            Object[] arr = myQueue.ToArray();
            foreach (Object obj in arr)
                Console.WriteLine(obj);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}









Exercise:
String s = âusing System;
using System.Collections;
class BitArrayExample {
	public static void Main()	{
		BitArray myBitArr = new BitArray(5);
		myBitArr[0] = true;
		myBitArr[1] = true;
		myBitArr[2] = false;
		myBitArr[3] = true;
		myBitArr[4] = false;

		// To get the value of index at index 2
		Console.WriteLine(myBitArr.Get(2));

		// To get the value of index at index 3
		Console.WriteLine(myBitArr.Get(3));
	}
}â

Prepare 8 stack:
CBS : {
CBE : }
SBS : [
SBE : ]
PS : (
PE : )
ABS : <
ABE : >


Push the elements from s accordingly.
Check the length of each pair: Like: 
CBS.Length should be equal to CBE.Length

If the length are unequal, output:
	Compilation Error: Brackets mismatch
Else if length pairs match:
	Compiled successfully








using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Stack myStack = new Stack();
            myStack.Push("1st Element");
            myStack.Push("2nd Element");
            myStack.Push("3rd Element");
            myStack.Push("4th Element");
            myStack.Push("5th Element");
            myStack.Push("6th Element");
            PrintValues("\nStack : ", myStack);
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top is : " + myStack.Peek());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top that is removed from the Stack is : " + myStack.Pop());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            PrintValues("\nStack before clear all: ", myStack);
            myStack.Clear();
            PrintValues("\nStack post clear all: ", myStack);
            Console.Write("Total number of elements in the Stack now are : ");
            Console.WriteLine(myStack.Count);

        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(new byte[] { 0, 0, 1 , 0, 1});
            //0 -> 8 bit -> 0 -> 0000 0000, 1 -> 1000 0000 ; result of 1 is true, and 0 is false
            //length -> 5*8 = 40 : Index : 0 - 39
            // Checking if the BitArray is read-only
            //Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine("\nCount: " + myBitArr.Count);
            Console.WriteLine("\nLength: " + myBitArr.Length);
            // To get the value of index at index 2
            //Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            //myBitArr.SetAll(false);
            //PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { true, false, true, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            myBitArr.SetAll(false);
            PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}






using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr1 = new BitArray(4);
            BitArray myBitArr2 = new BitArray(4);
            myBitArr1[0] = false;
            myBitArr1[1] = false;
            myBitArr1[2] = true;
            myBitArr1[3] = true;
            myBitArr2[0] = false;
            myBitArr2[2] = false;
            myBitArr2[1] = true;
            myBitArr2[3] = true;
            PrintValues("\n\nBA1 : ", myBitArr1);
            PrintValues("\n\nBA2 : ", myBitArr2);
            PrintValues("\n\nOr : BA1.Or(BA2) : ", myBitArr1.Or(myBitArr2));
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}





using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { false, false, false, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA: ", myBitArr);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{
    
    class Program { 
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(5);
            myBitArr[0] = true;
            myBitArr[1] = true;
            myBitArr[2] = false;
            myBitArr[3] = true;
            myBitArr[4] = false;

            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));

            // To get the value of index at index 3
            Console.WriteLine(myBitArr.Get(3));

        }

    }
}
