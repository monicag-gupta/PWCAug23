Implement a railway ticket counter scenario where there are two queues- one general and one for senior citizen.
Tickets are issued such that for every one person in senior citizen queue, two persons in general queue are processed.
Write a program that takes input for 10 people who come at various points and print the list of people in the order of their processing sequence.
Person : Name, age : Input
Eg: Person1, Person4, Person5, Person6 -> SQ ; Remaining Person ->GQ
Start Processing
Process both queues completely










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Queue myQueue = new Queue();
            myQueue.Enqueue("one");
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            myQueue.Enqueue("two");
            myQueue.Enqueue("three");
            myQueue.Enqueue("four");
            myQueue.Enqueue("five");
            myQueue.Enqueue("six");
            PrintValues("The Queue now is: ", myQueue);
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            Console.WriteLine("Element at first is : " + myQueue.Peek());
            Console.WriteLine("Element entered first that is removed from the Queue is : " + myQueue.Dequeue());
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            PrintValues("The Queue after dequeue is: ", myQueue);
            Object[] arr = myQueue.ToArray();
            foreach (Object obj in arr)
                Console.WriteLine(obj);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}









Exercise:
String s = “using System;
using System.Collections;
class BitArrayExample {
	public static void Main()	{
		BitArray myBitArr = new BitArray(5);
		myBitArr[0] = true;
		myBitArr[1] = true;
		myBitArr[2] = false;
		myBitArr[3] = true;
		myBitArr[4] = false;

		// To get the value of index at index 2
		Console.WriteLine(myBitArr.Get(2));

		// To get the value of index at index 3
		Console.WriteLine(myBitArr.Get(3));
	}
}”

Prepare 8 stack:
CBS : {
CBE : }
SBS : [
SBE : ]
PS : (
PE : )
ABS : <
ABE : >


Push the elements from s accordingly.
Check the length of each pair: Like: 
CBS.Length should be equal to CBE.Length

If the length are unequal, output:
	Compilation Error: Brackets mismatch
Else if length pairs match:
	Compiled successfully








using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Stack myStack = new Stack();
            myStack.Push("1st Element");
            myStack.Push("2nd Element");
            myStack.Push("3rd Element");
            myStack.Push("4th Element");
            myStack.Push("5th Element");
            myStack.Push("6th Element");
            PrintValues("\nStack : ", myStack);
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top is : " + myStack.Peek());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top that is removed from the Stack is : " + myStack.Pop());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            PrintValues("\nStack before clear all: ", myStack);
            myStack.Clear();
            PrintValues("\nStack post clear all: ", myStack);
            Console.Write("Total number of elements in the Stack now are : ");
            Console.WriteLine(myStack.Count);

        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(new byte[] { 0, 0, 1 , 0, 1});
            //0 -> 8 bit -> 0 -> 0000 0000, 1 -> 1000 0000 ; result of 1 is true, and 0 is false
            //length -> 5*8 = 40 : Index : 0 - 39
            // Checking if the BitArray is read-only
            //Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine("\nCount: " + myBitArr.Count);
            Console.WriteLine("\nLength: " + myBitArr.Length);
            // To get the value of index at index 2
            //Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            //myBitArr.SetAll(false);
            //PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { true, false, true, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            myBitArr.SetAll(false);
            PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}






using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr1 = new BitArray(4);
            BitArray myBitArr2 = new BitArray(4);
            myBitArr1[0] = false;
            myBitArr1[1] = false;
            myBitArr1[2] = true;
            myBitArr1[3] = true;
            myBitArr2[0] = false;
            myBitArr2[2] = false;
            myBitArr2[1] = true;
            myBitArr2[3] = true;
            PrintValues("\n\nBA1 : ", myBitArr1);
            PrintValues("\n\nBA2 : ", myBitArr2);
            PrintValues("\n\nOr : BA1.Or(BA2) : ", myBitArr1.Or(myBitArr2));
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}





using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { false, false, false, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA: ", myBitArr);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{
    
    class Program { 
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(5);
            myBitArr[0] = true;
            myBitArr[1] = true;
            myBitArr[2] = false;
            myBitArr[3] = true;
            myBitArr[4] = false;

            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));

            // To get the value of index at index 3
            Console.WriteLine(myBitArr.Get(3));

        }

    }
}
