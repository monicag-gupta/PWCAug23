using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
        public override bool Equals(object obj)
        {
            Emp e = (Emp)obj;
            return this.name == e.name && this.id==e.id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Emp> l2 = new List<Emp>(){
                new Emp("John",101),
                new Emp("Doe", 102) 
            };
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            l2.Add(new Emp("Abc", 103));
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }
            l2.Remove(new Emp("Abc", 103));
            Console.WriteLine("\n\nPost removal: ");
            foreach (Emp s in l2)
            {
                Console.WriteLine(s);
            }
            Console.WriteLine();
        }

    }
}











using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Emp> l2 = new List<Emp>(){
                new Emp("John",101),
                new Emp("Doe", 102) 
            };
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            l2.Add(new Emp("Abc", 103));
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}










using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Emp
    {
        string name;
        int id;
        public Emp() { }
        public Emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return "Emp Name: " + name + " Id :  "+ id;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            //ArrayList l1=new ArrayList();
            //l1.Add("John");
            //l1.Add("Doe");
            //l1.Add(45);
            //foreach(string  o in l1)
            //{
            //    Console.WriteLine(o);
            //}
             
            List<Emp> l2 = new List<Emp>();
            l2.Add(new Emp("John",101));
            l2.Add(new Emp("Doe", 102));
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            foreach(Emp s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}












using System;
using System.Collections;
using System.Collections.Generic;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {
            //ArrayList l1=new ArrayList();
            //l1.Add("John");
            //l1.Add("Doe");
            //l1.Add(45);
            //foreach(string  o in l1)
            //{
            //    Console.WriteLine(o);
            //}

            List<string> l2 = new List<string>();
            l2.Add("John");
            l2.Add("Doe");
            //l2.Add(45); 
            //runtime problem for Arraylist is now a compile time 
            //problem for generic List
            foreach(string s in l2)
            {
                Console.WriteLine(s);
            }


        }

    }
}











using System;
using System.Collections;

namespace Prj1Day19Col
{
    class Message<T>
    {
        //int x;
        public T usrMsg { get; set;}

        public Message() { }
        public Message(T msg) { usrMsg = msg; }
        public override string ToString()
        {
            return usrMsg.ToString();
        }
    }
    class Images
    {
        public int Size;
        public Images() { }
        public Images(int si) { Size = si; }
        public override string ToString()
        {
            return "This is an Image of size : " + Size;
        }
    }
    class Vdo
    {
        public Vdo() { }
        public Vdo(string q) { quality = q; }
        public string quality { get; set; }
        public override string ToString()
        {
            return "This is a Video file sent with quality : "+ quality;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Message<Images> slidesnapshot = new Message<Images>();
            slidesnapshot.usrMsg = new Images(1000);
            Console.WriteLine(slidesnapshot);
            Message<Vdo> CSharpTutorial = new Message<Vdo>();
            CSharpTutorial.usrMsg = new Vdo("HDD");
            Console.WriteLine(CSharpTutorial);
            Message<string> msg = new Message<string>();
            msg.usrMsg = "This is a msg in group";
            Console.WriteLine(msg);


        }
   
    }
}









using System;
using System.Collections;

namespace Prj1Day19Col
{
    class emp
    {
        string name;
        int id;

        public emp(string name, int id)
        {
            this.name = name;
            this.id = id;
        }
        public override string ToString()
        {
            return name;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            ArrayList list = new ArrayList();
            emp e = new emp("Nisha", 101);
            list.Add("Shriya"); list.Add("Soham"); list.Add("Sujan"); 
            list.Add("Sagar"); list.Add("Shirisha"); list.Add("Arkabrata"); 
            list.Add("Jitendra"); list.Add("Tejas"); list.Add("Trapti");
            list.Add(e); list.Add("Rishita"); list.Add("Krishna");
            list.Add("Abir"); list.Add("Debanjan"); list.Add("Debjani");
            list.Add("Divyani"); list.Add("Amisha");
            Console.WriteLine("Count:{0}", list.Count);
            Console.WriteLine("Capacity:{0}", list.Capacity);
            PrintValues("\nArray list Values:", list);
            Console.WriteLine("\nGetting element's index position:" + list.IndexOf(new emp("Nisha", 101)));
            Console.WriteLine("\nGetting element's last index position:" + list.LastIndexOf("Arkabrata"));
            //list.Sort();
            //PrintValues("\n\nSorted Values:", list);
            
            Console.WriteLine();
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                //string str = (string)obj;
                Console.Write(obj + "\t");
            }
        }
    }
}










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            ArrayList list = new ArrayList();
            list.Add("Shriya"); list.Add("Soham"); list.Add("Sujan"); 
            list.Add("Sagar"); list.Add("Shirisha"); list.Add("Arkabrata"); 
            list.Add("Jitendra"); list.Add("Tejas"); list.Add("Trapti");
            list.Add("Arkabrata"); list.Add("Rishita"); list.Add("Krishna");
            list.Add("Abir"); list.Add("Debanjan"); list.Add("Debjani");
            list.Add("Divyani"); list.Add("Amisha");
            Console.WriteLine("Count:{0}", list.Count);
            Console.WriteLine("Capacity:{0}", list.Capacity);
            PrintValues("\nArray list Values:", list);
            Console.WriteLine("Getting element's index position:" + list.IndexOf("Arkabrata"));
            Console.WriteLine("Getting element's last index position:" + list.LastIndexOf("Arkabrata"));
            list.Sort();
            PrintValues("\n\nSorted Values:", list);
            
            Console.WriteLine();
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}











Implement a railway ticket counter scenario where there are two queues- one general and one for senior citizen.
Tickets are issued such that for every one person in senior citizen queue, two persons in general queue are processed.
Write a program that takes input for 10 people who come at various points and print the list of people in the order of their processing sequence.
Person : Name, age : Input
Eg: Person1, Person4, Person5, Person6 -> SQ ; Remaining Person ->GQ
Start Processing
Process both queues completely
Take care of all the elements in both the queues being dequed.
If any queue is bigger, first take the approach, once one queue is emptied, dequeue the second queue without wait.











using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Queue myQueue = new Queue();
            myQueue.Enqueue("one");
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            myQueue.Enqueue("two");
            myQueue.Enqueue("three");
            myQueue.Enqueue("four");
            myQueue.Enqueue("five");
            myQueue.Enqueue("six");
            PrintValues("The Queue now is: ", myQueue);
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            Console.WriteLine("Element at first is : " + myQueue.Peek());
            Console.WriteLine("Element entered first that is removed from the Queue is : " + myQueue.Dequeue());
            Console.WriteLine("Total number of elements in the Queue are : " + myQueue.Count);
            PrintValues("The Queue after dequeue is: ", myQueue);
            Object[] arr = myQueue.ToArray();
            foreach (Object obj in arr)
                Console.WriteLine(obj);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}









Exercise:
String s = “using System;
using System.Collections;
class BitArrayExample {
	public static void Main()	{
		BitArray myBitArr = new BitArray(5);
		myBitArr[0] = true;
		myBitArr[1] = true;
		myBitArr[2] = false;
		myBitArr[3] = true;
		myBitArr[4] = false;

		// To get the value of index at index 2
		Console.WriteLine(myBitArr.Get(2));

		// To get the value of index at index 3
		Console.WriteLine(myBitArr.Get(3));
	}
}”

Prepare 8 stack:
CBS : {
CBE : }
SBS : [
SBE : ]
PS : (
PE : )
ABS : <
ABE : >


Push the elements from s accordingly.
Check the length of each pair: Like: 
CBS.Length should be equal to CBE.Length

If the length are unequal, output:
	Compilation Error: Brackets mismatch
Else if length pairs match:
	Compiled successfully








using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            Stack myStack = new Stack();
            myStack.Push("1st Element");
            myStack.Push("2nd Element");
            myStack.Push("3rd Element");
            myStack.Push("4th Element");
            myStack.Push("5th Element");
            myStack.Push("6th Element");
            PrintValues("\nStack : ", myStack);
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top is : " + myStack.Peek());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            Console.WriteLine("Element at the top that is removed from the Stack is : " + myStack.Pop());
            Console.Write("Total number of elements in the Stack are : ");
            Console.WriteLine(myStack.Count);
            PrintValues("\nStack before clear all: ", myStack);
            myStack.Clear();
            PrintValues("\nStack post clear all: ", myStack);
            Console.Write("Total number of elements in the Stack now are : ");
            Console.WriteLine(myStack.Count);

        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}










using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(new byte[] { 0, 0, 1 , 0, 1});
            //0 -> 8 bit -> 0 -> 0000 0000, 1 -> 1000 0000 ; result of 1 is true, and 0 is false
            //length -> 5*8 = 40 : Index : 0 - 39
            // Checking if the BitArray is read-only
            //Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine("\nCount: " + myBitArr.Count);
            Console.WriteLine("\nLength: " + myBitArr.Length);
            // To get the value of index at index 2
            //Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            //myBitArr.SetAll(false);
            //PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { true, false, true, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA Initially: ", myBitArr);
            myBitArr.SetAll(false);
            PrintValues("\n\nThe BA post setAll(false): ", myBitArr);
            Console.WriteLine("\n\n");
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}






using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            BitArray myBitArr1 = new BitArray(4);
            BitArray myBitArr2 = new BitArray(4);
            myBitArr1[0] = false;
            myBitArr1[1] = false;
            myBitArr1[2] = true;
            myBitArr1[3] = true;
            myBitArr2[0] = false;
            myBitArr2[2] = false;
            myBitArr2[1] = true;
            myBitArr2[3] = true;
            PrintValues("\n\nBA1 : ", myBitArr1);
            PrintValues("\n\nBA2 : ", myBitArr2);
            PrintValues("\n\nOr : BA1.Or(BA2) : ", myBitArr1.Or(myBitArr2));
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}





using System;
using System.Collections;

namespace Prj1Day19Col
{

    class Program
    {
        static void Main(string[] args)
        {
            bool[] b = new bool[] { false, false, false, true };
            BitArray myBitArr = new BitArray(b);
            // Checking if the BitArray is read-only
            Console.WriteLine(myBitArr.IsReadOnly);
            // To get the number of elements
            // contained in the BitArray
            Console.WriteLine(myBitArr.Count);
            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));
            PrintValues("\n\nThe BA: ", myBitArr);
        }
        public static void PrintValues(string s, IEnumerable myList)
        {
            Console.WriteLine(s);
            foreach (Object obj in myList)
            {
                Console.Write(obj + "\t");
            }
        }
    }
}







using System;
using System.Collections;

namespace Prj1Day19Col
{
    
    class Program { 
        static void Main(string[] args)
        {
            BitArray myBitArr = new BitArray(5);
            myBitArr[0] = true;
            myBitArr[1] = true;
            myBitArr[2] = false;
            myBitArr[3] = true;
            myBitArr[4] = false;

            // To get the value of index at index 2
            Console.WriteLine(myBitArr.Get(2));

            // To get the value of index at index 3
            Console.WriteLine(myBitArr.Get(3));

        }

    }
}
