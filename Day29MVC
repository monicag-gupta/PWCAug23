use training;

create table loginTbl(name varchar(26), uname varchar(10), passwd varchar(10));


insert into loginTbl values
('Administrator','admin','cSharp'),('Manager','monica','gupta'),('guest','guest','visitor');

select * from loginTbl;






In the CRUD_ADO->Class1.cs :


using System;
using System.Data;
using System.Data.SqlClient;

namespace CRUD_ADO
{
    public class CRUD
    {
        public static Boolean chkValidity(string uname, string pass)
        {
            try
            {
                //SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-ORPSK1N;Initial Catalog=training;Integrated Security=True");
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();
                SqlCommand cmd = new SqlCommand("Select * from loginTbl", con);
                cmd.CommandType = CommandType.Text;
                SqlDataReader rdr = cmd.ExecuteReader();         
                while (rdr.Read())
                {
                    if (rdr.GetString("uname").Equals(uname) && rdr.GetString("passwd").Equals(pass))
                        return true;
                }

            }
            catch (Exception e) { return false; }
            return false;
        }
    }
}





Views->Login->Index.cshtml:

<h1>Login to enter the Site:
    <br />
    
        <form action="/Login/mySite">
            <table>
                <tr>
                    <td>Enter Login Id: </td>
                    <td><input type="text" name="uname" /></td>
                </tr>
                <tr>
                    <td>Enter Password: </td>
                    <td><input type="text" name="pass" /></td>
                </tr>
                <tr>
                    <td rowspan="2"><input type="submit" value="login" /></td>
                </tr>
            </table>

           </form>
  
</h1>







using Microsoft.AspNetCore.Mvc;

namespace Day29MVC.Controllers
{
    public class LoginController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
       public IActionResult mySite(string uname, string pass)
        {
            if (CRUD_ADO.CRUD.chkValidity(uname, pass))
            {
                return RedirectToAction("Success");
            }
            return RedirectToAction("Failure");

            
        }
        public IActionResult Success()
        {
            return View();
        }
        public IActionResult Failure()
        {
            return View();
        }

    }
}







Success.cshtml:
<h1>
    Welcome to our Site !! You are Authenticated by our Server!
</h1>
<h3><a href="/Login/Index">Login page Again</a></h3>


Failure.cshtml:
<h1>
    You are NOT Authenticated by our Server! Please Login with correct Credentials.
</h1>
<h3><a href="/Login/Index">Login page Again</a></h3>






Startup.cs:

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day29MVC
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Login}/{action=Index}/{id?}");
            });
        }
    }
}





Exercise:
Consider the Example Code for LoginController
Add a “Register Now” link in the Index.cshtml page of LoginController.
In the action of Register page, add the view for Registration:
Enter Name : 
Enter UserName :
Enter Password : 
 
On click of Register, The page should take in the Credentials and Insert the data in the LoginTbl of the Database. The Insertion Operation should be written in the CRUD_ADO project.



Have “Update Password” link added in the Success Page.
The link takes us to a page where we need to enter :
Name: 
Old Password:
New Password:
Confirm new Password:

If the  “New Password” ==  “Confirm new Password” the update in the database the new password according to the name and old password.
Code of Update should be written in CRUD_ADO Project, called here.



If the Login id is authenticated as an admin user, then we should get a different view, admin view (managed by controller) : In the admin view have an option of deleting a user: 
Link stating “Delete an user”
Clicking on the link should take us to a page:
Name: 
UserName: 
Password: 

If all parameters match as a record from the table, the data should be deleted in the table.
Use CRUD_ADO project for deleting from the table.







