Points for Subqueries:
If data is precise (less projection, columns) to be selected, use Subqueries
If data is required for analysis (once per query) or if the query is an on time query, use Subqueries
Subqueries are simpler and more organized than joins.
Points for Joins:
If data selected is a lot (more projections are there) then use Joins
If views are to be created against any query, or if query result is used very frequently, then use joins as it gives a de-normalized (1NF) table to run the query.
If projection (select columns) are from multiple tables, we are bound to use joins
Eg:
select e1.name, e1.MANAGER, e2.name mngrName, e2.SAL MngrSal     
from Emptbl e1 join Emptbl e2
on e1.MANAGER = e2.NAME and e1.name = 'B';

select name mngrName, sal MngrSal from Emptbl where name = (select manager from Emptbl where name='B');

Every Join can be converted to it’s subquery  partner, giving the same result, but every subquery can not be converted to joins. Eg : Insert, update, delete with subqueries..














CREATE TABLE EMPTBL (NAME VARCHAR(20), SAL VARCHAR(20), MANAGER VARCHAR(20));
Insert into Emptbl values('A',2000,'B'),('B',5000,'C'),('C',1000,null),('D',4000,'C');
select * from Emptbl;

select e2.SAL     
from Emptbl e1 join Emptbl e2
on e1.MANAGER = e2.NAME and e1.name = 'B';

select sal from Emptbl where name = (select manager from Emptbl where name='B');








Select * from CUSTOMERS_BKP2;

DELETE FROM CUSTOMERS_BKP2 WHERE AGE IN (SELECT AGE FROM CUSTOMERS WHERE AGE >=27 );
Select * from CUSTOMERS_BKP2;










Select * from CUSTOMERS_BKP2;
UPDATE CUSTOMERS_BKP2 
   SET SALARY = SALARY * 1.25 
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP WHERE AGE >= 25);
Select * from CUSTOMERS_BKP2;





Select * into BikeStoreEmp from BikeStores.sales.staffs;
Select * into BikeStoreCust from BikeStores.sales.customers;


--BikeStoreEmp
Select * into testdb.dbo.BikeStoreEmp from BikeStores.sales.staffs;
Select * into BikeStoreCust from BikeStores.sales.customers;




delete from CUSTOMERS_BKP2;

INSERT INTO CUSTOMERS_BKP2 
	SELECT * FROM CUSTOMERS 
	WHERE ID IN 
		(SELECT ID FROM CUSTOMERS WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY >= 4500));

Select * from CUSTOMERS_BKP2;






SELECT *  FROM CUSTOMERS
   WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY > 4500);
SELECT *  FROM CUSTOMERS
   WHERE ID IN (4,5,7);


update customers set salary=5000 where id = 8;


SELECT *  FROM CUSTOMERS
   WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY > 4500);
SELECT *  FROM CUSTOMERS
   WHERE ID IN (4,5,7);






CREATE TABLE CUSTOMERS_Bkp2( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID));


INSERT INTO CUSTOMERS_BKP2 
SELECT * FROM CUSTOMERS WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY > 4500);

Select * from CUSTOMERS_BKP2;


UPDATE CUSTOMERS_BKP2 
   SET SALARY = SALARY * 1.25 
   WHERE AGE IN (SELECT AGE FROM CUSTOMERS WHERE AGE >= 27 )

DELETE FROM CUSTOMERS_BKP2 WHERE AGE IN (SELECT AGE FROM CUSTOMERS WHERE AGE >=27)










Exercise: from BikeStores: 

Cust.fn, Cust.ln, orders.oID, orders.status, staff.fn, staff.ln 

Join the tables sales.orders  with SALES.CUSTOMERS and also with sales.staffs : 
and from the Customer table show the customers first_name, last name, 
from orders table show the customers corresponding order_id, and order_status 
and from the staff table show the linked staff first_name and last_name.

Linking conditions are equi join based on 
orders.customer_id with customers.customer_id and 
orders.staff_id with staff.staff_id

select * from sales.orders;
SELECT * FROM SALES.CUSTOMERS;
select * from sales.staffs;






Joining:

It is noticeable that the join is performed in the WHERE clause. 
Several operators can be used to join tables, such as =, <, >, <>, <=, >=, !=, BETWEEN, LIKE, and NOT; they can all be used to join tables. 
However, the most common operator is the equal symbol.
MS SQL Server Join Types −
There are different types of joins available in MS SQL Server −
INNER JOIN − Returns rows when there is a match in both tables.
LEFT JOIN − Returns all rows from the left table, even if there are no matches in the right table.
RIGHT JOIN − Returns all rows from the right table, even if there are no matches in the left table.
FULL JOIN − Returns rows when there is a match in one of the tables.
SELF JOIN − This is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the MS SQL Server statement.
CARTESIAN JOIN − Returns the Cartesian product of the sets of records from the two or more joined tables.









select * from Orders;
select * from customers;

SELECT CUSTOMERS.ID, NAME, AGE, AMOUNT 
   FROM CUSTOMERS, ORDERS 
   WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID ;
SELECT CUSTOMERS.ID, NAME, AGE, AMOUNT 
   FROM CUSTOMERS Join ORDERS 
   on  CUSTOMERS.ID = ORDERS.CUSTOMER_ID ;

   SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   LEFT JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;


   SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   RIGHT JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;


   SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   FULL JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

   SELECT  CUSTOMERS.ID, NAME, Age, Address, Salary, Orders.Id, Customer_id, AMOUNT, DATE
   FROM CUSTOMERS, ORDERS;










select * from Orders;
select * from customers;

SELECT CUSTOMERS.ID, NAME, AGE, AMOUNT 
   FROM CUSTOMERS, ORDERS 
   WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID ;
SELECT CUSTOMERS.ID, NAME, AGE, AMOUNT 
   FROM CUSTOMERS Join ORDERS 
   on  CUSTOMERS.ID = ORDERS.CUSTOMER_ID ;





CREATE TABLE EMPTBL (NAME VARCHAR(20), SAL VARCHAR(20), MANAGER VARCHAR(20));
Insert into Emptbl values('A',2000,'B'),('B',5000,'C'),('C',1000,null),('D',4000,'C');
select * from Emptbl;


select e2.SAL     
from Emptbl e1 join Emptbl e2
on e1.MANAGER = e2.NAME and e1.name = 'B';






create table tbl1(A varchar(3),B varchar(3));
create table tbl2(B varchar(3),C varchar(3));

insert into tbl1 values('A1','B1'),('A2','B2'),('A3','B3');

insert into tbl2 values('B1','C1'),('B3','C3'),('B5','C5');
select * from tbl1;
select * from tbl2;
--Inner Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 join tbl2 on tbl1.B = tbl2.B;
--Left Outer Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 left outer join tbl2 on tbl1.B = tbl2.B;
--right Outer Join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 right outer join tbl2 on tbl1.B = tbl2.B;
--full outer join:
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1 full outer join tbl2 on tbl1.B = tbl2.B;
--cross join
select tbl1.A, tbl1.B, tbl2.B, tbl2.C from tbl1, tbl2;








CREATE TABLE ORDERS (
   ID          INT        NOT NULL,
   DATE        DATETIME, 
   CUSTOMER_ID INT references CUSTOMERS(ID),
   AMOUNT    DECIMAL (18, 2),  
   PRIMARY KEY (ID)
);

select * from Orders;

INSERT INTO ORDERS VALUES (100, '2020-10-08',  3, 1500.00  );
INSERT INTO ORDERS VALUES (104, '2020-10-08',  7, 1500.00  );

INSERT INTO ORDERS VALUES 
 	(101, '2020-10-20',  3, 1560.00 ),
 	(102, '2020-10-08',  3, 3000.00  ),
 	(103, '2020-05-20', 4, 2060.00);

	select * from Orders;





Testdb:

select distinct address from customers;

select count(Address) from Customers;
select count(distinct Address) from Customers;







select * from Customers;

update Customers set address= 'Kolkata' where id between 3 and 5;

update Customers set address= 'Gurgaon' where id >6;

update Customers set address= 'Mumbai' where address not in ('Kolkata','Gurgaon');

SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS  GROUP BY Address;


SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS where age < 26 GROUP BY Address;

SELECT Address, SUM(SALARY) as [sum of salary] FROM CUSTOMERS  GROUP BY Address having sum(salary)>9000;





BikeStores:
select Category_id, sum(list_price) from  production.products group by Category_id;




Testdb:
select sum(salary) as 'Total Expense' from customers;
select sum(salary) as 'Total Expense' from customers where id < 7;
select min(salary) as 'Total Expense' from customers;
select min(salary),max(salary), avg(salary),sum(salary), count(name)  from customers;



BikeStores:

SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME, last_name;


SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME asc, last_name desc;

SELECT * FROM SALES.CUSTOMERS 
   ORDER BY FIRST_NAME DESC;





SELECT
    product_id,
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price BETWEEN 149.99 AND 199.99
ORDER BY
    list_price;



SELECT
    product_id,
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price NOT BETWEEN 149.99 AND 199.99
ORDER BY
    list_price;








testdb:

SELECT * FROM CUSTOMERS_bkp1;

Insert into CUSTOMERS_BKP1 values(10,'Ab_xy',28,'Dli%wow',89.00);
Insert into CUSTOMERS_BKP1 values(11,'A_xy',28,'Dl%wow',89.00);
Insert into CUSTOMERS_BKP1 values(12,'12Ab_xy',28,'34Dli%wow',89.00);

select name from CUSTOMERS_BKP1 where name like '%[_]%';
select address from CUSTOMERS_BKP1 where address like '%[%]%';

select name from CUSTOMERS_BKP1 where name like '[0-9]%';
select name from CUSTOMERS_BKP1 where name like '[a-z]%';
select name from CUSTOMERS_BKP1 where name like '[a-z0-9]%';




BikeStores:


Select * from sales.customers where first_name like 'a%';
Select * from sales.customers where first_name like '_a%';

Select * from sales.customers where first_name like '____';

Select * from sales.customers where first_name like '%a_';
Select * from sales.customers where first_name like '%a';



SELECT TOP 10
    product_name, list_price
FROM   production.products;


SELECT TOP 2 Percent
    product_name, list_price
FROM   production.products;

SELECT 
    product_name, list_price
FROM   production.products;



SELECT TOP 5
--WITH TIES
    product_name,list_price
FROM production.products 
order by list_price;



SELECT TOP 5
WITH TIES
    product_name,list_price
FROM production.products 
order by list_price;

SELECT TOP 3 WITH TIES
    product_name, list_price
FROM production.products 
order by product_name, list_price;








SELECT customer_id, first_name, last_name,  phone
FROM  sales.customers
WHERE  phone IS NULL;

SELECT customer_id, first_name, last_name,  phone
FROM  sales.customers
WHERE  phone IS NOT NULL;





SELECT  product_name,  list_price
FROM  production.products
WHERE  
list_price IN (89.99, 109.99, 159.99);

SELECT  product_name, list_price
FROM   production.products
WHERE
    list_price NOT IN (89.99, 109.99, 159.99);






SELECT
    product_name,
    list_price
FROM
    production.products
WHERE
    list_price < 100
OR list_price > 10000;



SELECT * FROM
    production.products
WHERE
    category_id = 1
AND list_price > 400;











SELECT ID, NAME, SALARY  
FROM CUSTOMERS 
WHERE SALARY > 2000;



DELETE FROM CUSTOMERS_BKP1 WHERE ID >7;


SELECT * FROM CUSTOMERS_bkp1;

DELETE FROM CUSTOMERS_BKP1;

SELECT * FROM CUSTOMERS_bkp1;


INSERT INTO CUSTOMERS_BKP1 
SELECT * FROM CUSTOMERS;




SELECT * FROM CUSTOMERS;

UPDATE CUSTOMERS 
SET ADDRESS = 'Pune' 
WHERE ID = 6; 

SELECT * FROM CUSTOMERS;

UPDATE CUSTOMERS_bkp1 
SET ADDRESS = 'Pune', SALARY = 1000.00;


SELECT * FROM CUSTOMERS_bkp1;








(1,'ASSASSINS CREED: EMBERS','Animations'),
(2,'Real Steel(2012)','Animations'),
(3,'Alvin and the Chipmunks','Animations'),
(4,'The Adventures of Tin Tin','Animations'),
(5,'Safe (2012)','Action'),
(6,'Safe House(2012)','Action'),
(7,'3 Idiots','Drama'),
(8,'Ghazni','Drama'),
(9,'Nayak','Drama'),
(10,'Marley and me','Family')



(1,'Adam','Smith',1), 
(2, 'Ravi', 'Kumar', 2), 
(3, 'Susan', 'Davidson', 5),
(4, 'Jenny', 'Adrianna', 8),
(6,'Lee','Pong',10)







SELECT * INTO CUSTOMERS_BKP FROM CUSTOMERS;
SELECT * FROM CUSTOMERS_BKP;


CREATE TABLE CUSTOMERS_Bkp1( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID));

INSERT INTO CUSTOMERS_BKP1 
SELECT * FROM CUSTOMERS;

SELECT * FROM CUSTOMERS_Bkp1;






SELECT * FROM CUSTOMERS;



INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );

INSERT INTO CUSTOMERS VALUES (7, 'Muffy', 24, 'Indore', 10000.00 );

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
VALUES (8, 'Khilan', 22, 'Delhi', null );  
INSERT INTO CUSTOMERS (ID,NAME,AGE, SALARY) 
VALUES (9, ‘Mililan', 28, null );  


INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES 
(3, 'kaushik', 23, 'Kota', 2000.00 ),
(4, 'Chaitali', 25, 'Mumbai', 6500.00 ),
(5, 'Hard', 27, 'Bhopal', 8500.00 ),
(6, 'Komal', 22, 'MP', 4500.00 );




CREATE TABLE CUSTOMERS( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID)
);

exec sp_columns CUSTOMERS;


DROP TABLE CUSTOMERS; 



exec sp_columns CUSTOMERS;

exec sp_help CUSTOMERS;


execute sp_columns CUSTOMERS;

execute sp_help CUSTOMERS;














create database BikeStores;


use BikeStores;


















CREATE TABLE EmployeeLeave3
		(
		LeaveType char(2) CONSTRAINT chkLeave3 	CHECK(LeaveType IN('CL','SL','PL')) 	CONSTRAINT chkDefLeave DEFAULT 'PL'
		);


		
CREATE TABLE EmployeeLeave4
		(
		LeaveType char(2) 	CONSTRAINT chkDefLeave2 DEFAULT 'PL'
		);




CREATE TABLE emp6
(
sal money CHECK (sal BETWEEN 20000 AND 80000)
);




CREATE TABLE Emp5
	(
	DeptCode char(4) CHECK (DeptCode LIKE '[0-9][0-9][0-9][0-9]')
	);





CREATE TABLE EmployeeLeave2
(
EmployeeID int,
LeaveStartDate datetime CONSTRAINT cpkLeaveStartDate PRIMARY KEY(EmployeeID, LeaveStartDate),
LeaveEndDate datetime NOT NULL,
LeaveReason varchar(100),
LeaveType char(2) CONSTRAINT chkLeave CHECK(LeaveType IN('CL','SL','PL'))
);






ALTER TABLE inventory
DROP CONSTRAINT fk_inv_product_id;   




CREATE TABLE products2  
( product_name VARCHAR(50) NOT NULL,  
  location VARCHAR(50) NOT NULL,  
  category VARCHAR(25)  
  CONSTRAINT products_pk PRIMARY KEY (product_name, location)  
);  

CREATE TABLE inventory2  
( inventory_id INT PRIMARY KEY,  
  product_name VARCHAR(50) NOT NULL,  
  location VARCHAR(50) NOT NULL,  
  quantity INT,  
  min_level INT,  
  max_level INT,  
  CONSTRAINT fk_inv_product  
    FOREIGN KEY (product_name, location)  
    REFERENCES products2 (product_name, location)  
); 










CREATE TABLE products  
( product_id INT PRIMARY KEY,  
  product_name VARCHAR(50) NOT NULL,  
  category VARCHAR(25)  
); 
 
CREATE TABLE inventory  
( inventory_id INT PRIMARY KEY,  
  product_id INT NOT NULL,  
  quantity INT,  
  min_level INT,  
  max_level INT,  
  CONSTRAINT fk_inv_product_id  
    FOREIGN KEY (product_id)  
    REFERENCES products (product_id)  
); 







ALTER TABLE EmployeeLeave
ADD CONSTRAINT rfkcEmployeeID 
FOREIGN KEY(EmployeeID) 
REFERENCES Emp(EmpCode)
ON DELETE NO ACTION 
ON UPDATE NO ACTION
;






CREATE TABLE Project (
  ProjectCode int CONSTRAINT pkProjectCode PRIMARY KEY,
  Description varchar(50) not null CONSTRAINT unDesc UNIQUE
);









ALTER TABLE emp2  
DROP CONSTRAINT emp2_pk ; 





CREATE TABLE emp4 ( 
emp_id INT,    
last_name VARCHAR(50) NOT NULL,    
first_name VARCHAR(50) NOT NULL,    
salary MONEY
); 

Here we expect errors:
ALTER TABLE emp4 ADD CONSTRAINT emp4_pk PRIMARY KEY (emp_id); 


drop table emp4;

CREATE TABLE emp4 ( 
emp_id INT not null,    
last_name VARCHAR(50) NOT NULL,    
first_name VARCHAR(50) NOT NULL,    
salary MONEY
); 

ALTER TABLE emp4 ADD CONSTRAINT emp4_pk PRIMARY KEY (emp_id); 




ALTER TABLE emp 
ADD CONSTRAINT emp_pk PRIMARY KEY (EmpCode); 


Create a primary key in SQL Server where the primary key is more than one field:
CREATE TABLE emp3  
( last_name VARCHAR(50) NOT NULL,  
  first_name VARCHAR(50) NOT NULL,  
  salary MONEY,  
  CONSTRAINT emp3_pk PRIMARY KEY (last_name, first_name)  
); 






For example: Method 1: Column Constraint

CREATE TABLE emp1
( emp_id INT PRIMARY KEY,  
  last_name VARCHAR(50) NOT NULL,  
  first_name VARCHAR(50) NOT NULL,  
  salary MONEY  
); 


Method 2: Table Constraint

CREATE TABLE emp2  
( emp_id INT,  
  last_name VARCHAR(50) NOT NULL,  
  first_name VARCHAR(50) NOT NULL,  
  salary MONEY,  
  CONSTRAINT emp2_pk PRIMARY KEY (emp_id)  
); 









CREATE TABLE Emp(
EmpCode int IDENTITY(100,1),
EmpName char(25) NOT NULL,
DeptNo char(4) NOT NULL);




sp_help EmployeeLeave;



CREATE TABLE EmployeeLeave
(
EmployeeID int NOT NULL, 
LeaveStartDate datetime NOT NULL,
LeaveEndDate datetime NOT NULL,
LeaveReason varchar(100),
LeaveType char(2)NOT NULL
);





The CREATE TABLE statement is used to create a table.
Syntax:
CREATE TABLE 
    [ database_name . [ schema_name ] .] table_name 
        ( { <column_definition> | <computed_column_definition> }
        [IDENTITY (SEED, INCREMENT)]
[ <table_constraint> ] [ ,...n ] ) 
    [ ON { partition_scheme_name ( partition_column_name ) | filegroup 
        | "default" } ] 
    [ { TEXTIMAGE_ON { filegroup | "default" } ] 
[ ; ]








Create database testdb;

drop database testdb;

Create database testdb;
use testdb;










RDBMS:
Each table in a database has a unique table name.
The row (or record) in the table is called a tuple.
The column (or field) is called an attribute. 
Every column in a table must have a unique name. 
The number of tuples is called the cardinality of the table.
The number of attributes is called the degree of the table.
A column or combination of columns that uniquely identifies each row in the table is called the primary key 
A table where every row is different from all other rows is called a relation.
A domain is a collection of values from which one or more attributes (columns) draw their actual values. 
In RDBMS, missing or unknown information is represented as a NULL value in a table. 
NULL is not the same as space or zero.


The various types of keys used in an RDBMS are:
Primary : Unique + Not Null
Foreign : Pkey in other Relation
Candidate: Many keys who can become PKey
Alternate : Can become PKey



Normalization results in the formation of tables that satisfy certain normal forms.
The normal forms are used to remove various types of abnormalities and inconsistencies from the database.
The most important and widely used normal forms are:
First Normal Form (1NF)
when each cell of the table contains precisely one value
RDBMS
Second Normal Form (2NF)
No partial dependency exists between non-key attributes and key attributes
Pkey or AltKey
Third Normal Form (3NF)
No transitive (indirect) dependency exists between non-key attributes and key attributes
CompositeKey : work for all records
Boyce-Codd Normal Form (BCNF)
if and only if every determinant is a candidate key
CandidateKey







