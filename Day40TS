class Car {   
   Color:string    
   constructor();
   constructor(color:string); 
   constructor(color?:string) {   
      if(color!=undefined){
       this.Color = color;
      } 
      else
      this.Color="White"; 
   }   
}   
class Audi extends Car {   
   Price: number;  
   constructor();
   constructor(color:string);  
   constructor(price:number);
   constructor(color: string, price: number);
   constructor(colorOrPrice?: any, price?: number) {
       if(colorOrPrice!=undefined ){
         //   typeof(colorOrPrice) == "string"?super(colorOrPrice): super();     
         //   this.Price = typeof(colorOrPrice) == "number" ? colorOrPrice:price!=undefined ?  price :10000;
          if(typeof(colorOrPrice) == "string") {
            super(colorOrPrice);
          }
          else
             super();
         if(typeof(colorOrPrice) == "number")
            this.Price = colorOrPrice;
         else{
            if(price != undefined){
               this.Price = price;
            }
            else
               this.Price =100000;
         }
     }
     else {
           super();
           this.Price=100000;
       }
        
    }  
    display():void {  
        console.log("Color of Audi car: " + this.Color); //Color of Audi car:  Black 
        console.log("Price of Audi car: $" + this.Price); //Price of Audi car: 8500000
    }  
}  
let obj1 = new Audi(" Black", 8500000 );  
obj1.display(); 
let obj2 = new Audi(" Red");   //Price default
obj2.display(); 
let obj3 = new Audi();  //both default
obj3.display(); 
let obj4 = new Audi(6700000); //color default 
obj4.display();











*************************************************************************************


class Car {   
   Color:string     
   constructor(color:string) {   
      this.Color = color  
   }   
}   
class Audi extends Car {   
    Price: number  
    constructor(color: string, price: number) {  
        super(color);  
        this.Price = price;  
    }  
    display():void {  
        console.log("Color of Audi car: " + this.Color); //Color of Audi car:  Black 
        console.log("Price of Audi car: " + this.Price); //Price of Audi car: 8500000
    }  
}  
let obj = new Audi(" Black", 8500000 );  
obj.display(); 







***********************************************************************************************




class Car { 
   //field 
   engine:string; 
    //constructor 
   constructor(engine:string) { 
      this.engine = engine 
   }  
     //function 
   disp():void { 
      console.log("Function displays Engine is  :   "+this.engine) 
   } 
} 
//create an object 
var obj:Car = new Car("XXSY1")
//access the field 
console.log("Reading attribute value Engine as :  "+obj.engine)  
//access the function
obj.disp()






*************************************************************************************************************************

var x : number | string;
x = 10;
x = "abc";


function disp(name:string|string[]) { 
   if(typeof name == "string") { 
      console.log(name) 
   } else { 
      var i;  
      for(i = 0;i<name.length;i++) { 
         console.log(name[i])
      } 
   } 
} 
disp("mark") 
console.log("Printing names array....") 
disp(["Mark","Tom","Mary","John"])






Exercise:
WA function in typescript to provide the overloads of  the following functions of C#:
int sum(int x, int y)
double sum(double x, double y)
string sum(string x, string y)
int sum(int x, int y, int z, int p)

Use typeof(variable) if required.



Example:

function disp(s1:string):void; 
function disp(n1:number,s1:string):void; 

function disp(x:any,y?:any):void { 
   console.log(typeof(x)); 
   console.log(y); 
} 


disp("abc") 
disp(1,"xyz");
/*
string
undefined
number
xyz
*/
