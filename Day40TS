






***********************************************************************************************




class Car { 
   //field 
   engine:string; 
    //constructor 
   constructor(engine:string) { 
      this.engine = engine 
   }  
     //function 
   disp():void { 
      console.log("Function displays Engine is  :   "+this.engine) 
   } 
} 
//create an object 
var obj:Car = new Car("XXSY1")
//access the field 
console.log("Reading attribute value Engine as :  "+obj.engine)  
//access the function
obj.disp()






*************************************************************************************************************************

var x : number | string;
x = 10;
x = "abc";


function disp(name:string|string[]) { 
   if(typeof name == "string") { 
      console.log(name) 
   } else { 
      var i;  
      for(i = 0;i<name.length;i++) { 
         console.log(name[i])
      } 
   } 
} 
disp("mark") 
console.log("Printing names array....") 
disp(["Mark","Tom","Mary","John"])






Exercise:
WA function in typescript to provide the overloads of  the following functions of C#:
int sum(int x, int y)
double sum(double x, double y)
string sum(string x, string y)
int sum(int x, int y, int z, int p)

Use typeof(variable) if required.



Example:

function disp(s1:string):void; 
function disp(n1:number,s1:string):void; 

function disp(x:any,y?:any):void { 
   console.log(typeof(x)); 
   console.log(y); 
} 


disp("abc") 
disp(1,"xyz");
/*
string
undefined
number
xyz
*/
