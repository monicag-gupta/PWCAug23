ADO.NET Data Access :
1. Set up a Data Connection
– Establishes a link to the data source
2. Set up a DataAdapter
– Handles retrieving and updating the data
– Data adapter uses “Command” objects to retrieve/store records from/to the database and can be used to:
3. Create a DataSet:
A temporary set of data tables stored in the computer’s memory
ADO.NET datasets are disconnected
– So data in memory does not keep an active connection to data source
– Much better: Many more clients can connect and use the data server
DataAdapters’s Fill(-,-) method gets a data table into the DataSet
– Uses SQL in a “Command” object to specify data to retrieve/update
4.. Add controls on the Windows Form or Web Form
– Display the data from the DataSet and allow user interaction
5. Write C# code to put the data into the controls










Create database training;
use training;
create table t(i int,j int);
insert into t values(2,5),(3,6),(5,5),(1,2),(8,9);
select * from t;












//In C# Console : Paste


using System;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;

namespace PrjADODC
{
    internal class Program
    {
        static void Main(string[] args)
        {
            try
            {
                //Console.WriteLine("hello");
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True");
                con.Open();



                ////////Insert: Create records C of CRUD
                //SqlCommand cmd = new SqlCommand("Insert into t values(2,5),(7,9)", con);
                //cmd.CommandType = CommandType.Text;
                //int recIns = cmd.ExecuteNonQuery();
                //Console.WriteLine("Number of rows inserted: " + recIns);





                /////Select : Read R of CRUD
                //SqlCommand cmd = new SqlCommand("Select * from t", con);
                //cmd.CommandType = CommandType.Text;
                //SqlDataReader rdr = cmd.ExecuteReader();
                //Console.WriteLine("i\tj");
                //while (rdr.Read())
                //{
                //    Console.WriteLine(rdr.GetInt32(0) + "\t" + rdr.GetInt32(1));
                //}







                //////Update: U : CRUD
                //SqlCommand cmd = new SqlCommand("Update t set j=4 where i=2 and j=5", con);
                //cmd.CommandType = CommandType.Text;
                //int recUp = cmd.ExecuteNonQuery();
                //Console.WriteLine("Number of Records Updated : " + recUp);



               ////////Delete: D of CRUD
                //SqlCommand cmd = new SqlCommand("Delete from t where i=2 and j=4", con);
                //cmd.CommandType = CommandType.Text;
                //int recDel = cmd.ExecuteNonQuery();
                //Console.WriteLine("Number of Records Deleted: "+ recDel);



            }
            catch (Exception e) { Console.WriteLine(e.ToString()); }
            Console.ReadLine();

        }
    }
}






In SQL Server : 
To Check whether Insertion happened or not :

select * from t;


