

Entity Framework:

Add NuGet Pkgs:
Microsoft.EntityFrameworkCore.SqlServer : version 5.0.17
Microsoft.EntityFrameworkCore.Tools : version 5.0.17


Models: 
EmployeeEF:

using System.ComponentModel.DataAnnotations;

namespace Day34MVC_EF.Models
{
    public class EmployeeEF
    {
        [Key]
        public int id { get; set; }

        [Required(ErrorMessage = "Required Name")]
        public string name { get; set; }
        public int salary { get; set; }

    }
}



EmployeeEFContext:

using Microsoft.EntityFrameworkCore;


namespace Day34MVC_EF.Models
{
    public class EmployeeEFContext : DbContext
    {
        public EmployeeEFContext() 
        {
        }
        public EmployeeEFContext(DbContextOptions<EmployeeEFContext> options) : base(options)
        {
        }
        public DbSet<EmployeeEF> EmployeeEFs { get; set; }
    }
}




appSettings.json :


{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "EmpCon": "Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True"
  }
}






startup.cs

using Day34MVC_EF.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day34MVC_EF
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            string conStr = Configuration.GetConnectionString("EmpCon");
            services.AddDbContext<EmployeeEFContext>(options => options.UseSqlServer(conStr));
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}




Got to:

Tools-> NuGet Package Manager->Package Manager Console

PM> Add-Migration InitialCreate

Build started...
Build succeeded.
To undo this action, use Remove-Migration.



PM> Update-Database

Build started...
Build succeeded.
Done.



PM>


The table gets created in the Db,  SQL Server:
The table is created
select * from employeeEfs;






















************************************************************************************************************************************
Exercise:
Student List can be viewed as any user but new students can be added (controlled) by authenticated users only.
Searches are also allowed for any user.
Write the code for the same.







****************************************************************************************************************************************


ChkAuthController:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication4.Controllers
{
    public class ChkAuthController : Controller     {
        // GET: CheckAuth
        public ContentResult Index()         {
            return Content("Hello, You are Guest.");
        }

        // GET: CheckAuth/AuthorisedOnly  
        [Authorize]
        public ContentResult AuthorisedOnly()         {
            return Content("You are registered user.");
        }
    }
}




***************************************************************************************************************************


ActFilterController:

using Microsoft.AspNetCore.Mvc;

namespace Day34MVC.Controllers
{
    public class ActFilterController : Controller
    {
        [ResponseCache(Duration = 10)]
        public ActionResult Index()
        {
            return View();
        }

    }
}





Index:

<h4>
    @DateTime.Now.ToString();
</h4>
<h5><a href="/ActFilter/Index">IndexPage: Self</a></h5>










************************************************************************************************************************************


HiddenFFController:

using Microsoft.AspNetCore.Mvc;

namespace Day34MVC.Controllers
{
    public class HiddenFFController : Controller
    {
        public IActionResult Index()
        {
            ViewData["Guest"] = "Guest";
            return View();
        }
        public IActionResult Welcome1(string uname)
        {
            ViewData["uname"] = uname;
            return View();
        }
        [HttpPost]
        public IActionResult Welcome2(string uname)
        {
            ViewData["uname"] = uname;
            return View();
        }
    }
}





Index:
<h3>
    <form action="/HiddenFF/Welcome1">
        Enter UserName: <input type="text" value="@ViewData["Guest"]"  name="uname" />
        <br />
        <input type="submit" value="Welcome1"/>
    </form>
    <hr />
    <form action="/HiddenFF/Welcome2" method="post">
        <input type="hidden" value="@ViewData["Guest"]" name="uname" />
        <br />
        <input type="submit" value="Welcome2"/>
    </form>





Welcome1: 

<h1>
    The Welcome1 Page with text box:
    <br />
    Welcome @ViewData["uname"] !!
</h1>




Welcome2:

<h1>
    The Welcome2 Page with hidden form field:
    <br />
    Welcome @ViewData["uname"] !!
</h1>



