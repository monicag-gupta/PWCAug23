HTML Helpers:

ASP.NET provides a wide range of built-in HTML helpers that can be used as per the user’s choice as there are multiple overrides available for them. 
There are three types of built-in HTML helpers offered by ASP.NET.
1. Standard HTML Helper 
The HTML helpers that are mainly used to render HTML elements like text boxes, checkboxes, Radio Buttons, and Dropdown lists, etc. are called Standard HTML helpers. 
2. Strongly-Typed HTML Helper 
The Strongly-Typed HTML helper takes a lambda as a parameter that tells the helper, which element of the model to be utilized in the typed view. The Strongly typed views are used for rendering specific sorts of model objects, rather than using the overall View-Data structure. The functionality of all of these are the same as above but they are used with modal classes. Now, as we know we need a model class to use strongly typed HTML
3. Templated HTML Helper 
The templated HTML Helper is used for data display and input. It generates HTML automatically as per model property and it can generate HTML for a complete model with a single tag. These are divided into two categories 
Display Template
Editor Template




List of Standard HTML Helpers :

@Html.ActionLink() - Used to create link on html page
@Html.TextBox() - Used to create text box
@Html.CheckBox() - Used to create check box
@Html.RadioButton() - Used to create Radio Button
@Html.BeginFrom() - Used to start a form
@Html.EndFrom() - Used to end a form
@Html.DropDownList() - Used to create drop down list
@Html.Hidden() - Used to create hidden fields
@Html.label() - Used for creating HTML label is on the browser
@Html.TextArea() - The TextArea Method renders textarea element on browser
@Html.Password() - This method is responsible for creating password input field on browser
@Html.ListBox() - The ListBox helper method creates html ListBox with scrollbar on browser





List of strongly-Typed HTML Helper :

@Html.HiddenFor()
@Html.LabelFor()
@Html.TextBoxFor()
@Html.RadioButtonFor()
@Html.DropDownListFor()
@Html.CheckBoxFor()
@Html.TextAreaFor()
@Html.PasswordFor()
@Html.ListBoxFor()




List of Templated HTML Helpers :

Display
@Html.Display()
@Html.DisplayFor()
@Html.DisplayName()
@Html.DisplayNameFor()
@Html.DisplayText()
@Html.DisplayTextFor()
@Html.DisplayModelFor()

Edit / Input
@Html.Editor()
@Html.EditorFor()
@Html.EditorForModel()

















************************************************************************************************************************

Entity Framework:

Add NuGet Pkgs:
Microsoft.EntityFrameworkCore.SqlServer : version 5.0.17
Microsoft.EntityFrameworkCore.Tools : version 5.0.17


Models: 
EmployeeEF:

using System.ComponentModel.DataAnnotations;

namespace Day34MVC_EF.Models
{
    public class EmployeeEF
    {
        [Key]
        public int id { get; set; }

        [Required(ErrorMessage = "Required Name")]
        public string name { get; set; }
        public int salary { get; set; }

    }
}



EmployeeEFContext:

using Microsoft.EntityFrameworkCore;


namespace Day34MVC_EF.Models
{
    public class EmployeeEFContext : DbContext
    {
        public EmployeeEFContext() 
        {
        }
        public EmployeeEFContext(DbContextOptions<EmployeeEFContext> options) : base(options)
        {
        }
        public DbSet<EmployeeEF> EmployeeEFs { get; set; }
    }
}




appSettings.json :


{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "EmpCon": "Data Source=DESKTOP-O7LF2JA;Initial Catalog=training;Integrated Security=True"
  }
}






startup.cs

using Day34MVC_EF.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day34MVC_EF
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            string conStr = Configuration.GetConnectionString("EmpCon");
            services.AddDbContext<EmployeeEFContext>(options => options.UseSqlServer(conStr));
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}




Got to:

Tools-> NuGet Package Manager->Package Manager Console

PM> Add-Migration InitialCreate

Build started...
Build succeeded.
To undo this action, use Remove-Migration.



PM> Update-Database

Build started...
Build succeeded.
Done.



PM>


The table gets created in the Db,  SQL Server:
The table is created

select * from employeeEfs;
exec sp_help employeeEfs; 



In the VB MVC Project:
Add Controller+views : 

Right-click project
->Add
-> New Scaffolded items..
->MVC controller with views using Entity Framework
->Add
Provide Model class: EmployeeEF
Data context class: EmployeeEFContext
->Add

All the views etc. are automatically added along
With the Controller





startup.cs

using Day34MVC_EF.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day34MVC_EF
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            string conStr = Configuration.GetConnectionString("EmpCon");
            services.AddDbContext<EmployeeEFContext>(options => options.UseSqlServer(conStr));
            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=EmployeeEFs}/{action=Index}/{id?}");
            });
        }
    }
}

























************************************************************************************************************************************
Exercise:
Student List can be viewed as any user but new students can be added (controlled) by authenticated users only.
Searches are also allowed for any user.
Write the code for the same.







****************************************************************************************************************************************


ChkAuthController:

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication4.Controllers
{
    public class ChkAuthController : Controller     {
        // GET: CheckAuth
        public ContentResult Index()         {
            return Content("Hello, You are Guest.");
        }

        // GET: CheckAuth/AuthorisedOnly  
        [Authorize]
        public ContentResult AuthorisedOnly()         {
            return Content("You are registered user.");
        }
    }
}




***************************************************************************************************************************


ActFilterController:

using Microsoft.AspNetCore.Mvc;

namespace Day34MVC.Controllers
{
    public class ActFilterController : Controller
    {
        [ResponseCache(Duration = 10)]
        public ActionResult Index()
        {
            return View();
        }

    }
}





Index:

<h4>
    @DateTime.Now.ToString();
</h4>
<h5><a href="/ActFilter/Index">IndexPage: Self</a></h5>










************************************************************************************************************************************


HiddenFFController:

using Microsoft.AspNetCore.Mvc;

namespace Day34MVC.Controllers
{
    public class HiddenFFController : Controller
    {
        public IActionResult Index()
        {
            ViewData["Guest"] = "Guest";
            return View();
        }
        public IActionResult Welcome1(string uname)
        {
            ViewData["uname"] = uname;
            return View();
        }
        [HttpPost]
        public IActionResult Welcome2(string uname)
        {
            ViewData["uname"] = uname;
            return View();
        }
    }
}





Index:
<h3>
    <form action="/HiddenFF/Welcome1">
        Enter UserName: <input type="text" value="@ViewData["Guest"]"  name="uname" />
        <br />
        <input type="submit" value="Welcome1"/>
    </form>
    <hr />
    <form action="/HiddenFF/Welcome2" method="post">
        <input type="hidden" value="@ViewData["Guest"]" name="uname" />
        <br />
        <input type="submit" value="Welcome2"/>
    </form>





Welcome1: 

<h1>
    The Welcome1 Page with text box:
    <br />
    Welcome @ViewData["uname"] !!
</h1>




Welcome2:

<h1>
    The Welcome2 Page with hidden form field:
    <br />
    Welcome @ViewData["uname"] !!
</h1>



