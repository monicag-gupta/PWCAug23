using System;
using System.Reflection.Metadata.Ecma335;

namespace Prj1Day1Con
{
    abstract class Animal
    {
        public abstract void handBone();
    }

   class Mammal : Animal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Mammals");
        }
    }
    class Human: Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Human : Working");
        }
    }
    class HumanChild : Human
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Child : Coding");
        }
    }
    class Bat : Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Bat : Flying");
        }
    }
    class Lion : Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Lion : Walking");
        }
    }
    class FossilStudy
    {
        public void findFossil(Mammal m)
        {
            m.handBone();
        }
    }
    class Program
    {

        static void Main()
        {
            FossilStudy fossilStudy=new FossilStudy();
            fossilStudy.findFossil(new Human());
            fossilStudy.findFossil(new HumanChild());
            fossilStudy.findFossil(new Lion());
            fossilStudy.findFossil(new Bat());

        }
    }
}










using System;
using System.Reflection.Metadata.Ecma335;

namespace Prj1Day1Con
{    
   class Mammal
    {
        public virtual void handBone()
        {
            Console.WriteLine("Hand bones of Mammals");
        }
    }
    class Human: Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Human : Working");
        }
    }
    class HumanChild : Human
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Child : Coding");
        }
    }
    class Bat : Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Bat : Flying");
        }
    }
    class Lion : Mammal
    {
        public override void handBone()
        {
            Console.WriteLine("Hand bones of Lion : Walking");
        }
    }
    class FossilStudy
    {
        public void findFossil(Mammal m)
        {
            m.handBone();
        }
    }
    class Program
    {

        static void Main()
        {
            FossilStudy fossilStudy=new FossilStudy();
            fossilStudy.findFossil(new Human());
            fossilStudy.findFossil(new HumanChild());
            fossilStudy.findFossil(new Lion());
            fossilStudy.findFossil(new Bat());

        }
    }
}







using System;
namespace Prj1Day1Con
{    
    class Addition
    {
        //Compile time polymorphism:
        //1. Case 1 and 2 are diff functions as their number of params are different
        //Case 2 with case 3 are diff functions as their data type and number of params are different
        //2. Case 1,3,4 and 5 are diff functions as their data type of params are different
        //3. Case 4 and 5 are diff as the series of data type of param is diff
        public void sum(int x, int y) //case 1
        {
            Console.WriteLine("sum(int {0}, int {1}) : {2}", x, y, (x + y));
        }
        public void sum(int x, int y, int z) //case 2
        {
            Console.WriteLine("sum(int {0}, int {1}, int {2}) : {3}", x, y, z, (x + y + z));
        }
        public void sum(string  x, string  y) //case 3
        {
            Console.WriteLine("sum(string  {0}, string {1}) :  {2}", x, y, (x + y));
        }
        public void sum(string x, int y) //case 4
        {
            Console.WriteLine("sum(string  {0}, int {1}) :  {2}", x, y, (x + y));
        }
        public void sum(int x, string y) //case 5
        {
            Console.WriteLine("sum(int  {0}, string {1}) :  {2}", x, y, (x + y));
        }

    }

    class Program
    {
        static void Main()
        {
            Addition a = new Addition();
            a.sum("dd", "gg");
            a.sum(2, 5);
            a.sum(1, "gh");
            a.sum("jj", 8);
            a.sum(2, 5, 8);
        }
    }
}










using System;
namespace Prj1Day1Con
{
    class myCollection
    {
        private int[] arr = new int[10000];
        private int tos = -1;
        public void add(int i)
        {
            tos = tos + 1;
            arr[tos] = i;
        }
        public void print()
        {
            for (int i = 0; i <= tos; i++)
                Console.WriteLine(arr[i]);
        }

    }
    class Program
    {

        static void Main()
        {
            myCollection c1 = new myCollection();
            c1.add(10);
            c1.add(78);
            c1.add(76);
            c1.add(55);
            c1.print();
        }
    }
}










using System;
namespace Prj1Day1Con
{
    interface IHotDrink
    {
        void prepare();
        int price();
    }

    class Restaurant
    {
        IHotDrink h;
        public Restaurant()
        {
            h = new Tea();
        }
        public Restaurant(IHotDrink h)
        {
            this.h = h;
        }
        public void serve()
        {
            h.prepare();
            Console.WriteLine("Serving the drink!");
        }
        public void bill()
        {
            Console.WriteLine("Your bill amount is : " + h.price());
        }

    }
    class Tea : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Tea!");
        }
        public int price()
        {
            return 65;
        }
    }
    class Coffee : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Coffee!");
        }
        public int price()
        {
            return 199;
        }
    }
    class Soup : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Soup!");
        }
        public int price()
        {
            return 299;
        }
    }
    class Program
    {
        class BadamMilk : IHotDrink
        {
            public void prepare()
            {
                Console.WriteLine("Preparing hot Milk with Almonds!");
            }

            public int price()
            {
                return 400;
            }
        }
        static void Main()
        {
            Restaurant cust1 = new Restaurant(new Tea());
            cust1.serve();
            cust1.bill();
            Restaurant cust2 = new Restaurant(new BadamMilk());
            cust2.serve();
            cust2.bill();
            Restaurant cust3 = new Restaurant(new Soup());
            cust3.serve();
            cust3.bill();
        }
    }
}












using System;
namespace Prj1Day1Con
{
    interface IHotDrink
    {
        void prepare();
        int price();
    }

    class Restaurant
    {
        IHotDrink h;
        public Restaurant()
        {
            h = new Tea();
        }
        public Restaurant(IHotDrink h)
        {
            this.h = h;
        }
        public void serve()
        {
            h.prepare();
            Console.WriteLine("Serving the drink!");
        }
        public void bill()
        {
            Console.WriteLine("Your bill amount is : " + h.price());
        }

    }
    class Tea : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Tea!");
        }
        public int price()
        {
            return 65;
        }
    }
    class Coffee : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Coffee!");
        }
        public int price()
        {
            return 199;
        }
    }
    class Soup : IHotDrink
    {
        public void prepare()
        {
            Console.WriteLine("Preparing hot Soup!");
        }
        public int price()
        {
            return 299;
        }
    }
    class Program
    {
        static void Main()
        {
            Restaurant cust1 = new Restaurant(new Tea());
            cust1.serve();
            cust1.bill();
            Restaurant cust2 = new Restaurant(new Coffee());
            cust2.serve();
            cust2.bill();
            Restaurant cust3 = new Restaurant(new Soup());
            cust3.serve();
            cust3.bill();
        }
    }
}










using System;
namespace Prj1Day1Con
{
    interface Alive //100% abstract
    {
        void eat(); //public abstract method
        void sleep();
        void grow();
    }
    abstract class Animal : Alive //50% abstract class
    {
        public void eat()
        {
            Console.WriteLine("An animal is eating!");
        }

        public abstract void grow();

        public virtual void sleep()
        {
            Console.WriteLine("An animal is sleeping!");
        }
        public abstract void walk();
    }
    class Dog : Animal
    {
        public void bark()
        {
            Console.WriteLine("A Dog is barking Bow Bow!");
        }
        public override void grow() { }
        public override void sleep()
        {
            Console.WriteLine("A dog sleeps very lightly!");
        }
        public override void walk()
        {
            Console.WriteLine("A dog walks cautiously!");
        }


    }
    class Cat : Animal
    {
        public override void grow() { }
        public void meow()
        {
            Console.WriteLine("A Cat is meowing meow meow!");
        }
        public override void walk()
        {
            Console.WriteLine("A Cat walks with cat walk!");
        }
    }
    class AnimalTrainer
    {
        public void train(Animal a)
        {
            a.eat();
            a.sleep();
            if (a is Dog)
            {
                Dog d = (Dog)a;  //parent is casted into child object : Downcasting
                d.bark();

            }
            if (a is Cat)
            {
                Cat c = (Cat)a;
                c.meow();

            }
        }
    }
    class Program
    {
        static void Main()
        {
            Animal tom = new Dog(); // Animal -> eat and sleep ; Cat -> eat, sleep, meow
            tom.eat();
            tom.sleep();
            if (tom is Cat)
            {
                Cat c = (Cat)tom;
                c.meow();
            }
            Animal tiger = new Dog(); //Dog object referred by Animal object; Upcasting
            AnimalTrainer trainer = new AnimalTrainer();
            trainer.train(tiger);

        }
    }
}












using System;
namespace Prj1Day1Con
{
   class Animal
    {
        public void eat()
        {
            Console.WriteLine("An animal is eating!");
        }
        public virtual void sleep()
        {
            Console.WriteLine("An animal is sleeping!");
        }
    }
    class Dog : Animal
    {
        public void bark()
        {
            Console.WriteLine("A Dog is barking Bow Bow!");
        }
        public override void sleep()
        {
            Console.WriteLine("A dog sleeps very lightly!");
        }

    }
    class Cat : Animal
    {
        public void meow()
        {
            Console.WriteLine("A Cat is meowing meow meow!");
        }
    }
    class AnimalTrainer
    {
        public void train(Animal a)
        {
            a.eat();
            a.sleep();
            if(a is Dog)
            {
                Dog d = (Dog)a;  //parent is casted into child object : Downcasting
                d.bark();

            }
            if (a is Cat)
            {
                Cat c = (Cat)a;
                c.meow();

            }
        }
    }
    class Program
    {
        static void Main()
        {
            Animal tiger = new Dog(); //Dog object referred by Animal object; Upcasting
            AnimalTrainer trainer = new AnimalTrainer();
            trainer.train(tiger);

        }
    }
}





using System;
namespace Prj1Day1Con
{
    class Emp
    {
        int id;
        string name;
        public Emp() { }
        public Emp(int id, string name) { this.id = id; this.name = name; }

        public override string ToString()
        {
            return "Emp : Id :" + id + " Name : " + name;
        }
    }
    class SalEmp : Emp
    {

    }
    class WagesEmp : Emp
    {

    }
    class Program
    {
        static void Main()
        {
            SalEmp e1=new SalEmp();
            Console.WriteLine("e1 is Emp ??" + (e1 is Emp));
            Console.WriteLine("e1 is Object ??" + (e1 is Object));
            Console.WriteLine("e1 is SalEmp ??" + (e1 is SalEmp));
            Console.WriteLine("e1 is WagesEmp ??" + (e1 is WagesEmp));

        }
    }
}





using System;
namespace Prj1Day1Con
{
    class Emp //blue print of any object of type Emp. It is the encapsulated form of the class Emp
    {
        private int id; //data hiding
        private string name;
        public void input(int id, string name) //data abstraction
        {
            this.id = id;
            this.name = name;
        }
        public Emp() //Constructor
        {
            id = 100;
            name = "Guest";
        }
        public Emp(int id, string name) //data abstraction //parameterized Constructor
        {
            this.id = id;
            this.name = name;
        }
        public override string ToString()   //Overriden ToString()
        {
            return "Current Emp details: Id : " + id + " Name : " + name;
        }

    }
    class Program
    {
        static void Main()
        {
            Emp e1 = new Emp(); //new assigns space for an object in memory
            Emp e2 = new Emp(102, "Abc");
            Console.WriteLine(e1);
            Console.WriteLine(e2);

        }
    }
}












using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    
    class Program
    {
        static int sum2(int[] arr)
        {
            int sum = 0;
            for (int k = 0; k < arr.Length; k++) sum += arr[k];
            return sum;
        }
        static int sum(params int[] i)
        {
            int sum = 0;
            for (int k = 0; k < i.Length; k++) sum += i[k];
            return sum;
        }
        public static void Main()
        {
            int[] a = new int[] { 1, 4, 2, 8, 9 };
            int s = sum(1, 2, 3, 4); //10  //possible in params, not possible in array
            Console.WriteLine(s);
            s = sum2(new int[] { 1, 2, 3, 4 }); //10
            Console.WriteLine(s);  
            s = sum(a); //24  //possible in params
            Console.WriteLine(s);
            s = sum2(a); //24
            Console.WriteLine(s);
            s = sum(11, 22); //33
            Console.WriteLine(s);
        }
    }
}

/*
 


 */







using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    
    class Program
    {
        static public void scholar(string fname, string lname, int age = 20,
          string branch = "Computer science")
        {
            Console.WriteLine("Name: {0} {1}", fname, lname);
            Console.WriteLine("Age: {0} \n Branch: {1}", age, branch);
        }
        static void Main()
        {
            scholar("FN1", "LN1"); //using both age and branch default values
            scholar("FN2", "LN2", 22); //using only branch default value
            scholar("FN3", "LN3", 30, "IT"); //Providing all values
          //scholar("FN3", "LN3", "IT"); //Error: third parameter is an int; while string is passed
        }

    }
}

/*
 
Name: FN1 LN1
Age: 20
 Branch: Computer science
Name: FN2 LN2
Age: 22
 Branch: Computer science
Name: FN3 LN3
Age: 30
 Branch: IT


 */








using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    class A
    {
        public int a;
    }
    class Program
    {
        //four modifiers for functions:
        //1. value for primitives/Reference for objects: default way of using parameters
        //2. in : this clause makes the parameter readonly; not modified in the function
        //3. out : the result expected from a function. no input value required
        //4. ref : even the values for primitives are called by reference
       static void fn1(int a)
        {
            Console.WriteLine("fn1 : " + a);
            a = a + 10;
            Console.WriteLine("fn1 modified : " + a);
        }
        static void fn1(A a)
        {
            Console.WriteLine("fn1 : " + a.a);
            a.a = a.a + 10;
            Console.WriteLine("fn1 modified : " + a.a);
        }
        static void fn2(in int a)
        {
            Console.WriteLine("fn2 : " + a);
            int b = a;
            //a =a+10; //assignment not possible
        }
        static void fn3(out int a)
        {
            a = 10;
            int b = a;
            Console.WriteLine("fn3 : " + a);
            
        }
        static void fn4(ref int a)
        {
            Console.WriteLine("fn4 : " + a);
            a = a + 10;
            Console.WriteLine("fn4 modified : " + a);

        }

        static void Main(string[] args)
        {
            int a = 10;
            Console.WriteLine("Before Fn1: int a = " + a);
            fn1(a);
            Console.WriteLine("After Fn1: int a = " + a);
            A oa = new A();
            oa.a = 10;
            Console.WriteLine("\nBefore Fn1: A oa'a = " + oa.a);
            fn1(oa);
            Console.WriteLine("After Fn1: A oa'a = " + oa.a);
            Console.WriteLine("*********************");

            int b = 10;
            fn2(in b); //b should be assigned a value before fn call

            int c;
            fn3(out c); //ouput is expected from fn3.

            int p = 10;
            fn4(ref p); //p must have a value;  plus p can change the value also in the fn call.








        }
    }
}

/*
 



 */











using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    class Program
    {
        static int c = 0;

        static string find (int a, int[] arr, int l)
        {
            Console.WriteLine("Data search : #" + c++);
            if (a == arr[l-1])
            {
                return a + " is Found";
            }
            else if(c == arr.Length)
            {
                return a + " is not found";
            }
            else
            {
                return find(a, arr, l - 1);
            }
                

        }


        static void fn(int i)
        {
            Console.WriteLine("Iteration: {0}", i);
            if(i>0)
                fn(i - 1);
        }
        //sum of natural num series : sum(n) : 1+2+..n  = n + sum(n-1) till sum(1)
        static int sum(int n)
        {
            if (n <= 0) return 0;
            return n + sum(n - 1);
        }

        static void Main(string[] args)
        {
            int[] arr = { 1, 9, 3, 8, 5, 6, 7, 8, 2, 6 };
            string s = find(10, arr, arr.Length);
            Console.WriteLine(s);
            Console.WriteLine("Recusive Call:");
            fn(5);
            Console.WriteLine("Recusive sum Call:\nSum(5) : " + sum(5));

        }
    }
}

/*
 



 */










using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    class Program
    {
        static int c = 0;

        static string find (int a, int[] arr, int l)
        {
            Console.WriteLine("\nData search : #" + c++);
            if (a == arr[l-1])
            {
                return a + " is Found";
            }
            else if(c == arr.Length)
            {
                return a + " is not found";
            }
            else
            {
                return find(a, arr, l - 1);
            }
                

        }
        static void Main(string[] args)
        {
            int[] arr = { 1, 9, 3, 8, 5, 6, 7, 8, 2, 6 };
            string s = find(10, arr, arr.Length);
            Console.WriteLine(s);
        }
    }
}

/*
 



 */







using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;
using System.Security.Cryptography.X509Certificates;

namespace Prj1Day1Con
{
    class Program
    {
        static int c = 0;

        static string find (int a, int[] arr, int l)
        {
            Console.WriteLine("\nData search : #" + c++);
            if (a == arr[l-1])
            {
                return a + " is Found";
            }
            else if(c == arr.Length)
            {
                return a + " is not found";
            }
            else
            {
                return find(a, arr, l - 1);
            }
                

        }
        static void Main(string[] args)
        {
            int[] arr = { 1, 9, 3, 8, 5, 6, 7, 8, 2, 6 };
            string s = find(10, arr, arr.Length);
            Console.WriteLine(s);
        }
    }
}

/*
 



 */







using System;
using System.Diagnostics.CodeAnalysis;
using System.Net;

namespace Prj1Day1Con
{
    class Program
    {

        int sum(int a, int b)
        {
            int c = a + b;
            return c;

        }
        static int add(int a, int b)
        {
            return a + b;
        }
        static void Main(string[] args)
        {
            Program p = new Program(); 
            int res = add(3, 4);
            int r = p.sum(6, 7);
            int re = Program.add(1, 4);
            Console.WriteLine(res + "   " + re + " " + r);

        }
    }
}

/*
 



 */













using System;
using System.Net;

namespace Prj1Day1Con
{
    class Program
    {
       static void Main(string[] args)
        {
            Console.WriteLine("This example is for cmd args");
            int c = 1;
            foreach(string arg in args)
            {
                Console.WriteLine("Arg at #{0} : {1}",(c++), arg);

            }
        }
    }
}

/*
 
considering Hello World ! to be the cmd line arg,
This example is for cmd args
Arg at #1 : Hello
Arg at #2 : world
Arg at #3 : !


right click on project name in solution explorer -> 
properties -> debug -> general -> 
open debug launch profiles UI -> command line arguments -> 
type three arguments: Hello world ! -> 
close properties window that you have opened and run the program.cs file
right click on project name in solution explorer -> properties -> debug -> general -> open debug launch profiles UI -> command line arguments -> type three arguments: Hello world ! -> close properties window that you have opened and run the program.cs file
done cmd
 */








using System;

namespace Prj1Day1Con
{
    class Program
    {
       
        static void Main()
        {
            int[] arr = { 12, 2, 39, 43, 51, 6 };
            foreach(int ele in arr)
            {
                Console.WriteLine("Processing Element : " + ele);
            }
        }
    }
}

/*
 
Processing Element : 12
Processing Element : 2
Processing Element : 39
Processing Element : 43
Processing Element : 51
Processing Element : 6

*/










using System;

namespace Prj1Day1Con
{
    class Program
    {
       
        static void Main()
        {
            Console.Write("Iteration:");
            for(int i=0; i < 10; i++)
            {
                if(i == 4)
                {
                    continue;
                }
                if (i == 7)
                    break;
                Console.Write("\t" + i);
            }
            Console.WriteLine();
            string name;
            do
            {
                Console.WriteLine("Enter your name: (More than 2 char)");
                name = Console.ReadLine();
            } while (name.Length <= 2);

            int age = -1;
            while(age <0 || age >= 65)
            {
                Console.WriteLine("Enter Age: (0-64)");
                age = Convert.ToInt32(Console.ReadLine());
                if (age < 0 || age > 150)
                {
                    Console.WriteLine("Ghosts are NOT allowed to use my S/W");
                }
                if (age >= 65 && age <= 150)
                {
                    Console.WriteLine("You Can Enjoy your Retirement Age..");
                }
            }
            Console.WriteLine("Welcome {1}! You have {0} years for retirement!" , (65-age), name);
        }
    }
}

/*
 
Iteration:      0       1       2       3       5       6
Enter your name: (More than 2 char)
MG
Enter your name: (More than 2 char)
Abc
Enter Age: (0-64)
-9
Ghosts are NOT allowed to use my S/W
Enter Age: (0-64)
1090
Ghosts are NOT allowed to use my S/W
Enter Age: (0-64)
18
Welcome Abc! You have 47 years for retirement!


*/














using System;

namespace Prj1Day1Con
{
    class Program
    {
        enum Weekday { Sun=1, Mon, Tue, Wed, Thurs, Fri, Sat}
        static void Main()
        {
            Console.WriteLine("Enter current Weekday(1 -7):");
            int wd = Convert.ToInt32(Console.ReadLine());
            switch (wd)
            {
                case 1:
                    Console.WriteLine("First Day of the Week: " + (Weekday)wd);
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    Console.WriteLine("{0}th Day of the Week: {1}",wd, (Weekday)wd);
                    break;
                case 7:
                    Console.WriteLine("Last Day of the Week: " + (Weekday)wd);
                    break;
                default:
                    Console.WriteLine("Invalid Day number entered!");
                    break;

            }

        }
    }
}

/*

Enter current Weekday(1 -7):
5
5th Day of the Week: Thurs

*/















using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int marks = 90;
            if (marks > 100)
            {
                Console.WriteLine("Invalid marks (more than 100)");

            }
            else if (marks < 0 )
            {
                Console.WriteLine("Invalid marks(less than 0)");

            }
            else if (marks >= 0 && marks <50)
            {
                Console.WriteLine("Failed!!!!!!");

            }
            else if (marks >= 50 && marks < 75)
            {
                Console.WriteLine("Passed the Exam!!");

            }
            else if (marks >= 75 && marks <= 100)
            {
                Console.WriteLine("Excellent!!!!");

            }
            else
            {
                Console.WriteLine("Imposible reach!");
            }
        }
    }
}

/*

*/









using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int x = 16;
            int y = 12;
            int max = x >= y ? x : y;
            Console.WriteLine("Max of {0}, {1} is : {2}",x,y,max);
        }
    }
}

/*

*/










using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int a = 16;
            Console.WriteLine("Original a :  {0} ", a);
            a += 16;  //a=a+16
            Console.WriteLine("a +=16 :  {0} ", a); //32
            a = 16;
            a -= 8;
            Console.WriteLine("a -=8 :  {0} ", a); //8
            a = 16;
            a /= 8;
            Console.WriteLine("a /=8 :  {0} ", a); //2
            a = 16;
            a *= 4;
            Console.WriteLine("a *=4 :  {0} ", a); //64
            a = 16;
            a %= 3;
            Console.WriteLine("a %=3 :  {0} ", a); //1
            a = 16;
            a <<= 2; //a =a<<2
            Console.WriteLine("a <<=2 :  {0} ", a); //64
            a = 16;
            a >>= 2; //a =a>>2
            Console.WriteLine("a >>=2 :  {0} ", a); //4
            a = 16;
            a |= 2; //a =a|2
            Console.WriteLine("a |=2 :  {0} ", a); //18
            a = 16;
            a &= 19; //a =a & 19
            Console.WriteLine("a &=19 :  {0} ", a); //16
            a = 16;
            a ^= 2; //a =a^2
            Console.WriteLine("a ^=2 :  {0} ", a); //18
        }
    }
}

/*
Original a :  16
a +=16 :  32
a -=8 :  8
a /=8 :  2
a *=4 :  64
a %=3 :  1
a <<=2 :  64
a >>=2 :  4
a |=2 :  18
a &=19 :  16
a ^=2 :  18
*/












using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("2147483647 << 1 : " + (2147483647 << 1)); 
            //-ve value as this is the largest +ve value, when shifted 
            //will make the last sign bit to be 1
            Console.WriteLine("10<<2 : " + (10 << 2)); // 40
            Console.WriteLine("10<<1 : " + (10 << 1));  //20
            Console.WriteLine("16>>2 : " + (16 >> 2)); //4
            Console.WriteLine("16>>1 : " + (16 >> 1)); //8

        }
    }
}

/*
2147483647 << 1 : -2
10<<2 : 40
10<<1 : 20
16>>2 : 4
16>>1 : 8
*/











using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int a = 10;
            int b = 5;
            Console.WriteLine("T && T : 10>5 && 10>=5 :  " + (10 > 5 && 10 >= 5));
            Console.WriteLine("T && F : 10>5 && 10<5 :  " + (10 > 5 && 10 < 5));
            Console.WriteLine("F && T : 10<=5 && 10>=5 :  " + (10 <= 5 && 10 >= 5));
            Console.WriteLine("F && F : 10<5 && 10<=5 :  " + (10 < 5 && 10 <= 5));
            Console.WriteLine("T || T : 10>5 || 10>=5 :  " + (10 > 5 || 10 >= 5));
            Console.WriteLine("T || F : 10>5 || 10<5 :  " + (10 > 5 || 10 < 5));
            Console.WriteLine("F || T : 10<=5 || 10>=5 :  " + (10 <= 5 || 10 >= 5));
            Console.WriteLine("F || F : 10<5 || 10<=5 :  " + (10 < 5 || 10 <= 5));
            Console.WriteLine("!T : !(10>5) :  {0}\n!F : !(10<5) : {1} ", !(10 > 5) , !(10 < 5));

        }
    }
}











using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int a = 10;
            int b = 5;
            bool res = a > b;
            Console.WriteLine("Here a={4},b={5}\na>b : {0} \n a<b : {1}\n a<=b : {2}\n a>=b : {3}", res,
                (a < b), (a <= b), (a >= b), a, b);
            Console.WriteLine("a==b: {0} \n a!=b : {1} ", (a == b), (a != b));
        }
    }
}
/*
  Here a=10,b=5
a>b : True
 a<b : False
 a<=b : False
 a>=b : True
a==b: False
 a!=b : True
*/












using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Bitwise Operations: ");
            Console.WriteLine("4 | 5 = " + (4 | 5) + " \n4 & 5 = " + (4 & 5)); //5 .. 4
            Console.WriteLine("Not 4 = " + (~4) );  //-5
            Console.WriteLine("4 ^ 5 = " + (4 ^ 5) ); //1

        }
    }
}














//Arithmetic Operators:
using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int x = 10, y = 20, z = 0, d=3;
            int res = x + y;
            Console.WriteLine("Addition Operator  : {0} + {1} = {2}", x, y, res);
            res = x - y;
            Console.WriteLine("Subtraction Operator  : {0} - {1} = {2}", x, y, res);
            res = x * y;
            Console.WriteLine("Multiplication Operator  : {0} * {1} = {2}", x, y, res);
            res = y / x;
            Console.WriteLine("Division Operator  : {0} / {1} = {2}", y, x, res);
            res = z == 0 ? 0 :  y / z;
            Console.WriteLine("Division Operator (divide by zero breaks the program abruptly) : {0} / {1} = {2}", y, z, res);
            res = x % d;
            Console.WriteLine("Remainder Operator  : {0} % {1} = {2}", x, d, res);
            res = x++; //post increment : res = x , x = x + 1
            Console.WriteLine("Post Increment Operator  : (For x = 10) : x++ : x = {0} and res = {1}",x, res);
            x = 10;
            res = ++x; //pre increment : x = x + 1, res =x
            Console.WriteLine("Pre Increment Operator  : (For x = 10) : ++x : x = {0} and res = {1}", x, res);
            x = 10;
            res = x--; //post decrement : res = x , x = x - 1
            Console.WriteLine("Post Decrement Operator  : (For x = 10) : x-- : x = {0} and res = {1}", x, res);
            x = 10;
            res = --x; //pre decrement : x = x - 1, res =x
            Console.WriteLine("Pre Decrement Operator  : (For x = 10) : --x : x = {0} and res = {1}", x, res);
        }
    }
}















using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int x,y;
            Console.WriteLine("Enter x: ");
            x = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Enter y: ");
            y = Int32.Parse(Console.ReadLine());
            Console.WriteLine("Read values: x :" + x + ", y : " + y); 
            Console.WriteLine("Program ends!!");
        }
    }
}













using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Enter your name:");
            string name = Console.ReadLine();
            Console.WriteLine("Entered name: " + name);
            Console.WriteLine("Enter your Grade:");
            char grade = Convert.ToChar(Console.Read());
            Console.WriteLine("Entered grade: " + grade);

            // ReadLine : reads till we pree Enter key
            //ReadKey : reads one key press do not wait for delimiter like space, enterkey etc.
            //Read : reads the ASCII value of the key press, it waits for the delimiter.
            Console.WriteLine("Press any Key to continue..");
            Console.ReadKey();
            Console.WriteLine("Press Enter key to continue..");
            Console.ReadLine();
            Console.WriteLine("Enter a value, then press Enter key to continue..");
            Console.Read();

            Console.WriteLine("Program ends!!");
        }
    }
}










using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int[] arr1 = { 1, 2, 3, 4}; //array has length 4 elements, and index are 0 to 3
            arr1[2] = 70;
            Console.WriteLine("The elements  are: " + arr1[0] + ", " + arr1[1] + ", " + arr1[2] + ", " + arr1[3]);
            Console.WriteLine("Printing the array as a string: " + arr1);
            Console.WriteLine("Length of the array : " + arr1.Length);
            int[] arr2 = new int[5];
            int[] arr3 = new int[4]{ 1, 2, 3, 4 };
            int[] arr4 = new int[] { 1, 2, 3, 4 };

        }
    }
}











Pointers: Pointers are considered unsafe for high level languages.
So pointers are coded inside unsafe block in C#.
Any unsafe block cannot exist in a safe project. 
So declare the project to be unsafe.


using System;

namespace PointerUnsafePrj
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int x = 10;
            unsafe
            {
                int* p = &x;
                int a = (int)p;
                Console.WriteLine((*p) + " has address as : " + a);
            }

        }
    }
}








using System;

namespace Prj1Day1Con
{
    enum Color : byte
    {
        Red = 1,
        Green = 2,
        Blue = 4,
        Violet = 5,
        BlueViolet = Blue | Violet,
        Black = 0,
        White = Red | Green | Blue
    }

    class Program
    {
        enum Month { Jan=1, Feb, Mar, Apr, May, Jun, Jly, Aug, Sep, Oct, Nov, Dec };

        static void Main()
        {
            Month first = Month.Jan;
            Month second = (Month)2;
            Month last = first + 11;
            int march = (int)Month.Mar;
            Console.WriteLine("First Month : " + first + " has Month number : " + (int)first);
            Console.WriteLine("Last Month : " + last + " has Month number : " + (int)last);
            Color c = Color.White;
            System.Console.WriteLine(c);   // White
            System.Console.WriteLine((int)c);// 7
            Color c2 = Color.BlueViolet;
            System.Console.WriteLine(c2);   // BlueViolet
            System.Console.WriteLine((int)c2);// 5
        }
    }
}













using System;

namespace Prj1Day1Con
{
    class Program
    {
        enum Month { Jan=1, Feb, Mar, Apr, May, Jun, Jly, Aug, Sep, Oct, Nov, Dec };

        static void Main()
        {
            Month first = Month.Jan;
            Month second = (Month)2;
            Month last = first + 11;
            int march = (int)Month.Mar;
            Console.WriteLine("First Month : " + first + " has Month number : " + (int)first);
            Console.WriteLine("Last Month : " + last + " has Month number : " + (int)last);





        }
    }
}














using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            const int i = 10;
            const int l = 20;
            int j = 10;
            int k = 20;
            const int a = i + l;  //j + k;

            Console.WriteLine("A const cannot be re-assigned");
            Console.WriteLine("A const cannot be assigned to non const variables operating on values");
            Console.WriteLine("A const can be assigned to const variables defined priorly");





        }
    }
}














using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {

            char c1 = '\n';
            char c2 = '\t';
            char c3 = '\a';
            char c4 = '\u0144';
            char c5 = '\'';
            char c6 = '\"';
            char c7 = '\\';
            Console.WriteLine("There is a new line " + c1 + "between us! ");
            Console.WriteLine("There is a tab space " + c2 + "between us! ");
            Console.WriteLine("This is a beep sound " + c3);
            Console.WriteLine("There is a unicode char  " + c4 + "between us! ");
            Console.WriteLine("This text is under single quotes " + c5 + "Text!" + c5 + ". That's it!");
            Console.WriteLine("This text is under double quotes " + c6 + "Text!" + c6 + ". That's it!");
            Console.WriteLine("This text is has a slash printed out " + c7 + ". That's it!");



        }
    }
}



/*
There is a new line
between us!
There is a tab space    between us!
This is a beep sound
There is a unicode char  nbetween us!
This text is under single quotes 'Text!'. That's it!
This text is under double quotes "Text!". That's it!
This text is has a slash printed out \. That's it!
*/









using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            byte b = 127;
            Console.WriteLine("Wrapper of byte: " + b.GetType());

            short i = 127;
            Console.WriteLine("Wrapper of short: " + i.GetType());

            bool t = true;
            Console.WriteLine("Wrapper of bool: " + t.GetType());

            int x = 10;
            Console.WriteLine("Wrapper of int: " + x.GetType());

            long y = 100l;
            Console.WriteLine("Wrapper of long: " + y.GetType());

            uint ux = 100;
            Console.WriteLine("Wrapper of uint: " + ux.GetType());

            char c = 'A';
            Console.WriteLine("Wrapper of char: " + c.GetType());

            decimal d = (decimal)3.4;
            Console.WriteLine("Wrapper of decimal: " + d.GetType());


            float f = (float)3.4;
            Console.WriteLine("Wrapper of float: " + f.GetType());

            double dd = 3.4;
            Console.WriteLine("Wrapper of double: " + dd.GetType());




        }
    }
}

/*
Wrapper of byte: System.Byte
Wrapper of short: System.Int16
Wrapper of bool: System.Boolean
Wrapper of int: System.Int32
Wrapper of long: System.Int64
Wrapper of uint: System.UInt32
Wrapper of char: System.Char
Wrapper of decimal: System.Decimal
Wrapper of float: System.Single
Wrapper of double: System.Double
*/













using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int x = 10;
            int y = 20;
            int z = x + y;
            //x = 90;
            Console.WriteLine("The sum of " + x + " + " + y + " = " + z);
            z = x * y;
            Console.WriteLine("The product of " + x + " * " + y + " = " + z);

        }
    }
}










using System;

namespace Prj1Day1Con
{
    class Program
    {
        static void Main()
        {
            int x = 10;
            int y = 20;
            int z = x + y;
            
            Console.WriteLine("The sum of " + x + " + " + y + " = " + z);
            
        }
    }
}
