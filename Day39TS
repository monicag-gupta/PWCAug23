





let isDone: boolean = false; Â 
console.log(isDone);






var i : any = null;
console.log(i);  //null
var j : any;
console.log(j); //undefined




let first: number = 12.0;             // number   
let second: number = 0x37CF;          // hexadecimal  
let third: number = 0o377 ;           // octal  
let fourth: number = 0b111001;        // binary   
  
console.log(first);           // 12  
console.log(second);          // 14287  
console.log(third);           // 255  
console.log(fourth);          // 57 








Hello.ts:

var message:string = "Hello World"; 
console.log(message);


To compile the code and convert it to JS file:

PS C:\Users\monica\Desktop\TSEgs> tsc Hello.ts


we can see that a new file is generated as Hello.js
Execute this Hello.js in nodejs terminal:

PS C:\Users\monica\Desktop\TSEgs> node Hello.js
Hello World










If tsc is not working, and giving an error as:
because running scripts is disabled on this system. For more information,   
see about_Execution_Policies at 
https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ tsc abc.ts
+ ~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException    
    + FullyQualifiedErrorId : UnauthorizedAccess
Then solve it by:
Open windows + R
Type : Powershell
Open as Administrator. Then type any one of the following command :
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
set-executionpolicy remotesigned
And select option : A




Compiler flag & Description:
--help
Displays the help manual
--module
Load external modules
--target
Set the target ECMA version
--declaration
Generates an additional .d.ts file
--removeComments
Removes all comments from the output file
--out
Compile multiple files into a single output file
--sourcemap
Generate a sourcemap (.map) files
--module noImplicitAny
Disallows the compiler from inferring the any type
--watch
Watch for file changes and recompile them on the fly




TS Data Types:
Any 
    Primitive Types:
        Number, Boolean, String  , null, void, undefined
    Object Types 
        Classes, Modules, Interfaces, enum, Arrays

