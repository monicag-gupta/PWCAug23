
function disp(s1:string):void; 
function disp(n1:number,s1:string):void; 
function disp(n1:number,n2:number):void; 
function disp(n1:number,s1:string, s2:string):void; 

function disp(x:any,y?:any, z?:string):void { 
   console.log(x); 
   console.log(y); 
   console.log(z); 
} 
disp("abc") 
disp(1,"xyz");
disp(1,7);
// disp(2);







****************************************************************************************


var foo1 = (x:number)=>10 + x; 
console.log(foo1(100));  
    //outputs 110

var foo2 = (x:number)=> {    
   x = 20 + x 
   console.log(x)  
} 
foo2(100); 
// outputs 120


let Print = () => console.log("Hello Coders!");  
Print();  //Hello Coders!





*******************************************************************************************



//Rest Parameters / called Param Array in C++, params in c#, varArray in Java
function addNumbers(...nums:number[]) {  
    var i;   
    var sum:number = 0; 
    
    for(i = 0;i<nums.length;i++) { 
       sum = sum + nums[i]; 
    } 
    console.log("sum of the numbers",sum) 
 } 

 function addNumbersArr(nums:number[]) {  
    var i;   
    var sum:number = 0; 
    
    for(i = 0;i<nums.length;i++) { 
       sum = sum + nums[i]; 
    } 
    console.log("sum of the numbers",sum) 
 } 
 var intArr: number[] = [4,5,2,8];
 addNumbers(1,2,3) 
 addNumbers(10,10,10,10,10)
 addNumbers(...intArr);
 addNumbersArr(intArr);
 addNumbersArr([1,2,3]) 
 addNumbersArr([10,10,10,10,10])











**********************************************************************************





function calculate_discount(price:number,rate:number = 0.50) { 
    var discount = price * rate; 
    console.log("Discount Amount: ",discount); 
 } 
 calculate_discount(1000) 
 calculate_discount(1000,0.30)







********************************************************************************************************







function disp_details(id:number,name:string,mail_id?:string) { 
    console.log("ID: ", id); 
    console.log("Name: ",name); 
    
    if(mail_id!=undefined)  
     console.log("Email Id: ",mail_id); 
 }
 disp_details(123,"John");
 disp_details(111,"mary","mary@xyz.com");
 







***********************************************************************************




enum Direction {  East,  West,  North,  South  };  
var dir: Direction = Direction.North;  
function getDirection() {  
    switch (dir) {  
        case Direction.North: console.log('You are in North Direction');  
            break;  
        case Direction.East: console.log('You are in East Direction');  
            break;  
        case Direction.South: console.log('You are in South Direction');  
            break;  
        case Direction.West: console.log('You are in West Direction');  
            break;  
    }  
}  
getDirection();  //You are in North Direction






**********************************************************************************************





let fruits: Array<string> = ['Apple', 'Orange', 'Banana']; 
let fruit: string[] = ['Apple', 'Orange', 'Banana'];  
console.log("fruits : " + fruits);
console.log("fruit : " + fruit);

let arr123:number[];   
arr123 = [1, 2, 3, 4]   
console.log("Array[0]: " +arr123[0]);   //Array[0]: 1
console.log("Array[1]: " +arr123[1]);  //Array[1]: 2

var mArray:number[][] = [[1,2,3],[5,6,7]] ;  
console.log(mArray[0][0] + " " + mArray[0][1] + " " + mArray[0][2]); // 1 2 3
console.log(mArray[1][0]+ " " + mArray[1][1]+ " " + mArray[1][2]);  //5 6 7


let arr:string[] = new Array("TypeScript","version","5","is cool");  
for(var i = 0;i<arr.length;i++) {   
   console.log(arr[i]);  
} 
// TypeScript
// version
// 5
// is cool 




let index:any;     
for(index in arr) {   
   console.log(arr[index])   
}  
// TypeScript
// version
// 5
// is cool 




let ele:any;
for(ele of arr) {   
   console.log(ele)   
}  
// TypeScript
// version
// 5
// is cool 




function display(arr_values:string[]) {  
    for(let i = 0;i<arr_values.length;i++) {   
       console.log(arr_values[i]);  
    }    
 }  
 //Calling arrays in function  
 display(arr);  
// TypeScript
// version
// 5
// is cool 





let arr1 = [ 1, 2, 3];  
let arr2 = [ 4, 5, 6];  
//Create new array from existing array  
let copyArray = [...arr1];    //spread operator ...array_name gives the elements of array 
console.log("CopiedArray: " +copyArray);   //CopiedArray: 1,2,3
//Create new array from existing array with more elements  
let newArray = [...arr1, 7, 8];  
console.log("NewArray: " +newArray);   //NewArray: 1,2,3,7,8
//Create array by merging two arrays  
let mergedArray = [...arr1, ...arr2];  
console.log("MergedArray: " +mergedArray);   //MergedArray: 1,2,3,4,5,6




arr = new Array("TypeScript","JavaScript","Java","C++","C#");
console.log("arr: " + arr);
let arr22:string[] = new Array("MVC", "HTML5", "ECMAScript");
let arr3=arr.concat(arr22);
console.log("arr3 : " + arr3);
console.log("arr before splice is: " + arr);
let arr4=arr.splice(2,5);
console.log("arr4 : " + arr4);
console.log("arr now is: " + arr);
arr = new Array("TypeScript","JavaScript","Java","C++","C#");
console.log("arr before slice is: " + arr);
arr4=arr.slice(2,5);
console.log("sliced arr4 : " + arr4);
console.log("arr now is: " + arr);
arr = new Array("HTML5", "TypeScript","JavaScript","Java","C++","C#");
arr.push("CSS");
console.log("arr after push of 'CSS' at end : " + arr);
console.log("type of arr: " + (typeof arr));
console.log("Is arr instance of array? " + (arr instanceof Array));
console.log("Length of arr: " + arr.length);
console.log("Sorted arr: " + arr.sort());
console.log("Joining arr by space: " + arr.join(" "));
console.log("Reversed arr: " + arr.reverse());
console.log("Pop last element in arr: " + arr.pop());
console.log("shift first element in arr: " + arr.shift());
arr.unshift("Angular","ASP");
console.log("arr now is: " + arr);


*****************************************************************************************************



var x : any ="5";
var y : any = 5;
console.log(x==y); //true
console.log(x===y); //false




****************************************************************************



console.log(x); //hoisting //undefined
var x=10; // declaration and assignment
var x=20; // redeclaration
x=30; //reassignment

//console.log(y); //hoisting not in let
let y=10; // declaration and assignment
//let y=20; // redeclaration not in let
y=30; //reassignment

//console.log(z); //hoisting not in const
const z=10; // declaration and assignment
// const z=20; // redeclaration not in const
// z=30; //reassignment not in const


//global declaration and assignment
var gx=10;
let gy=20;
const gz=30;

function fn():void{
    console.log("Inside function using global vars: ")
    console.log(gx);
    console.log(gy);
    console.log(gz);

    //local declaration and assignment
    var lx=10;
    let ly=20;
    const lz=30;

    console.log("Inside function using local vars: ")
    console.log(lx);
    console.log(ly);
    console.log(lz);


    if(5>3){
        //block declaration and assignment
        var bx=10;
        let by=20;
        const bz=30;

        console.log("Inside block using block vars: ")
        console.log(bx);
        console.log(by);
        console.log(bz);

    }
    console.log("Outside block using block var bx: ")
    console.log(bx);
    // console.log(by);
    // console.log(bz);
}

fn();

// local variables are not allowed outside the function scope
console.log("Outside function using local vars: Not possible : ")
// console.log(lx);
// console.log(ly);
// console.log(lz);



**********************************************************************************************







let empName: string = "John's brother";   
let empDept: string = 'IT';   
  
// Before-ES6  
let output1: string = empName + " works in the " + empDept + " department.";   
  
// After-ES6  
let output2: string = `${empName} works in the ${empDept} department.`;   
  
console.log(output1);//John works in the IT department.   
console.log(output2);//John works in the IT department. 










let empName: string = "John";  //double quote   
let empDept: string = 'IT';    //single quote
  
// Before-ES6  
let output1: string = empName + " works in the " + empDept + " department.";   
  
// After-ES6  
let output2: string = `${empName} works in the ${empDept} department.`;   //back quote: use variables in XML style
  
console.log(output1);//John works in the IT department.   
console.log(output2);//John works in the IT department. 






let isDone: boolean = false; Â 
console.log(isDone);






var i : any = null;
console.log(i);  //null
var j : any;
console.log(j); //undefined




let first: number = 12.0;             // number   
let second: number = 0x37CF;          // hexadecimal  
let third: number = 0o377 ;           // octal  
let fourth: number = 0b111001;        // binary   
  
console.log(first);           // 12  
console.log(second);          // 14287  
console.log(third);           // 255  
console.log(fourth);          // 57 








Hello.ts:

var message:string = "Hello World"; 
console.log(message);


To compile the code and convert it to JS file:

PS C:\Users\monica\Desktop\TSEgs> tsc Hello.ts


we can see that a new file is generated as Hello.js
Execute this Hello.js in nodejs terminal:

PS C:\Users\monica\Desktop\TSEgs> node Hello.js
Hello World










If tsc is not working, and giving an error as:
because running scripts is disabled on this system. For more information,   
see about_Execution_Policies at 
https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ tsc abc.ts
+ ~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException    
    + FullyQualifiedErrorId : UnauthorizedAccess
Then solve it by:
Open windows + R
Type : Powershell
Open as Administrator. Then type any one of the following command :
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
set-executionpolicy remotesigned
And select option : A




Compiler flag & Description:
--help
Displays the help manual
--module
Load external modules
--target
Set the target ECMA version
--declaration
Generates an additional .d.ts file
--removeComments
Removes all comments from the output file
--out
Compile multiple files into a single output file
--sourcemap
Generate a sourcemap (.map) files
--module noImplicitAny
Disallows the compiler from inferring the any type
--watch
Watch for file changes and recompile them on the fly




TS Data Types:
Any 
    Primitive Types:
        Number, Boolean, String  , null, void, undefined
    Object Types 
        Classes, Modules, Interfaces, enum, Arrays



Operators:
Arithmetic operators : +, - , *, /, %, ^, ++, --
Logical operators : &&, ||, !
Comparison operators : ==, <, > , <=, >=, !=, ===, !==
String operators : + 
Bit-wise operators : &, |, ^, >> , <<
Assignment operators : =, +=, -=, /=, %=
Conditional operators: ? :



User-defined types includeÂ Enumerations (enums), classes, interfaces, arrays, and tuple.
