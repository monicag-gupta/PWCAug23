var x : any ="5";
var y : any = 5;
console.log(x==y); //true
console.log(x===y); //false




****************************************************************************



console.log(x); //hoisting //undefined
var x=10; // declaration and assignment
var x=20; // redeclaration
x=30; //reassignment

//console.log(y); //hoisting not in let
let y=10; // declaration and assignment
//let y=20; // redeclaration not in let
y=30; //reassignment

//console.log(z); //hoisting not in const
const z=10; // declaration and assignment
// const z=20; // redeclaration not in const
// z=30; //reassignment not in const


//global declaration and assignment
var gx=10;
let gy=20;
const gz=30;

function fn():void{
    console.log("Inside function using global vars: ")
    console.log(gx);
    console.log(gy);
    console.log(gz);

    //local declaration and assignment
    var lx=10;
    let ly=20;
    const lz=30;

    console.log("Inside function using local vars: ")
    console.log(lx);
    console.log(ly);
    console.log(lz);


    if(5>3){
        //block declaration and assignment
        var bx=10;
        let by=20;
        const bz=30;

        console.log("Inside block using block vars: ")
        console.log(bx);
        console.log(by);
        console.log(bz);

    }
    console.log("Outside block using block var bx: ")
    console.log(bx);
    // console.log(by);
    // console.log(bz);
}

fn();

// local variables are not allowed outside the function scope
console.log("Outside function using local vars: Not possible : ")
// console.log(lx);
// console.log(ly);
// console.log(lz);



**********************************************************************************************







let empName: string = "John's brother";   
let empDept: string = 'IT';   
  
// Before-ES6  
let output1: string = empName + " works in the " + empDept + " department.";   
  
// After-ES6  
let output2: string = `${empName} works in the ${empDept} department.`;   
  
console.log(output1);//John works in the IT department.   
console.log(output2);//John works in the IT department. 










let empName: string = "John";  //double quote   
let empDept: string = 'IT';    //single quote
  
// Before-ES6  
let output1: string = empName + " works in the " + empDept + " department.";   
  
// After-ES6  
let output2: string = `${empName} works in the ${empDept} department.`;   //back quote: use variables in XML style
  
console.log(output1);//John works in the IT department.   
console.log(output2);//John works in the IT department. 






let isDone: boolean = false; Â 
console.log(isDone);






var i : any = null;
console.log(i);  //null
var j : any;
console.log(j); //undefined




let first: number = 12.0;             // number   
let second: number = 0x37CF;          // hexadecimal  
let third: number = 0o377 ;           // octal  
let fourth: number = 0b111001;        // binary   
  
console.log(first);           // 12  
console.log(second);          // 14287  
console.log(third);           // 255  
console.log(fourth);          // 57 








Hello.ts:

var message:string = "Hello World"; 
console.log(message);


To compile the code and convert it to JS file:

PS C:\Users\monica\Desktop\TSEgs> tsc Hello.ts


we can see that a new file is generated as Hello.js
Execute this Hello.js in nodejs terminal:

PS C:\Users\monica\Desktop\TSEgs> node Hello.js
Hello World










If tsc is not working, and giving an error as:
because running scripts is disabled on this system. For more information,   
see about_Execution_Policies at 
https:/go.microsoft.com/fwlink/?LinkID=135170.
At line:1 char:1
+ tsc abc.ts
+ ~~~
    + CategoryInfo          : SecurityError: (:) [], PSSecurityException    
    + FullyQualifiedErrorId : UnauthorizedAccess
Then solve it by:
Open windows + R
Type : Powershell
Open as Administrator. Then type any one of the following command :
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
set-executionpolicy remotesigned
And select option : A




Compiler flag & Description:
--help
Displays the help manual
--module
Load external modules
--target
Set the target ECMA version
--declaration
Generates an additional .d.ts file
--removeComments
Removes all comments from the output file
--out
Compile multiple files into a single output file
--sourcemap
Generate a sourcemap (.map) files
--module noImplicitAny
Disallows the compiler from inferring the any type
--watch
Watch for file changes and recompile them on the fly




TS Data Types:
Any 
    Primitive Types:
        Number, Boolean, String  , null, void, undefined
    Object Types 
        Classes, Modules, Interfaces, enum, Arrays



Operators:
Arithmetic operators : +, - , *, /, %, ^, ++, --
Logical operators : &&, ||, !
Comparison operators : ==, <, > , <=, >=, !=, ===, !==
String operators : + 
Bit-wise operators : &, |, ^, >> , <<
Assignment operators : =, +=, -=, /=, %=
Conditional operators: ? :

