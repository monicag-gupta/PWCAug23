HTTP methods:

Whenever a client submits a request to a server, part of that request is an HTTP method, which is what the client would like the server to do with the specified resource. 
HTTP methods represent those requested actions. 
For example, some commonly-used HTTP methods will: 
  retrieve data from a server
  submit data to a server for processing
  delete an item from the server's data store
A large portion of application functionality can be summed up in the acronym CRUD, which stands for Create, Read, Update, Delete. 
There are four HTTP methods that correspond to these actions, one for each, like so:
  C - Create - POST
  R - Read - GET
  U - Update - PUT
  D - Delete - DELETE






HTTP Methods to CRUD:

The four main HTTP methods (GET, PUT, POST, and DELETE) can be mapped to CRUD operations as follows:

GET retrieves the representation of the resource at a specified URI. GET should have no side effects on the server.

PUT updates a resource at a specified URI. PUT can also be used to create a new resource at a specified URI, 
if the server allows clients to specify new URIs. For this tutorial, the API will not support creation through PUT.

POST creates a new resource. The server assigns the URI for the new object and returns 
this URI as part of the response message.

DELETE deletes a resource at a specified URI.




Action : HTTP method : Relative URI:

Get a list of all products : GET : /api/apiname
Get a product by ID : GET : /api/apiname/id
Get a product by category : GET : /api/apiname?category=category
Create a new product : POST : /api/apiname
Update a product : PUT : /api/apiname/id
Delete a product : DELETE : /api/apiname/id





******************************************************************************************************************

Create a Web API project: Day38WebAPI
Add to the Project -> Add Folder -> Models
In the Models folder -> Add classes:
  Student
  StudentContext
Add Controller:
  StudentsController
Run the API via Swagger



Student.cs:

namespace Day38WebAPI.Models
{
    public class Student
    {
        public int StudentId { get; set; }
        public string Name { get; set; }
        public string SurName { get; set; }

        public override string ToString()
        {
            return "ID: " + StudentId.ToString() + " Name: " + Name + " " + SurName;
        }
    }

}








StudentContext.cs:

using System.Collections.Generic;
using System.Linq;
using System;

namespace Day38WebAPI.Models
{
    public class StudentContext
    {
        public static List<Student> student = new List<Student>      {
            new Student { StudentId=101,Name="Abc",SurName="xyz"},
            new Student { StudentId = 102, Name = "Abc2", SurName = "xyz2" },
            new Student { StudentId = 103, Name = "Abc3", SurName = "xyz3" },
            new Student { StudentId = 104, Name = "Abc4", SurName = "xyz4" }
        };
        public List<Student> GetAllStudent()
        {
            return student;
        }
        public Student GetStudent(int id)
        {
            return student.FirstOrDefault(x => x.StudentId == id);
        }
        public Student DeleteStudent(int id)
        {
            Student s = student.FirstOrDefault(x => x.StudentId == id);
            student.Remove(s);
            return s;
        }
        public String InsertStudent(Student std)
        {
            student.Add(std);
            return std.ToString() + " Added Successfully!!";
        }
        public Student UpdateStudent(int id, Student s)
        {
            var std = student.FirstOrDefault(x => x.StudentId == id);
            if (std != null)
            {
                std.StudentId = s.StudentId;
                std.Name = s.Name;
                std.SurName = s.SurName;
            }
            return std;
        }
        public StudentContext()
        {
            student.Add(new Student { StudentId = 105, Name = "Abc5", SurName = "xyz5" });
            student.Add(new Student { StudentId = 106, Name = "Abc6", SurName = "xyz6" });
            student.Add(new Student { StudentId = 107, Name = "Abc7", SurName = "xyz7" });
            student.Add(new Student { StudentId = 108, Name = "Abc8", SurName = "xyz8" });
        }
    }
}





StudentsController.cs:

using Day38WebAPI.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System;

namespace Day38WebAPI.Controllers
{
    [ApiController]
    [Produces("application/json")]
    [Route("api/Students")] 
    //[Route("api/[controller]")]
    public class StudentsController : ControllerBase
    {
        private StudentContext students = new StudentContext();
        [HttpGet]
        //[Route("api/Students")]
        public ActionResult<IEnumerable<Student>> GetAllStudents()
        {
            return students.GetAllStudent();
        }
        [HttpGet("{id:int}")]
        public ActionResult<Student> GetStudentById(int id)
        {
            return students.GetStudent(id);
        }
        [HttpPut("updateStd/{id:int}")]
        public ActionResult<Student> UpdateStudent([FromRoute] int id, [FromBody] Student student)
        {
            try
            {
                if (id != student.StudentId)
                    return BadRequest("Student ID mismatch");
                var stdToUpdate = students.GetStudent(id);
                if (stdToUpdate == null)
                    return NotFound($"Student with Id = {id} not found");
                return students.UpdateStudent(id, student);
            }
            catch (Exception)
            {
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }
        [HttpDelete("DeleteStd{id:int}")]
        public ActionResult<String> DeleteStudentById(int id)
        {
            return students.DeleteStudent(id).ToString() + " Deleted successfully!";
        }
        [HttpPost]
        public string InsertStudent(Student std)
        {
            return students.InsertStudent(std);
        }
    }
}




Run the Application.

********************************************************************************************************






