Builder Pattern:


using System;

namespace Prj1Day17
{
    interface IHouse
    {
        void buildFloor();
        void buildCeiling();

    }
    class IglooHouse : IHouse
    {
        public void buildCeiling()
        {
            Console.WriteLine("Ceiling with IceDome");
        }

        public void buildFloor()
        {
            Console.WriteLine("Floor with IceBlocks");
        }
    }
    class TipiHouse : IHouse
    {
        public void buildCeiling()
        {
            Console.WriteLine("Ceiling with Wooden Carvings");
        }

        public void buildFloor()
        {
            Console.WriteLine("Floor with Wooden blocks");
        }
    }
    class BambooHouse : IHouse
    {
        public void buildCeiling()
        {
            Console.WriteLine("Ceiling with Bamboo strips");
        }

        public void buildFloor()
        {
            Console.WriteLine("Floor with bamboo blocks");
        }
    }
  
    class BuilderHouse
    {
        public IHouse GetHouse()
        {
            Console.WriteLine("Which house do you prefer: \n1. Bamboo");
            Console.WriteLine("2. Igloo\n3. Wooden\n Enter choice:");
            int ch=Convert.ToInt32(Console.ReadLine());
            if (ch == 1)
                return new BambooHouse();
            else if (ch == 2)
                return new IglooHouse();
            else
                return new TipiHouse();
        }
        public void buildHouse()
        {
            IHouse house = GetHouse();
            house.buildCeiling();
            house.buildFloor();
        }

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            BuilderHouse builder = new BuilderHouse();
            builder.buildHouse();

        }
    }
}





using System;

namespace Prj1Day17
{
    interface myIterator
    {
        int next();
        bool hasNext();
        void begin();

    }
    class intIterator : myIterator
    {
        myIntCollection myintCollection;
        public intIterator(myIntCollection myintCollection)
        {
            this.myintCollection = myintCollection;
        }
        public void begin()
        {
            myintCollection.SOI = 0;
        }

        public int next()
        {
            return myintCollection.arr[myintCollection.SOI++];

        }

        public bool hasNext() {
            return  myintCollection.SOI< myintCollection.tos;
        }
    }
    class myIntCollection {
        public int[] arr = new int[1000];
        public int tos = -1;
        public int SOI=0;
        public void add(int i)
        {
            if(tos >= 1000)
            {
                Console.WriteLine("Stack Overflow");
            }
            else
            {
                arr[++tos] = i;
            }
        }
        public void remove(int i)
        {
            for (int j = 0; j <= tos; j++)
            {
                if (arr[j] == i)
                {
                    for (int k = j; k < tos; k++)
                    {
                        arr[k] = arr[k + 1];

                    }
                    tos--;
                }
            }
        }
        

    }
    internal class Program
    {
        static void Main(string[] args)
        {
            myIntCollection myInts = new myIntCollection();
            for(int i = 10; i < 20; i++){
                myInts.add(i * i);
            }
            myIterator it = new intIterator(myInts);
            for (it.begin(); it.hasNext();)
            {
                Console.WriteLine(it.next());
            }


        }
    }
}











Abstract Factory:

using System;

namespace Prj1Day17
{
    interface IShape
    {
        string getShape();
    }
    class Triangle: IShape
    {
        public string getShape()
        {
            return "Triangle";
        }
    }
    class Square : IShape
    {
        public string getShape()
        {
            return "Square";
        }
    }
    class Circle : IShape
    {
        public string getShape()
        {
            return "Circle";
        }
    }
    class ShapeFactory
    {
        public IShape getShaperObj(string S)
        {
            if (S.ToLower() == "triangle")
            {
                return new Triangle();
            }
            else if (S.ToLower() == "circle")
            {
                return new Circle();
            }
            else
                return new Square();
        }
    }
    interface IColor
    {
        string getColor();
    }
    class Red : IColor
    {
        public string getColor()
        {
            return "Red";
        }
    }
    class Green : IColor
    {
        public string getColor()
        {
            return "Green";
        }
    }
    class Blue : IColor
    {
        public string getColor()
        {
            return "Blue";
        }
    }
    class ColorFactory
    {
        public IColor getColorObj(string C)
        {
            if (C.ToLower() == "red")
            {
                return new Red();
            }
            else if (C.ToLower() == "green")
            {
                return new Green();
            }
            else
                return new Blue();
        }
    }
    class AbstractFactoryShapeColor
    {
        IColor color;
        IShape shape;
        public AbstractFactoryShapeColor(string C, string S)
        {
            this.color = new ColorFactory().getColorObj(C);
            this.shape = new ShapeFactory().getShaperObj(S);
        }
        public void draw()
        {
            Console.WriteLine("Draw the " + shape.getShape() + " in Color: " + color.getColor());
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Choose the Color : Red / Green / Blue");
            string c = Console.ReadLine();
            Console.WriteLine("Choose the Shape : Triangle / Circle / Square");
            string s = Console.ReadLine();
            AbstractFactoryShapeColor absFactory = new AbstractFactoryShapeColor(c, s);
            absFactory.draw();
            //ColorFactory factory = new ColorFactory();
            //IColor color = factory.getColorObj(c);
            //string clor = color.getColor();
            //Console.WriteLine(clor + " is choosen");
        }
    }
}
















Factory Pattern:


using System;

namespace Prj1Day17
{
    interface IColor
    {
        string getColor();
    }
    class Red : IColor
    {
        public string getColor()
        {
            return "Red";
        }
    }
    class Green : IColor
    {
        public string getColor()
        {
            return "Green";
        }
    }
    class Blue : IColor
    {
        public string getColor()
        {
            return "Blue";
        }
    }
    class ColorFactory
    {
        public IColor getColorObj(string C)
        {
            if (C.ToLower() == "red")
            {
                return new Red();
            }
            else if (C.ToLower() == "green")
            {
                return new Green();
            }
            else
                return new Blue();
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Choose the Color : Red / Green / Blue");
            string c = Console.ReadLine();
            ColorFactory factory = new ColorFactory();
            IColor color = factory.getColorObj(c);
            string clor = color.getColor();
            Console.WriteLine(clor + " is choosen");
        }
    }
}
