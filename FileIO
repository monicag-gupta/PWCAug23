







Menu driven program:
Write a program that accepts text from the user and writes it to a file until he/she enters “done”. 
After “done” is entered, display the number of words (separated by space) along with the content of the file.

Any of the Methods of classes: FileStream, File, StreamWriter and StreamReader 







using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {

            StreamWriter sw = new StreamWriter("C://Monica//file1.txt",true);
            Console.WriteLine("Enter the Text that you want to append on File");
            string str = Console.ReadLine();
            sw.WriteLine(str);
            sw.Flush();
            sw.Close();

        }

    }
}
















using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {

            StreamReader sr = new StreamReader("C://Monica//file1.txt");
            Console.WriteLine("Content of the File");
            sr.BaseStream.Seek(0, SeekOrigin.Begin);
            string str = sr.ReadLine();
            while (str != null)
            {
                Console.WriteLine(str);
                str = sr.ReadLine();
            }
            
            sr.Close();
        }

    }
}














Hello World!
Hello C# Coders!
Happy Coding..











using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {

            StreamWriter sw = new StreamWriter("C://Monica//file1.txt");
            Console.WriteLine("Enter the Text that you want to write on File");
            string str = Console.ReadLine();
            sw.WriteLine(str);
            sw.Flush();
            sw.Close();



        }

    }
}













StreamWriter Class:
The StreamWriter class implements TextWriter for writing character to stream in a particular format.
METHOD
DESCRIPTION
Close()
Closes the current StreamWriter object and stream associate with it.
Flush()
Clears all the data from the buffer and write it in the stream associate with it.
Write()
Write data to the stream. It has different overloads for different data types to write in stream.
WriteLine()
It is same as Write() but it adds the newline character at the end of the data.

StreamReader Class
The StreamReader class implements TextReader for reading character from the stream in a particular format.
METHOD
DESCRIPTION
Close()
Closes the current StreamReader object and stream associate with it.
Peek()
Returns the next available character but does not consume it.
Read()
Reads the next character in input stream and increment characters position by one in the stream
ReadLine()
Reads a line from the input stream and return the data in form of string
Seek()
It is use to read/write at the specific location from a file


















using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {

            string writeText = "Hello World!";
            // Create a file and write the contents of writeText to it
            File.WriteAllText("C:\\Monica\\filename.txt", writeText);
            // Read the contents of the file
            string readText = File.ReadAllText("C:\\Monica\\filename.txt");
            Console.WriteLine(readText); // Output the content


        }

    }
}














File Class:
The File class from the System.IO namespace, allows us to work with files.
Method
Description
AppendText()
Appends text at the end of an existing file
Copy()
Copies a file
Create()
Creates or overwrites a file
Delete()
Deletes a file
Exists()
Tests whether the file exists
ReadAllText()
Reads the contents of a file
Replace()
Replaces the contents of a file with the contents of another file
WriteAllText()
Creates a new file and writes the contents to it. If the file already exists, it will be overwritten.









Use cmd args to copy source to destination
C:\\Monica\\Textfile.txt C:\\Monica\\CopyFile.txt





Design a menu driven program to: (Use FileStream)
1.Write to a file
2. Append to a file
3. Read from a file
4. Exit

File name being HelloWorld.txt







using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {
            FileStream fWrite = new FileStream(@"C:\Monica\Textfile.txt", FileMode.Append, FileAccess.Write, FileShare.None);
            var text = "This is some text written to the textfile " + "named Textfile using FileStream class.";
            // Store the text in a byte array with  UTF8 encoding (8-bit Unicode  Transformation Format) 
            byte[] writeArr = Encoding.UTF8.GetBytes(text);
            fWrite.Write(writeArr, 0, text.Length);   //Write to file
            fWrite.Close();
            FileStream fRead = new FileStream(@"C:\Monica\Textfile.txt", FileMode.Open, FileAccess.Read, FileShare.Read);
            byte[] readArr = new byte[text.Length];
            int count;
            while ((count = fRead.Read(readArr, 0, readArr.Length)) > 0)
            {
                Console.WriteLine(Encoding.UTF8.GetString(readArr, 0, count));   //Read from file
            }
            fRead.Close();


        }

    }
}

















using System;
using System.IO;
using System.Text;

namespace Prj1Day19Col
{
    class Program
    {
        static void Main(string[] args)
        {
            FileStream fWrite = new FileStream(@"C:\Monica\Textfile.txt", FileMode.Create, FileAccess.Write, FileShare.None);
            var text = "This is some text written to the textfile " + "named Textfile using FileStream class.";
            // Store the text in a byte array with  UTF8 encoding (8-bit Unicode  Transformation Format) 
            byte[] writeArr = Encoding.UTF8.GetBytes(text);
            fWrite.Write(writeArr, 0, text.Length);   //Write to file
            fWrite.Close();
            FileStream fRead = new FileStream(@"C:\Monica\Textfile.txt", FileMode.Open, FileAccess.Read, FileShare.Read);
            byte[] readArr = new byte[text.Length];
            int count;
            while ((count = fRead.Read(readArr, 0, readArr.Length)) > 0)
            {
                Console.WriteLine(Encoding.UTF8.GetString(readArr, 0, count));   //Read from file
            }
            fRead.Close();


        }

    }
}



















File IO classes:
BinaryReader : Reads primitive data from a binary stream.
BinaryWriter : Writes primitive data in binary format.
BufferedStream : A temporary storage for a stream of bytes.
Directory : Helps in manipulating a directory structure.
DirectoryInfo : Used for performing operations on directories.
DriveInfo : Provides information for the drives. 
File : Helps in manipulating files.
FileInfo : Used for performing operations on files.
FileStream : Used to read from and write to any location in a file.
MemoryStream : Used for random access to streamed data stored in memory.
Path : Performs operations on path information.
StreamReader : Used for reading characters from a byte stream.
StreamWriter : Is used for writing characters to a stream.
StringReader : Is used for reading from a string buffer.
StringWriter : Is used for writing into a string buffer.


FileStream:
C# FileStream class provides a stream for file operation. 
It can be used to perform synchronous and asynchronous read and write operations. 
By the help of FileStream class, we can easily read and write data into file.
Syntax:
FileStream <object_name> = new FileStream( <file_name>, <FileMode Enumerator>, <FileAccess Enumerator>, <FileShare Enumerator>);
FileMode : can be Append, Create, CreateNew, Open, OpenOrCreate, Truncate.
FileAccess : can be Read, ReadWrite and Write.
FileShare : can be Inheritable, None, Delete, Read, ReadWrite, Write.





