Rules:
declare the class as sealed so it cannot be extended
all class members should be private and readonly so they cannot be accessed outside of class
shouldn't contain any setter methods to change the value of class members
the getter method should return the copy of class members
class members are only initialized using constructor








using System;


namespace Prj1Day1Con
{
    class Address
    {
        private string add;
        public Address()
        {
            add = "IDK";
        }
        public Address(string add)
        {
            this.add = add;
        }
        public void setAdd(string add) { this.add = add; }
        public string getAdd() { return add; }

    }
    class Employee
    {
        private readonly int id;
        private readonly string name;
        private readonly Address address;
        public Employee()
        {
            id = 101;
            name = "IDK";
            address = new Address();
        }
        public Employee(int id, string name, Address address)
        {
            this.id = id;
            this.name = name;
            this.address = new Address(address.getAdd());
        }
        public String getValues()
        {
            return "Id : " + getId() + " name : " + getName() + " address : " + getAddress().getAdd(); 
        }
        public int getId() { return id; }
        public string getName() { return name; }
        public Address getAddress() { return new Address(address.getAdd()); }

    }
    class Program
    {
       static void Main()
        {
            Address add = new Address("Delhi");
            Employee e = new Employee(102, "Abc", add);
            Console.WriteLine("Before add.setter: \n" + e.getValues());
            add.setAdd("Kolkatta");
            Console.WriteLine("After add.setter: \n" + e.getValues());
            e.getAddress().setAdd("Mumbai");
            Console.WriteLine("After using getAddress.setAdd(): \n" + e.getValues());
        }
    }
}

/*
 



 */




1. Classes are sealed (cannot be further inheritance)
2. All fields are private and readonly
3. Getters for the fields (No Setter is allowed : since itâ€™s readonly the setters are not applicable)
4. If the reference of mutable object is used in immutable class, the do not refer to it in the constructor. Copy the value rather than the reference in the constructor.
5. If getters are used for Mutable objects, then do not return the direct reference to the object.














using System;
using System.Text;

namespace Prj1Day1Con
{
    class Program
    {
        static void concat1(string s)
        {
            s += " C#";
        }
        static void concat2(StringBuilder s)
        {
            s.Append(" C#");
        }

        static void Main()
        {
            string s = "Coder in :";
            StringBuilder sb = new StringBuilder(s);
            Console.WriteLine("Before Concat fns: \ns = {0}\nsb = {1}", s, sb);
            concat1(s);
            concat2(sb);
            Console.WriteLine("After Concat fns: \ns = {0}\nsb = {1}", s, sb);
        }
    }
}

/*
 
Before Concat fns:
s = Coder in :
sb = Coder in :
After Concat fns:
s = Coder in :
sb = Coder in : C#


 */
