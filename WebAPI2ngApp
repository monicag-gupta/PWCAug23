WebAPI:
Create a folder : Models

Inside the Models folder:

Models:

using System.Collections.Generic;
using System.Linq;

namespace StdAPI.Models
{
    public class Student
    {
        public int StudentId { get; set; }
        public string Name { get; set; }
        public string SurName { get; set; }

        public override string ToString()
        {
            return "ID: " + StudentId.ToString() + " Name: " + Name + " " + SurName;
        }
    }
    public class StudentContext
    {
        public static List<Student> student = new List<Student>      {
            new Student { StudentId=101,Name="Abc",SurName="xyz"},
            new Student { StudentId = 102, Name = "Abc2", SurName = "xyz2" },
            new Student { StudentId = 103, Name = "Abc3", SurName = "xyz3" },
            new Student { StudentId = 104, Name = "Abc4", SurName = "xyz4" }
        };
        public List<Student> GetAllStudent()
        {
            return student;
        }
        public Student GetStudent(int id)
        {
            return student.FirstOrDefault(x => x.StudentId == id);
        }
        public Student DeleteStudent(int id)
        {
            Student s = student.FirstOrDefault(x => x.StudentId == id);
            student.Remove(s);
            return s;
        }
        public string InsertStudent(Student std)
        {
            student.Add(std);
            return std.ToString() + " Added Successfully!!";
        }
        public Student UpdateStudent(int id, Student s)
        {
            var std = student.FirstOrDefault(x => x.StudentId == id);
            if (std != null)
            {
                std.StudentId = s.StudentId;
                std.Name = s.Name;
                std.SurName = s.SurName;
            }
            return std;
        }
        public StudentContext()
        {
            student.Add(new Student { StudentId = 105, Name = "Abc5", SurName = "xyz5" });
            student.Add(new Student { StudentId = 106, Name = "Abc6", SurName = "xyz6" });
            student.Add(new Student { StudentId = 107, Name = "Abc7", SurName = "xyz7" });
            student.Add(new Student { StudentId = 108, Name = "Abc8", SurName = "xyz8" });
        }
    }
}





Add the API Controller:

StdController:

using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using StdAPI.Models;
using System.Collections.Generic;

namespace StdAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class StdController : ControllerBase
    {
        private static StudentContext students = new StudentContext();
        [HttpGet]
        [Route("Stds")]
        [EnableCors("AllowOrigin")]
        public ActionResult<IEnumerable<Student>> GetAllStudents()
        {
            return students.GetAllStudent();
        }
        [HttpGet("{id:int}")]
        public ActionResult<Student> GetStudentById(int id)
        {
            return students.GetStudent(id);
        }

    }
}



Run and check if all is working ..
stop the WEB API

open startup.cs:

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace StdAPI
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }
        //readonly string MyAllowSpecificOrigins = "_myAllowSpecificOrigins";

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            //services.AddCors(options =>
            //{
            //    options.AddPolicy(MyAllowSpecificOrigins,
            //    builder =>
            //    {
            //        builder.WithOrigins("http://localhost:53135",
            //                            "http://localhost:4200"
            //                            )
            //                            .AllowAnyHeader()
            //                            .AllowAnyMethod();
            //    });
            //});
            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "StdAPI", Version = "v1" });
            });
//I have Added AddCors
            services.AddCors(c =>
            {
                c.AddPolicy("AllowOrigin",
                    options =>
                        options.AllowAnyOrigin()
                        .AllowAnyHeader()
                         .AllowAnyMethod());                        
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "StdAPI v1"));
            }
            //app.UseCors(MyAllowSpecificOrigins);
            

            app.UseRouting();
//I have Added in between Routing and Redirection
            app.UseCors(x => x
.AllowAnyOrigin()
.AllowAnyMethod()
.AllowAnyHeader());

            app.UseHttpsRedirection();
            // app.UseHttpsRedirection();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

           
        }
    }
}



Save App and re run..

Note the URL address for getting the stds list:
https://localhost:44353/api/Std/Stds

DO NOT CLOSE the API

Open nodeJs command prompt
Navigate to the fav folder
And create a new Angular APP:

>ng new ng2App


>cd ng2App
>ng generate service stud


>ng serve

open a new chrome window: 
type:
http://localhost:4200/

see the default output


Open stud.service.ts file from app folder:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';


@Injectable({
  providedIn: 'root'
})
export class StudService {

  constructor(private httpClient:HttpClient) { }
   getPosts(): Observable<any[]> {
    return this.httpClient.get<any[]>(`https://localhost:44353/api/Std/Stds`);
  }
  
}




app.module.ts:

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { StudService } from './stud.service';
import { HttpClientModule } from '@angular/common/http';


@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [StudService],
  bootstrap: [AppComponent]
})
export class AppModule { }





app.component.ts:

import { Component, OnInit } from '@angular/core';  
import { StudService } from './stud.service'; 
import { HttpClient } from '@angular/common/http'; 

@Component({   
      selector: 'app-root',  
      templateUrl: './app.component.html',  
      styleUrls : ['./app.component.css']  
})  
export class AppComponent implements OnInit {  
      public studs:any[]=[{}];
      constructor(private stud: StudService){  
            this.stud.getPosts().subscribe((data: any[]) => {
                 this.studs = data;
	         console.log(data);  
	    }); 
      }  
      ngOnInit() { }
 
}
















